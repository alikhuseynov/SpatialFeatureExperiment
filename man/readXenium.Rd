% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read.R
\name{readXenium}
\alias{readXenium}
\title{Read 10X Xenium output as SpatialFeatureExperiment}
\usage{
readXenium(
  data_dir,
  sample_id = "sample01",
  image = c("morphology_focus", "morphology_mip"),
  segmentations = c("cell", "nucleus"),
  row.names = c("id", "symbol"),
  read.image_args = list(resolution = 4L, filter.metadata = TRUE, read.metadata = FALSE,
    normalize = FALSE),
  image_threshold = NULL,
  flip = c("geometry", "image", "none"),
  max_flip = "50 MB",
  filter_counts = FALSE,
  add_molecules = FALSE,
  BPPARAM = SerialParam(),
  file_out = file.path(data_dir, "tx_spots.parquet"),
  ...
)
}
\arguments{
\item{data_dir}{Top level directory of Vizgen output, which contains
directories \code{cell_boundaries} and \code{images}, and files
\code{cell_by_gene.csv}, \code{cell_metadata.csv}, and
\code{detected_transcripts.csv}.}

\item{sample_id}{A \code{character} sample identifier, which matches the
\code{sample_id} in \code{\link[SpatialExperiment]{imgData}}. The \code{sample_id} will also
be stored in a new column in \code{\link[SpatialExperiment]{colData}}, if not already present.
Default = \code{sample01}.}

\item{image}{Which image(s) to load, can be "morphology_mip",
"morphology_focus" or both.}

\item{segmentations}{Which segmentation outputs to read, can be "cell",
"nucleus", or both.}

\item{row.names}{String specifying whether to use Ensembl IDs ("id") or gene
symbols ("symbol") as row names. If using symbols, the Ensembl ID will be
appended to disambiguate in case the same symbol corresponds to multiple
Ensembl IDs. Always "symbol" if `add_molecules = TRUE` because only gene
symbols are used in the transcript spot files.}

\item{read.image_args}{list of arguments to be passed to
(`RBioFormats::read.image`)}

\item{image_threshold}{Integer value, below which threshold is to set values
to `NA`, default is to `30L`, this removes some background artifacts.}

\item{flip}{To flip the image, geometry coordinates, or none. Because the
image has the origin at the top left while the geometry has origin at the
bottom left, one of them needs to be flipped for them to match. If one of
them is already flipped, then use "none". The image will not be flipped if
it's GeoTIFF.}

\item{max_flip}{Maximum size of the image allowed to flip the image. Because
the image will be loaded into memory to be flipped. If the image is larger
than this size then the coordinates will be flipped instead.}

\item{filter_counts}{Keep cells with counts \code{> 0}.}

\item{add_molecules}{Logical, whether to add transcripts coordinates to an
object.}

\item{BPPARAM}{A \code{\link{BiocParallelParam}} object specifying parallel
  processing backend and number of threads to use for parallelizable tasks:
  \enumerate{ \item To load cell segmentation from HDF5 files from different
  fields of view (FOVs) with multiple cores. A progress bar can be configured
  in the \code{\link{BiocParallelParam}} object. When there are numerous
  FOVs, reading in the geometries can be time consuming, so we recommend
  using a server and larger number of threads. This argument is not used if
  \code{use_cellpose = TRUE} and the parquet file is present.

  \item To get the largest piece and see if it's larger than \code{min_area}
  when there are multiple pieces in the cell segmentation for one cell.}}

\item{file_out}{Name of file to save the geometry or raster to disk.
Especially when the geometries are so large that it's unwieldy to load
everything into memory. If this file (or directory for multiple files)
already exists, then the existing file(s) will be read, skipping the
processing. When writing the file, extensions supplied are ignored and
extensions are determined based on `dest`.}

\item{...}{Other arguments passed to \code{\link{formatTxSpots}} to format
and add the transcript spots data to the SFE object, except that extent is
read from `manifest.json` and that `dest = "rowGeometry"` because the spot
coordinates are in micron space and are not discrete so converting the
transcript spots to raster won't work. A default is set for `file_out` to
save the reformatted transcript spots to disk by default since reloading
the reformatted form is much more efficient. Reading the original detected
transcripts csv file can take up a lot of memory. Expect at least twice the
size of that csv file, even more if using multiple threads. So we STRONGLY
recommend saving the reformatted results to disk.}
}
\value{
An SFE object. If reading segmentations, the cell or nuclei
  segmentation will be saved to `cell_boundaries_sf.parquet` and
  `nucleus_boundaries_sf.parquet` respectively in `data.dir` so next time the
  boundaries can be read much more quickly. If reading transcript spots
  (`add_molecules = TRUE`), then the reformatted transcript spots are saved
  to file specified in the `file_out` argument, which is by default
  `tx_spots.parquet` in the same directory as the rest of the data. If images
  are present, then the images will be of the \code{BioFormatsImage} class
  and not loaded into memory until necessary in later operations.
}
\description{
This function reads the standard 10X Xenium output into an SFE object.
}
\examples{
# TODO: Example code for Xenium toy data

# custom example run:
if (FALSE)
sfe <-
 readXenium(data_dir = data_dir,
 sample_id = "test_xenium",
 image = c("morphology_focus", "morphology_mip"),
 segmentations = c("cell", "nucleus"),
 read.image_args = # list of arguments to passed to RBioFormats::read.image
 list("resolution" = 4L,
 "filter.metadata" = TRUE,
 "read.metadata" = FALSE,
 "normalize" = FALSE),
 image_threshold = 30,
 flip = "geometry",
 filter_counts = TRUE,
 add_molecules = TRUE,
 BPPARAM = BiocParallel::MulticoreParam(14, tasks = 80L, force.GC = FALSE, progressbar = TRUE),
 file_out = NULL)

}
