% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read.R
\name{readCosMX}
\alias{readCosMX}
\title{Read CosMX data into SFE}
\usage{
readCosMX(
  data_dir,
  z = 3L,
  sample_id = "sample01",
  add_molecules = FALSE,
  split_cell_comps = FALSE,
  BPPARAM = SerialParam(),
  file_out = file.path(data_dir, "tx_spots.parquet"),
  ...
)
}
\arguments{
\item{data_dir}{Top level directory of Vizgen output, which contains
directories \code{cell_boundaries} and \code{images}, and files
\code{cell_by_gene.csv}, \code{cell_metadata.csv}, and
\code{detected_transcripts.csv}.}

\item{z}{Integer, z index to read, only affecting images read since cell
segmentation for all z-planes are the same and cell centroids are only
provided in 2 dimensions.}

\item{sample_id}{A \code{character} sample identifier, which matches the
\code{sample_id} in \code{\link[SpatialExperiment]{imgData}}. The \code{sample_id} will also
be stored in a new column in \code{\link[SpatialExperiment]{colData}}, if not already present.
Default = \code{sample01}.}

\item{add_molecules}{Logical, whether to add transcripts coordinates to an
object.}

\item{split_cell_comps}{Logical, whether to split transcript spot geometries
by cell compartment. Only relevant when `add_molecules = TRUE`.}

\item{BPPARAM}{A \code{\link{BiocParallelParam}} object specifying parallel
  processing backend and number of threads to use for parallelizable tasks:
  \enumerate{ \item To load cell segmentation from HDF5 files from different
  fields of view (FOVs) with multiple cores. A progress bar can be configured
  in the \code{\link{BiocParallelParam}} object. When there are numerous
  FOVs, reading in the geometries can be time consuming, so we recommend
  using a server and larger number of threads. This argument is not used if
  \code{use_cellpose = TRUE} and the parquet file is present.

  \item To get the largest piece and see if it's larger than \code{min_area}
  when there are multiple pieces in the cell segmentation for one cell.}}

\item{file_out}{Name of file to save the geometry or raster to disk.
Especially when the geometries are so large that it's unwieldy to load
everything into memory. If this file (or directory for multiple files)
already exists, then the existing file(s) will be read, skipping the
processing. When writing the file, extensions supplied are ignored and
extensions are determined based on `dest`.}

\item{...}{Other arguments passed to \code{\link{formatTxSpots}} to format
and add the transcript spots data to the SFE object, except that extent is
read from `manifest.json` and that `dest = "rowGeometry"` because the spot
coordinates are in micron space and are not discrete so converting the
transcript spots to raster won't work. A default is set for `file_out` to
save the reformatted transcript spots to disk by default since reloading
the reformatted form is much more efficient. Reading the original detected
transcripts csv file can take up a lot of memory. Expect at least twice the
size of that csv file, even more if using multiple threads. So we STRONGLY
recommend saving the reformatted results to disk.}
}
\value{
An SFE object. Cell polygons are written to
  `cell_boundaries_sf.parquet` in `data_dir`. If reading transcript spots
  (`add_molecules = TRUE`), then the reformatted transcript spots are saved
  to file specified in the `file_out` argument, which is by default
  `tx_spots.parquet` in the same directory as the rest of the data.
}
\description{
This function reads the standard CosMX output into an SFE object, as in
"Basic Data Files" on the Nanostring website.
}
\examples{
dir_use <- system.file("extdata/cosmx", package = "SpatialFeatureExperiment")
file.copy(dir_use, ".", recursive = TRUE)
sfe <- readCosMX("cosmx", z = "all", add_molecules = TRUE)
# Clean up
unlink("cosmx", recursive = TRUE)
}
