[{"path":"/articles/SFE.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Introduction to the SpatialFeatureExperiment class","text":"package can installed Bioconductor:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))   install.packages(\"BiocManager\") BiocManager::install(\"SpatialFeatureExperiment\")"},{"path":[]},{"path":"/articles/SFE.html","id":"introduction","dir":"Articles","previous_headings":"Class structure","what":"Introduction","title":"Introduction to the SpatialFeatureExperiment class","text":"SpatialFeatureExperiment (SFE) new S4 class built top SpatialExperiment (SPE). SpatialFeatureExperiment incorporates geometries geometry operations sf package. Examples supported geometries Visium spots represented polygons corresponding size, cell nuclei segmentation polygons, tissue boundary polygons, pathologist annotation histological regions, transcript spots genes. Using sf, SpatialFeatureExperiment leverages GEOS C++ libraries underlying sf geometry operations, including algorithms determining whether geometries intersect, finding intersection geometries, buffering geometries margins, etc. schematic SFE object shown : Schematics SFE object list SFE features extend SPE object: colGeometries sf data frames associated entities correspond columns gene count matrix, Visium spots cells. geometries sf data frames can Visium spot centroids, Visium spot polygons, datasets single cell resolution, cell nuclei segmentations. Multiple colGeometries can stored SFE object, one cell segmentation another nuclei segmentation. can non-spatial, attribute columns colGeometry rather colData, sf class allows users specify attributes relate geometries, “constant”, “aggregate”, “identity”. See agr argument st_sf documentation. colGraphs spatial neighborhood graphs cells spots. graphs class listw (spdep package), colPairs SingleCellExperiment used conversion necessary use numerous spatial dependency functions spdep, Moran’s , Geary’s C, Getis-Ord Gi*, LOSH, etc. Conversion also needed classical spatial statistics packages spatialreg adespatial. rowGeometries similar colGeometries, support entities correspond rows gene count matrix, genes. potential use case store transcript spots gene smFISH situ sequencing based datasets. rowGraphs similar colGraphs. potential use case may spatial colocalization transcripts different genes. annotGeometries sf data frames associated dataset directly gene count matrix, tissue boundaries, histological regions, cell nuclei segmentation Visium datasets, etc. geometries stored object facilitate plotting using sf operations find number nuclei Visium spot histological regions Visium spot intersects. Unlike colGeometries rowGeometries, number rows sf data frames annotGeometries constrained dimension gene count matrix can arbitrary. annotGraphs similar colGraphs rowGraphs, entities directly associated gene count matrix, spatial neighborhood graphs nuclei Visium datasets, objects like myofibers. graphs relevant spdep analyses attributes geometries spatial autocorrelation morphological metrics myofibers nuclei. geometry operations sf, attributes results analyses attributes (e.g. spatial regions defined attributes) may related back gene expression. localResults similar reducedDims SingleCellExperiment, stores results univariate bivariate local spatial analysis results, localmoran, Getis-Ord Gi*, local spatial heteroscedasticity (LOSH). Unlike reducedDims, type results (type type analysis Getis-Ord Gi*), feature (e.g. gene) pair features analysis performed results. local spatial analyses can also performed attributes colGeometries annotGeometries addition gene expression colData. Results multivariate spatial analysis MULTISPATI PCA can stored reducedDims.","code":"library(SpatialFeatureExperiment) #>  #> Attaching package: 'SpatialFeatureExperiment' #> The following object is masked from 'package:base': #>  #>     scale library(SpatialExperiment) #> Loading required package: SingleCellExperiment #> Loading required package: SummarizedExperiment #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: 'MatrixGenerics' #> The following objects are masked from 'package:matrixStats': #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: 'BiocGenerics' #> The following objects are masked from 'package:stats': #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from 'package:base': #>  #>     anyDuplicated, aperm, append, as.data.frame, basename, cbind, #>     colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, #>     get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply, #>     match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, #>     Position, rank, rbind, Reduce, rownames, sapply, setdiff, table, #>     tapply, union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: 'S4Vectors' #> The following object is masked from 'package:utils': #>  #>     findMatches #> The following objects are masked from 'package:base': #>  #>     expand.grid, I, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: 'Biobase' #> The following object is masked from 'package:MatrixGenerics': #>  #>     rowMedians #> The following objects are masked from 'package:matrixStats': #>  #>     anyMissing, rowMedians library(SFEData) library(sf) #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE library(Matrix) #>  #> Attaching package: 'Matrix' #> The following object is masked from 'package:S4Vectors': #>  #>     expand # Example dataset (sfe <- McKellarMuscleData(dataset = \"small\")) #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache #> class: SpatialFeatureExperiment  #> dim: 15123 77  #> metadata(0): #> assays(1): counts #> rownames(15123): ENSMUSG00000025902 ENSMUSG00000096126 ... #>   ENSMUSG00000064368 ENSMUSG00000064370 #> rowData names(6): Ensembl symbol ... vars cv2 #> colnames(77): AAATTACCTATCGATG AACATATCAACTGGTG ... TTCTTTGGTCGCGACG #>   TTGATGTGTAGTCCCG #> colData names(12): barcode col ... prop_mito in_tissue #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : imageX imageY #> imgData names(1): sample_id #>  #> unit: full_res_image_pixels #> Geometries: #> colGeometries: spotPoly (POLYGON)  #> annotGeometries: tissueBoundary (POLYGON), myofiber_full (GEOMETRY), myofiber_simplified (GEOMETRY), nuclei (POLYGON), nuclei_centroid (POINT)  #>  #> Graphs: #> Vis5A:"},{"path":"/articles/SFE.html","id":"geometries","dir":"Articles","previous_headings":"Class structure","what":"Geometries","title":"Introduction to the SpatialFeatureExperiment class","text":"User interfaces get set geometries spatial graphs emulate reducedDims row/colPairs SingleCellExperiment. Column row geometries also emulate reducedDims internal implementation, annotation geometries spatial graphs differ.","code":""},{"path":"/articles/SFE.html","id":"column-and-row","dir":"Articles","previous_headings":"Class structure > Geometries","what":"Column and row","title":"Introduction to the SpatialFeatureExperiment class","text":"Column row geometries can get set dimGeometries() dimGeometry() function. MARGIN argument apply() function: MARGIN = 1 means row, MARGIN = 2 means column. dimGeometry() gets sets one particular geometry name index.  dimGeometries() gets sets geometry given margin. dimGeometryNames() gets sets names geometries colGeometry(sfe, \"spotPoly\"), colGeometries(sfe), colGeometryNames(sfe) shorthands dimGeometry(sfe, \"spotPoly\", MARGIN = 2), dimGeometries(sfe, MARGIN = 2), dimGeometryNames(sfe, MARGIN = 2) respectively. Similarly, rowGeometr*(sfe, ...) shorthand dimGeometr*(sfe, ..., MARGIN = 1). shorthands specific column row geometries. example, spotPoly(sfe) equivalent colGeometry(sfe, \"spotPoly\") Visium spot polygons, txSpots(sfe) equivalent rowGeometry(sfe, \"txSpots\") transcript spots single molecule technologies.","code":"# Get Visium spot polygons (spots <- dimGeometry(sfe, \"spotPoly\", MARGIN = 2)) #> Simple feature collection with 77 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 5000 ymin: 13000 xmax: 7000 ymax: 15000 #> CRS:           NA #> First 10 features: #>                                        geometry sample_id #> AAATTACCTATCGATG POLYGON ((6472.186 13875.23...     Vis5A #> AACATATCAACTGGTG POLYGON ((5778.291 13635.43...     Vis5A #> AAGATTGGCGGAACGT POLYGON ((7000 13809.84, 69...     Vis5A #> AAGGGACAGATTCTGT POLYGON ((6749.535 13874.64...     Vis5A #> AATATCGAGGGTTCTC POLYGON ((5500.941 13636.03...     Vis5A #> AATGATGATACGCTAT POLYGON ((6612.42 14598.82,...     Vis5A #> AATGATGCGACTCCTG POLYGON ((5501.981 14118.62...     Vis5A #> AATTCATAAGGGATCT POLYGON ((6889.769 14598.22...     Vis5A #> ACGAGTACGGATGCCC POLYGON ((5084.397 13395.63...     Vis5A #> ACGCTAGTGATACACT POLYGON ((5639.096 13394.44...     Vis5A plot(st_geometry(spots)) # Setter dimGeometry(sfe, \"foobar\", MARGIN = 2) <- spots # Getter, all geometries of one margin (cgs <- dimGeometries(sfe, MARGIN = 2)) #> List of length 2 #> names(2): spotPoly foobar # Setter, all geometries dimGeometries(sfe, MARGIN = 2) <- cgs (cg_names <- dimGeometryNames(sfe, MARGIN = 2)) #> [1] \"spotPoly\" \"foobar\" # Setter dimGeometryNames(sfe, MARGIN = 2) <- cg_names # Getter (spots <- spotPoly(sfe)) #> Simple feature collection with 77 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 5000 ymin: 13000 xmax: 7000 ymax: 15000 #> CRS:           NA #> First 10 features: #>                                        geometry sample_id #> AAATTACCTATCGATG POLYGON ((6472.186 13875.23...     Vis5A #> AACATATCAACTGGTG POLYGON ((5778.291 13635.43...     Vis5A #> AAGATTGGCGGAACGT POLYGON ((7000 13809.84, 69...     Vis5A #> AAGGGACAGATTCTGT POLYGON ((6749.535 13874.64...     Vis5A #> AATATCGAGGGTTCTC POLYGON ((5500.941 13636.03...     Vis5A #> AATGATGATACGCTAT POLYGON ((6612.42 14598.82,...     Vis5A #> AATGATGCGACTCCTG POLYGON ((5501.981 14118.62...     Vis5A #> AATTCATAAGGGATCT POLYGON ((6889.769 14598.22...     Vis5A #> ACGAGTACGGATGCCC POLYGON ((5084.397 13395.63...     Vis5A #> ACGCTAGTGATACACT POLYGON ((5639.096 13394.44...     Vis5A # Setter spotPoly(sfe) <- spots"},{"path":"/articles/SFE.html","id":"annotation","dir":"Articles","previous_headings":"Class structure > Geometries","what":"Annotation","title":"Introduction to the SpatialFeatureExperiment class","text":"Annotation geometries can get set annotGeometries() annotGeometry(). column row geometries, number rows sf data frame (.e. number geometries data frame) constrained number rows columns gene count matrix respectively, just like rowData colData, row rowGeometry colGeometry sf data frame must correspond row column gene count matrix respectively. contrast, annotGeometry sf data frame can dimension, constrained dimension gene count matrix. Similar column row geometries, annotation geometries annotGeometry(), annotGeometries(), annotGeometryNames() getters setters.  shorthands specific annotation geometries. example, tissueBoundary(sfe) equivalent annotGeometry(sfe, \"tissueBoundary\"). cellSeg() (cell segmentation) nucSeg() (nuclei segmentation) first query colGeometries (single cell, single molecule technologies, equivalent colGeometry(sfe, \"cellSeg\") colGeometry(sfe, \"nucSeg\")), found, query annotGeometries (array capture microdissection technologies, equivalent annotGeometry(sfe, \"cellSeg\") annotGeometry(sfe, \"nucSeg\")).","code":"# Getter, by name or index (tb <- annotGeometry(sfe, \"tissueBoundary\")) #> Simple feature collection with 1 feature and 2 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 5094 ymin: 13000 xmax: 7000 ymax: 14969 #> CRS:           NA #>   ID                       geometry sample_id #> 7  7 POLYGON ((5094 13000, 5095 ...     Vis5A plot(st_geometry(tb)) # Setter, by name or index annotGeometry(sfe, \"tissueBoundary\") <- tb # Get all annoation geometries as named list ags <- annotGeometries(sfe) # Set all annotation geometries with a named list annotGeometries(sfe) <- ags # Get names of annotation geometries (ag_names <- annotGeometryNames(sfe)) #> [1] \"tissueBoundary\"      \"myofiber_full\"       \"myofiber_simplified\" #> [4] \"nuclei\"              \"nuclei_centroid\" # Set names annotGeometryNames(sfe) <- ag_names # Getter (tb <- tissueBoundary(sfe)) #> Simple feature collection with 1 feature and 2 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 5094 ymin: 13000 xmax: 7000 ymax: 14969 #> CRS:           NA #>   ID                       geometry sample_id #> 7  7 POLYGON ((5094 13000, 5095 ...     Vis5A # Setter tissueBoundary(sfe) <- tb"},{"path":"/articles/SFE.html","id":"spatial-graphs","dir":"Articles","previous_headings":"Class structure","what":"Spatial graphs","title":"Introduction to the SpatialFeatureExperiment class","text":"Column, row, annotation spatial graphs can get set spatialGraphs() spatialGraph() functions. Similar dimGeometr* functions, spatialGraph* functions MARGIN argument. However, since internally, row column geometries implemented differently annotation geometries, row, column, annotation graphs implemented way, spatialGraph* functions, MARGIN = 1 means rows, MARGIN = 2 means columns, MARGIN = 3 means annotation. Similar dimGeometry* functions, rowGraph*, colGraph*, annotGraph* getter setter functions margin. package wraps functions spdep package find spatial neighborhood graphs. example, triangulation used find spatial graph; many methods also supported, k nearest neighbors, distance based neighbors, polygon contiguity.  Visium, spatial neighborhood graph hexagonal grid can found known locations barcodes.  graphs SFE object, specified, margin interest, can get set spatialGraphs() margin specific wrappers. Similar dimGeometries(), graphs spatialGraphNames() getter setter margin specific wrappers.","code":"(g <- findSpatialNeighbors(sfe, MARGIN = 2, method = \"tri2nb\")) #> Characteristics of weights list object: #> Neighbour list object: #> Number of regions: 77  #> Number of nonzero links: 428  #> Percentage nonzero weights: 7.218755  #> Average number of links: 5.558442  #>  #> Weights style: W  #> Weights constants summary: #>    n   nn S0      S1       S2 #> W 77 5929 77 28.0096 309.4083 plot(g, coords = spatialCoords(sfe)) # Set graph by name spatialGraph(sfe, \"graph1\", MARGIN = 2) <- g # Or equivalently colGraph(sfe, \"graph1\") <- g # Get graph by name g <- spatialGraph(sfe, \"graph1\", MARGIN = 2L) # Or equivalently g <- colGraph(sfe, \"graph1\") g #> Characteristics of weights list object: #> Neighbour list object: #> Number of regions: 77  #> Number of nonzero links: 428  #> Percentage nonzero weights: 7.218755  #> Average number of links: 5.558442  #>  #> Weights style: W  #> Weights constants summary: #>    n   nn S0      S1       S2 #> W 77 5929 77 28.0096 309.4083 colGraph(sfe, \"visium\") <- findVisiumGraph(sfe) plot(colGraph(sfe, \"visium\"), coords = spatialCoords(sfe)) colGraphs(sfe) #> $col #> Characteristics of weights list object: #> Neighbour list object: #> Number of regions: 77  #> Number of nonzero links: 428  #> Percentage nonzero weights: 7.218755  #> Average number of links: 5.558442  #>  #> Weights style: W  #> Weights constants summary: #>    n   nn S0      S1       S2 #> W 77 5929 77 28.0096 309.4083 colGraphNames(sfe) #> [1] \"graph1\" \"visium\""},{"path":"/articles/SFE.html","id":"multiple-samples","dir":"Articles","previous_headings":"Class structure","what":"Multiple samples","title":"Introduction to the SpatialFeatureExperiment class","text":"Thus far, example dataset used one sample. SpatialExperiment (SPE) object special column colData called sample_id, data multiple tissue sections can coexist SPE object joint dimension reduction clustering keeping spatial coordinates separate. ’s important keep spatial coordinates different tissue sections separate first, coordinates make sense within section, second, coordinates different sections can overlapping numeric values. SFE inherits SPE, geometries spatial graphs, sample_id even important. geometry graph getter setter functions sample_id argument, optional one sample present SFE object. argument mandatory multiple samples present, can character vector multiple samples “” samples. examples using getters setters multiple samples. Use sampleIDs function see names samples Sample IDs can also changed, changeSampleIDs() function, named vector whose names old names values new names.","code":"# Construct toy dataset with 2 samples sfe1 <- McKellarMuscleData(dataset = \"small\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache sfe2 <- McKellarMuscleData(dataset = \"small2\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache spotPoly(sfe2)$sample_id <- \"sample02\" (sfe_combined <- cbind(sfe1, sfe2)) #> class: SpatialFeatureExperiment  #> dim: 15123 149  #> metadata(0): #> assays(1): counts #> rownames(15123): ENSMUSG00000025902 ENSMUSG00000096126 ... #>   ENSMUSG00000064368 ENSMUSG00000064370 #> rowData names(6): Ensembl symbol ... vars cv2 #> colnames(149): AAATTACCTATCGATG AACATATCAACTGGTG ... TTCCTCGGACTAACCA #>   TTCTGACCGGGCTCAA #> colData names(12): barcode col ... prop_mito in_tissue #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : imageX imageY #> imgData names(1): sample_id #>  #> unit: full_res_image_pixels #> Geometries: #> colGeometries: spotPoly (POLYGON)  #> annotGeometries: tissueBoundary (GEOMETRY), myofiber_full (GEOMETRY), myofiber_simplified (GEOMETRY), nuclei (POLYGON), nuclei_centroid (POINT)  #>  #> Graphs: #> Vis5A:  #> sample02: sampleIDs(sfe_combined) #> [1] \"Vis5A\"    \"sample02\" # Only get the geometries for the second sample (spots2 <- colGeometry(sfe_combined, \"spotPoly\", sample_id = \"sample02\")) #> Simple feature collection with 72 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 6000 ymin: 7025.865 xmax: 8000 ymax: 9000 #> CRS:           NA #> First 10 features: #>                  sample_id                       geometry #> AACACACGCTCGCCGC  sample02 POLYGON ((6597.869 7842.575... #> AACCGCTAAGGGATGC  sample02 POLYGON ((6724.811 9000, 67... #> AACGCTGTTGCTGAAA  sample02 POLYGON ((6457.635 7118.991... #> AACGGACGTACGTATA  sample02 POLYGON ((6737.064 8083.571... #> AATAGAATCTGTTTCA  sample02 POLYGON ((7570.153 8564.368... #> ACAAATCGCACCGAAT  sample02 POLYGON ((8000 7997.001, 79... #> ACAATTGTGTCTCTTT  sample02 POLYGON ((6043.169 7843.77,... #> ACAGGCTTGCCCGACT  sample02 POLYGON ((7428.88 7358.195,... #> ACCAGTGCGGGAGACG  sample02 POLYGON ((6460.753 8566.757... #> ACCCTCCCTTGCTATT  sample02 POLYGON ((7847.503 8563.771... # Only set the geometries for the second sample # Leaving geometries of the first sample intact colGeometry(sfe_combined, \"spotPoly\", sample_id = \"sample02\") <- spots2 # Set graph only for the second sample colGraph(sfe_combined, \"foo\", sample_id = \"sample02\") <-    findSpatialNeighbors(sfe_combined, sample_id = \"sample02\") # Get graph only for the second sample colGraph(sfe_combined, \"foo\", sample_id = \"sample02\") #> Characteristics of weights list object: #> Neighbour list object: #> Number of regions: 72  #> Number of nonzero links: 406  #> Percentage nonzero weights: 7.83179  #> Average number of links: 5.638889  #>  #> Weights style: W  #> Weights constants summary: #>    n   nn S0       S1       S2 #> W 72 5184 72 25.82104 289.8299 # Set graph of the same name for both samples # The graphs are computed separately for each sample colGraphs(sfe_combined, sample_id = \"all\", name = \"visium\") <-    findVisiumGraph(sfe_combined, sample_id = \"all\") # Get multiple graphs of the same name colGraphs(sfe_combined, sample_id = \"all\", name = \"visium\") #> $Vis5A #> Characteristics of weights list object: #> Neighbour list object: #> Number of regions: 77  #> Number of nonzero links: 394  #> Percentage nonzero weights: 6.645303  #> Average number of links: 5.116883  #>  #> Weights style: W  #> Weights constants summary: #>    n   nn S0       S1       S2 #> W 77 5929 77 31.68056 311.7544 #>  #> $sample02 #> Characteristics of weights list object: #> Neighbour list object: #> Number of regions: 72  #> Number of nonzero links: 366  #> Percentage nonzero weights: 7.060185  #> Average number of links: 5.083333  #>  #> Weights style: W  #> Weights constants summary: #>    n   nn S0       S1       S2 #> W 72 5184 72 29.83889 291.5833 # Or just all graphs of the margin colGraphs(sfe_combined, sample_id = \"all\") #> $Vis5A #> $Vis5A$visium #> Characteristics of weights list object: #> Neighbour list object: #> Number of regions: 77  #> Number of nonzero links: 394  #> Percentage nonzero weights: 6.645303  #> Average number of links: 5.116883  #>  #> Weights style: W  #> Weights constants summary: #>    n   nn S0       S1       S2 #> W 77 5929 77 31.68056 311.7544 #>  #>  #> $sample02 #> $sample02$foo #> Characteristics of weights list object: #> Neighbour list object: #> Number of regions: 72  #> Number of nonzero links: 406  #> Percentage nonzero weights: 7.83179  #> Average number of links: 5.638889  #>  #> Weights style: W  #> Weights constants summary: #>    n   nn S0       S1       S2 #> W 72 5184 72 25.82104 289.8299 #>  #> $sample02$visium #> Characteristics of weights list object: #> Neighbour list object: #> Number of regions: 72  #> Number of nonzero links: 366  #> Percentage nonzero weights: 7.060185  #> Average number of links: 5.083333  #>  #> Weights style: W  #> Weights constants summary: #>    n   nn S0       S1       S2 #> W 72 5184 72 29.83889 291.5833 sfe_combined <- changeSampleIDs(sfe, replacement = c(Vis5A = \"foo\", sample02 = \"bar\")) sfe_combined #> class: SpatialFeatureExperiment  #> dim: 15123 77  #> metadata(0): #> assays(1): counts #> rownames(15123): ENSMUSG00000025902 ENSMUSG00000096126 ... #>   ENSMUSG00000064368 ENSMUSG00000064370 #> rowData names(6): Ensembl symbol ... vars cv2 #> colnames(77): AAATTACCTATCGATG AACATATCAACTGGTG ... TTCTTTGGTCGCGACG #>   TTGATGTGTAGTCCCG #> colData names(12): barcode col ... prop_mito in_tissue #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : imageX imageY #> imgData names(1): sample_id #>  #> unit: full_res_image_pixels #> Geometries: #> colGeometries: spotPoly (POLYGON), foobar (POLYGON)  #> annotGeometries: tissueBoundary (POLYGON), myofiber_full (GEOMETRY), myofiber_simplified (GEOMETRY), nuclei (POLYGON), nuclei_centroid (POINT)  #>  #> Graphs: #> foo: col: graph1, visium"},{"path":[]},{"path":"/articles/SFE.html","id":"from-scratch","dir":"Articles","previous_headings":"Object construction","what":"From scratch","title":"Introduction to the SpatialFeatureExperiment class","text":"SFE object can constructed scratch assay matrices metadata. toy example, dgCMatrix used, since SFE inherits SingleCellExperiment (SCE), types arrays supported SCE delayed arrays also work. sufficient create SPE object, SFE object, even though sf data frame constructed geometries. constructor behaves similarly SPE constructor. centroid coordinates Visium spots toy example can converted spot polygons spotDiameter argument. Spot diameter pixels full resolution image can found scalefactors_json.json file Space Ranger output. geometries spatial graphs can added calling constructor. Geometries can also supplied constructor.","code":"# Visium barcode location from Space Ranger data(\"visium_row_col\") coords1 <- visium_row_col[visium_row_col$col < 6 & visium_row_col$row < 6,] coords1$row <- coords1$row * sqrt(3)  # Random toy sparse matrix set.seed(29) col_inds <- sample(1:13, 13) row_inds <- sample(1:5, 13, replace = TRUE) values <- sample(1:5, 13, replace = TRUE) mat <- sparseMatrix(i = row_inds, j = col_inds, x = values) colnames(mat) <- coords1$barcode rownames(mat) <- sample(LETTERS, 5) sfe3 <- SpatialFeatureExperiment(list(counts = mat), colData = coords1,                                 spatialCoordsNames = c(\"col\", \"row\"),                                 spotDiameter = 0.7) # Convert regular data frame with coordinates to sf data frame cg <- df2sf(coords1[,c(\"col\", \"row\")], c(\"col\", \"row\"), spotDiameter = 0.7) rownames(cg) <- colnames(mat) sfe3 <- SpatialFeatureExperiment(list(counts = mat), colGeometries = list(foo = cg))"},{"path":"/articles/SFE.html","id":"space-ranger-output","dir":"Articles","previous_headings":"Object construction","what":"Space Ranger output","title":"Introduction to the SpatialFeatureExperiment class","text":"Space Ranger output can read similar manner SpatialExperiment; returned SFE object spotPoly column geometry spot polygons. filtered matrix read , column graph called visium also present, spatial neighborhood graph Visium spots tissue. graph computed spots read regardless whether tissue. Inside outs directory: also raw_feature_bc_matrix though toy example filtered matrix. Inside matrix directory: Inside spatial directory: Visium datasets files . barcode_fluorescence_intensity.csv file present datasets fluorescent imaging rather bright field H&E. barcode_fluorescence_intensity.csv file read colData. spatial_enrichment.csv file contains Moran’s p-values gene; read rowData. Instead pixels full resolution image, Visium data can read units microns. Full resolution pixels related microns spacing spots, known 100 microns. unit can set unit argument; now “micron” “full_res_image_pixel” supported Visium: unit SFE object can checked: present, merely string SFE doesn’t perform unit conversion. Unlike SpatialExperiment, SFE reads images terra::SpatRaster objects, images loaded memory unless necessary. Also, terra, larger image associated SFE object, fully loaded memory plotted; rather, ’s downsampled.","code":"dir <- system.file(\"extdata\", package = \"SpatialFeatureExperiment\") sample_ids <- c(\"sample01\", \"sample02\") samples <- file.path(dir, sample_ids) list.files(file.path(samples[1], \"outs\")) #> [1] \"filtered_feature_bc_matrix\" \"spatial\" list.files(file.path(samples[1], \"outs\", \"filtered_feature_bc_matrix\")) #> [1] \"barcodes.tsv\" \"features.tsv\" \"matrix.mtx\" list.files(file.path(samples[1], \"outs\", \"spatial\")) #> [1] \"aligned_fiducials.jpg\"              \"barcode_fluorescence_intensity.csv\" #> [3] \"detected_tissue_image.jpg\"          \"scalefactors_json.json\"             #> [5] \"spatial_enrichment.csv\"             \"tissue_hires_image.png\"             #> [7] \"tissue_lowres_image.png\"            \"tissue_positions.csv\" (sfe3 <- read10xVisiumSFE(samples, sample_id = sample_ids, type = \"sparse\",                            data = \"filtered\", images = \"hires\")) #> class: SpatialFeatureExperiment  #> dim: 5 25  #> metadata(0): #> assays(1): counts #> rownames(5): ENSG00000014257 ENSG00000142515 ENSG00000263639 #>   ENSG00000163810 ENSG00000149591 #> rowData names(14): symbol Feature.Type ... #>   Median.Normalized.Average.Counts_sample02 #>   Barcodes.Detected.per.Feature_sample02 #> colnames(25): GTGGCGTGCACCAGAG-1 GGTCCCATAACATAGA-1 ... #>   TGCAATTTGGGCACGG-1 ATGCCAATCGCTCTGC-1 #> colData names(10): in_tissue array_row ... channel3_mean channel3_stdev #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : pxl_col_in_fullres pxl_row_in_fullres #> imgData names(4): sample_id image_id data scaleFactor #>  #> unit: full_res_image_pixel #> Geometries: #> colGeometries: spotPoly (POLYGON)  #>  #> Graphs: #> sample01: col: visium #> sample02: col: visium (sfe3 <- read10xVisiumSFE(samples, sample_id = sample_ids, type = \"sparse\",                            data = \"filtered\", images = \"hires\", unit = \"micron\")) #> class: SpatialFeatureExperiment  #> dim: 5 25  #> metadata(0): #> assays(1): counts #> rownames(5): ENSG00000014257 ENSG00000142515 ENSG00000263639 #>   ENSG00000163810 ENSG00000149591 #> rowData names(14): symbol Feature.Type ... #>   Median.Normalized.Average.Counts_sample02 #>   Barcodes.Detected.per.Feature_sample02 #> colnames(25): GTGGCGTGCACCAGAG-1 GGTCCCATAACATAGA-1 ... #>   TGCAATTTGGGCACGG-1 ATGCCAATCGCTCTGC-1 #> colData names(10): in_tissue array_row ... channel3_mean channel3_stdev #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : pxl_col_in_fullres pxl_row_in_fullres #> imgData names(4): sample_id image_id data scaleFactor #>  #> unit: micron #> Geometries: #> colGeometries: spotPoly (POLYGON)  #>  #> Graphs: #> sample01: col: visium #> sample02: col: visium unit(sfe3) #> [1] \"micron\" class(imgRaster(getImg(sfe3))) #> [1] \"SpatRaster\" #> attr(,\"package\") #> [1] \"terra\""},{"path":"/articles/SFE.html","id":"vizgen-merfish-output","dir":"Articles","previous_headings":"Object construction","what":"Vizgen MERFISH output","title":"Introduction to the SpatialFeatureExperiment class","text":"commercialized MERFISH Vizgen standard output format, can read SFE readVizgen(). cell segmentation field view (FOV) separate HDF5 file MERFISH dataset can hundreds FOVs, strongly recommend reading MERFISH output server large number CPU cores. Alternatively, MERFISH datasets store cell segmentation parquet file, can easily read R. read toy dataset first FOV real dataset: unit always microns.","code":"dir_use <- VizgenOutput(file_path = \".\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache #> The downloaded files are in /home/runner/work/SpatialFeatureExperiment/SpatialFeatureExperiment/vignettes/vizgen_cellbound (sfe_mer <- readVizgen(dir_use, z = 3L, image = \"PolyT\")) #> >>> 1 `.parquet` files exist: #> /home/runner/work/SpatialFeatureExperiment/SpatialFeatureExperiment/vignettes/vizgen_cellbound/cell_boundaries.parquet #> >>> using -> /home/runner/work/SpatialFeatureExperiment/SpatialFeatureExperiment/vignettes/vizgen_cellbound/cell_boundaries.parquet #> >>> Cell segmentations are found in `.parquet` file #> Removing 35 cells with area less than 15 #> >>> filtering geometries to match 1023 cells with counts > 0 #> class: SpatialFeatureExperiment  #> dim: 88 1023  #> metadata(0): #> assays(1): counts #> rownames(88): CD4 TLL1 ... Blank-38 Blank-39 #> rowData names(0): #> colnames(1023): 112824700230101267 112824700230101269 ... #>   112824700330100848 112824700330100920 #> colData names(11): fov volume ... solidity sample_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : center_x center_y #> imgData names(4): sample_id image_id data scaleFactor #>  #> unit: micron #> Geometries: #> colGeometries: centroids (POINT), cellSeg (POLYGON)  #>  #> Graphs: #> sample01:"},{"path":"/articles/SFE.html","id":"coercion-from-spatialexperiment","dir":"Articles","previous_headings":"Object construction","what":"Coercion from SpatialExperiment","title":"Introduction to the SpatialFeatureExperiment class","text":"SPE objects can coerced SFE objects. column geometries spot diameter specified, column geometry called “centroids” created. coercion, column names must duplicate. images present SPE object, converted SpatRaster SPE object converted SFE. Plotting functions Voyager package relies SpatRaster plot image behind geometries.","code":"spe <- read10xVisium(samples, sample_ids, type = \"sparse\", data = \"filtered\",    images = \"hires\", load = FALSE) colnames(spe) <- make.unique(colnames(spe), sep = \"-\") rownames(spatialCoords(spe)) <- colnames(spe) (sfe3 <- toSpatialFeatureExperiment(spe)) #> class: SpatialFeatureExperiment  #> dim: 5 25  #> metadata(0): #> assays(1): counts #> rownames(5): ENSG00000014257 ENSG00000142515 ENSG00000263639 #>   ENSG00000163810 ENSG00000149591 #> rowData names(1): symbol #> colnames(25): GTGGCGTGCACCAGAG-1 GGTCCCATAACATAGA-1 ... #>   TGCAATTTGGGCACGG-1 ATGCCAATCGCTCTGC-1 #> colData names(4): in_tissue array_row array_col sample_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : pxl_col_in_fullres pxl_row_in_fullres #> imgData names(4): sample_id image_id data scaleFactor #>  #> unit: #> Geometries: #> colGeometries: centroids (POINT)  #>  #> Graphs: #> sample01:  #> sample02:"},{"path":[]},{"path":"/articles/SFE.html","id":"non-geometric","dir":"Articles","previous_headings":"Operations","what":"Non-geometric","title":"Introduction to the SpatialFeatureExperiment class","text":"SFE objects can concatenated cbind, done just now create toy example 2 samples. SFE object can also subsetted like matrix, like SCE object. complexity arises comes spatial graphs. drop argument SFE method [ determines spatial graphs. drop = TRUE, spatial graphs removed, since graphs nodes edges removed longer valid. drop = FALSE, default, spatial graphs reconstructed remaining nodes subsetting. Reconstruction work original graphs constructed findSpatialNeighbors findVisiumGraph package, records method parameters used construct graphs. reconstruction fails, waning issued graphs removed. images present, cropped bounding box remaining geometries subsetting.","code":"sfe_combined <- cbind(sfe1, sfe2) (sfe_subset <- sfe[1:10, 1:10, drop = TRUE]) #> Node indices in the graphs are no longer valid after subsetting. Dropping all row and col graphs. #> class: SpatialFeatureExperiment  #> dim: 10 10  #> metadata(0): #> assays(1): counts #> rownames(10): ENSMUSG00000025902 ENSMUSG00000096126 ... #>   ENSMUSG00000090031 ENSMUSG00000033740 #> rowData names(6): Ensembl symbol ... vars cv2 #> colnames(10): AAATTACCTATCGATG AACATATCAACTGGTG ... ACGAGTACGGATGCCC #>   ACGCTAGTGATACACT #> colData names(12): barcode col ... prop_mito in_tissue #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : imageX imageY #> imgData names(1): sample_id #>  #> unit: full_res_image_pixels #> Geometries: #> colGeometries: spotPoly (POLYGON), foobar (POLYGON)  #> annotGeometries: tissueBoundary (POLYGON), myofiber_full (GEOMETRY), myofiber_simplified (GEOMETRY), nuclei (POLYGON), nuclei_centroid (POINT)  #>  #> Graphs: #> Vis5A: # Will give warning because graph reconstruction fails sfe_subset <- sfe[1:10, 1:10]"},{"path":"/articles/SFE.html","id":"geometric","dir":"Articles","previous_headings":"Operations","what":"Geometric","title":"Introduction to the SpatialFeatureExperiment class","text":"Just like sf data frames, SFE objects can subsetted geometry predicate relating geometries. example, Visium spots read SFE object regardless whether tissue, tissueBoundary annotation geometry provided, tissue boundary geometry can used subset SFE object obtain new SFE object spots tissue. Loupe give tissue boundary polygon; polygon can obtained thresholding H&E image converting mask polygons OpenCV terra R package, manual annotation QuPath LabKit (latter needs converted polygon).","code":""},{"path":"/articles/SFE.html","id":"crop","dir":"Articles","previous_headings":"Operations > Geometric","what":"Crop","title":"Introduction to the SpatialFeatureExperiment class","text":"Use crop function directly get subsetted SFE object. images present, cropped bounding box cropped geometries.  Note large datasets many geometries, cropping can take run.  crop can also used conventional sense cropping, .e. specifying bounding box. colGeometryName used determine columns gene count matrix keep. geometries SFE object subsetted portions intersecting y bounding box kept. Since intersection operation can produce mixture geometry types, intersection two polygons producing polygons, points, lines, geometry types sf data frames subsetting may different originals. cropping done independently sample_id, sample_ids specified. , sample_id optional one sample SFE object. Geometry predicates operations can also performed return results without subsetting SFE object. example, one may want logical vector indicating whether Visium spot intersects tissue, numeric vector many nuclei Visium spot. get intersections Visium spot nuclei. , geometry predicates operations performed independently sample, sample_id argument optional one sample. Sometimes spatial coordinates different samples can take different values. values can made comparable moving tissues bottom left corner bounding box origin, facilitate plotting comparison across samples geom_sf facet_*. find bounding box geometries sample SFE object: move coordinates: original bounding box moving stored within SFE object, can read dimGeometry setters newly added geometries can coordinates moved well; behavior can turned optional argument translate = FALSE dimGeometry setters.","code":"# Before plot(st_geometry(tissueBoundary(sfe))) plot(spotPoly(sfe), col = \"gray\", add = TRUE) sfe_in_tissue <- crop(sfe, y = tissueBoundary(sfe), colGeometryName = \"spotPoly\") # After plot(st_geometry(tissueBoundary(sfe))) plot(spotPoly(sfe_in_tissue), col = \"gray\", add = TRUE) sfe_cropped <- crop(sfe, colGeometryName = \"spotPoly\", sample_id = \"Vis5A\",                     xmin = 5500, xmax = 6500, ymin = 13500, ymax = 14500) #> Warning: Specifying bounding box with arguments xmin, xmax, ymin, and ymax was #> deprecated in SpatialFeatureExperiment 1.6.0. #> ℹ Please use argument `y` to specify bounding box instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. # Get logical vector colData(sfe)$in_tissue <- annotPred(sfe, colGeometryName = \"spotPoly\",                                      annotGeometryName = \"tissueBoundary\",                                     sample_id = \"Vis5A\") # Get the number of nuclei per Visium spot colData(sfe)$n_nuclei <- annotNPred(sfe, \"spotPoly\", annotGeometryName = \"nuclei\") # Get geometries of intersections of Visium spots and myofibers spot_intersections <- annotOp(sfe, colGeometryName = \"spotPoly\",                                annotGeometryName = \"myofiber_simplified\") bbox(sfe, sample_id = \"Vis5A\") #>  xmin  ymin  xmax  ymax  #>  5000 13000  7000 15000 sfe_moved <- removeEmptySpace(sfe, sample_id = \"Vis5A\")"},{"path":"/articles/SFE.html","id":"transform","dir":"Articles","previous_headings":"Operations > Geometric","what":"Transform","title":"Introduction to the SpatialFeatureExperiment class","text":"images present, might need flipped align spots. SpatialExperiment implements methods rotate mirror images, SFE implements methods SFE objects transpose mirror images (terra::rotate() rotate image conventional sense – rather changes longitudes globe cut project 2D just like cutting world map Atlantic vs. Pacific). SpatialExperiment represents images S4 classes inheriting VirtualSpatialImage virtual class. compatible SPE, SFE uses SpatRasterImage, thin wrapper SpatRaster inheriting virtual class. Transformations can applied SpatRasterImage, well SFE objects sample image IDs specified. image transposed, flipped line going top left bottom right:   Arguments SFE method mirrorImg() differ SPE method, match terra::flip():   apply transformation SFE object, image specified sample image IDs transformed: far, transposeImg() mirrorImg() transform image. entire SFE object, including geometries images, can transformed .  Transforming entire SFE object can useful tissue orientation conventional direction orientation, rostral conventionally top caudal bottom coronal brain sections, anterior left posterior right saggital brain sections, make data conform convention.","code":"img <- getImg(sfe3, image_id = \"hires\") plot(imgRaster(img)) plot(transposeImg(img) |> imgRaster()) plot(mirrorImg(img, direction = \"vertical\") |> imgRaster()) plot(mirrorImg(img, direction = \"horizontal\") |> imgRaster()) sfe3 <- mirrorImg(sfe3, sample_id = \"sample01\", image_id = \"hires\") sfe_mirrored <- mirror(sfe_in_tissue) sfe_transposed <- transpose(sfe_in_tissue) par(mfrow = c(1, 3), mar = rep(1.5, 4)) plot(st_geometry(tissueBoundary(sfe_in_tissue))) plot(spotPoly(sfe_in_tissue), col = \"gray\", add = TRUE)  plot(st_geometry(tissueBoundary(sfe_mirrored))) plot(spotPoly(sfe_mirrored), col = \"gray\", add = TRUE)  plot(st_geometry(tissueBoundary(sfe_transposed))) plot(spotPoly(sfe_transposed), col = \"gray\", add = TRUE)"},{"path":"/articles/SFE.html","id":"limitations-and-future-directions","dir":"Articles","previous_headings":"","what":"Limitations and future directions","title":"Introduction to the SpatialFeatureExperiment class","text":"limitations current version SFE: integrating sf, designed vector spatial data (specifying coordinates points, lines, polygons vertices), SFE supports vector data geometries, raster (like image, value pixel) supported. Vector chosen, memory efficient way represent cell nuclei segmentation raster map. spatial graphs listw objects conversion necessary use well-established spatial statistical methods spdep, spatialreg, adespatial packages. However, igraph implements many graph analysis methods, conversion required use . Whether future versions SFE stick listw depends importance methods use spatial graphs igraph class. Simple Features support 3D spatiotemporal coordinates, geospatial resources SFE leverages sf 2D data. Spatial point process analysis spatstat package may relevant, analyzing spatial distribution nuclei transcript spots. spatstat predates sf decade, spatstat play nicely sf. However, since analyses nuclei transcript spot localization don’t center gene count matrix, whether spatstat analyses integrated SFE (centered gene count matrix) questionable. Geometries large datasets can get large. disk operations geometries considered. geospatial field already disk tools vector raster data. far, SFE tested data fit memory. Setting units length SFE object converting units. can make geometries different samples datasets comparable, helpful plotting scale bars plotting geometries.","code":""},{"path":"/articles/SFE.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Introduction to the SpatialFeatureExperiment class","text":"","code":"sessionInfo() #> R version 4.4.0 (2024-04-24) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] Matrix_1.7-0                   sf_1.0-16                      #>  [3] SFEData_1.6.0                  SpatialExperiment_1.14.0       #>  [5] SingleCellExperiment_1.26.0    SummarizedExperiment_1.34.0    #>  [7] Biobase_2.64.0                 GenomicRanges_1.56.0           #>  [9] GenomeInfoDb_1.40.0            IRanges_2.38.0                 #> [11] S4Vectors_0.42.0               BiocGenerics_0.50.0            #> [13] MatrixGenerics_1.16.0          matrixStats_1.3.0              #> [15] SpatialFeatureExperiment_1.6.1 BiocStyle_2.32.0               #>  #> loaded via a namespace (and not attached): #>   [1] jsonlite_1.8.8            wk_0.9.1                  #>   [3] magrittr_2.0.3            magick_2.8.3              #>   [5] rmarkdown_2.26            fs_1.6.4                  #>   [7] zlibbioc_1.50.0           ragg_1.3.1                #>   [9] vctrs_0.6.5               spdep_1.3-3               #>  [11] memoise_2.0.1             DelayedMatrixStats_1.26.0 #>  [13] RCurl_1.98-1.14           terra_1.7-71              #>  [15] htmltools_0.5.8.1         S4Arrays_1.4.0            #>  [17] AnnotationHub_3.12.0      curl_5.2.1                #>  [19] BiocNeighbors_1.22.0      Rhdf5lib_1.26.0           #>  [21] s2_1.1.6                  SparseArray_1.4.3         #>  [23] rhdf5_2.48.0              sass_0.4.9                #>  [25] spData_2.3.0              KernSmooth_2.23-22        #>  [27] bslib_0.7.0               htmlwidgets_1.6.4         #>  [29] desc_1.4.3                cachem_1.0.8              #>  [31] mime_0.12                 lifecycle_1.0.4           #>  [33] pkgconfig_2.0.3           R6_2.5.1                  #>  [35] fastmap_1.1.1             GenomeInfoDbData_1.2.12   #>  [37] digest_0.6.35             AnnotationDbi_1.66.0      #>  [39] dqrng_0.3.2               ExperimentHub_2.12.0      #>  [41] textshaping_0.3.7         RSQLite_2.3.6             #>  [43] beachmat_2.20.0           filelock_1.0.3            #>  [45] fansi_1.0.6               httr_1.4.7                #>  [47] abind_1.4-5               compiler_4.4.0            #>  [49] proxy_0.4-27              withr_3.0.0               #>  [51] bit64_4.0.5               tiff_0.1-12               #>  [53] BiocParallel_1.38.0       sfarrow_0.4.1             #>  [55] DBI_1.2.2                 highr_0.10                #>  [57] HDF5Array_1.32.0          R.utils_2.12.3            #>  [59] rappdirs_0.3.3            DelayedArray_0.30.1       #>  [61] rjson_0.2.21              classInt_0.4-10           #>  [63] tools_4.4.0               units_0.8-5               #>  [65] R.oo_1.26.0               glue_1.7.0                #>  [67] EBImage_4.46.0            rhdf5filters_1.16.0       #>  [69] grid_4.4.0                generics_0.1.3            #>  [71] R.methodsS3_1.8.2         class_7.3-22              #>  [73] data.table_1.15.4         sp_2.1-4                  #>  [75] utf8_1.2.4                XVector_0.44.0            #>  [77] BiocVersion_3.19.1        pillar_1.9.0              #>  [79] limma_3.60.0              dplyr_1.1.4               #>  [81] BiocFileCache_2.12.0      lattice_0.22-6            #>  [83] bit_4.0.5                 deldir_2.0-4              #>  [85] tidyselect_1.2.1          locfit_1.5-9.9            #>  [87] Biostrings_2.72.0         scuttle_1.14.0            #>  [89] sfheaders_0.4.4           knitr_1.46                #>  [91] bookdown_0.39             edgeR_4.2.0               #>  [93] xfun_0.43                 statmod_1.5.0             #>  [95] DropletUtils_1.24.0       UCSC.utils_1.0.0          #>  [97] fftwtools_0.9-11          yaml_2.3.8                #>  [99] boot_1.3-30               evaluate_0.23             #> [101] codetools_0.2-20          tibble_3.2.1              #> [103] BiocManager_1.30.23       cli_3.6.2                 #> [105] arrow_15.0.1              systemfonts_1.0.6         #> [107] jquerylib_0.1.4           Rcpp_1.0.12               #> [109] zeallot_0.1.0             dbplyr_2.5.0              #> [111] png_0.1-8                 parallel_4.4.0            #> [113] assertthat_0.2.1          pkgdown_2.0.9             #> [115] blob_1.2.4                jpeg_0.1-10               #> [117] sparseMatrixStats_1.16.0  bitops_1.0-7              #> [119] e1071_1.7-14              purrr_1.0.2               #> [121] crayon_1.5.2              rlang_1.1.3               #> [123] KEGGREST_1.44.0"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lambda Moses. Author, maintainer. Alik Huseynov. Author. Lior Pachter. Author, thesis advisor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Moses L, Einarsson PH, Jackson K, Luebbert L, Booeshaghi S, Antonsson S, Melsted P, Pachter L (2023). “Voyager: exploratory single-cell genomics data analysis geospatial statistics.” bioRxiv. doi:10.1101/2023.07.20.549945.","code":"@Article{,   title = {Voyager: exploratory single-cell genomics data analysis with geospatial statistics},   author = {Lambda Moses and Pétur Helgi Einarsson and Kayla Jackson and Laura Luebbert and Sina Booeshaghi and Sindri Antonsson and Páll Melsted and Lior Pachter},   journal = {bioRxiv},   year = {2023},   doi = {10.1101/2023.07.20.549945}, }"},{"path":[]},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Integrating SpatialExperiment with Simple Features in sf","text":"package available Bioconductor version 3.16 . can installed Documentation can accessed website.","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))   install.packages(\"BiocManager\") BiocManager::install(\"SpatialFeatureExperiment\")"},{"path":"/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Integrating SpatialExperiment with Simple Features in sf","text":"SpatialFeatureExperiment (SFE) new S4 class built top SpatialExperiment (SPE). SpatialFeatureExperiment incorporates geometries geometry operations sf package. Examples supported geometries Visium spots represented polygons corresponding size, cell nuclei segmentation polygons, tissue boundary polygons, pathologist annotation histological regions, transcript spots genes. Using sf, SpatialFeatureExperiment leverages well-established optimized C++ libraries underlying sf geometry operations, including algorithms determining whether geometries intersect, finding intersection geometries, buffering geometries margins, etc. schematic SFE object shown :  list SFE features extend SPE object: colGeometries sf data frames associated entities correspond columns gene count matrix, Visium spots cells. geometries sf data frames can Visium spot centroids, Visium spot polygons, datasets single cell resolution, cell nuclei segmentations. Multiple colGeometries can stored SFE object, one cell segmentation another nuclei segmentation. can non-spatial, attribute columns colGeometry rather colData, sf class allows users specify attributes relate geometries, “constant”, “aggregate”, “identity”. See agr argument st_sf documentation. colGraphs spatial neighborhood graphs cells spots. graphs class listw (spdep package), colPairs SingleCellExperiment used conversion necessary use numerous spatial dependency functions spdep, Moran’s , Geary’s C, Getis-Ord Gi*, LOSH, etc. Conversion also needed classical spatial statistics packages spatialreg adespatial. rowGeometries similar colGeometries, support entities correspond rows gene count matrix, genes. potential use case store transcript spots gene smFISH situ sequencing based datasets. rowGraphs similar colGraphs. potential use case may spatial colocalization transcripts different genes. annotGeometries sf data frames associated dataset directly gene count matrix, tissue boundaries, histological regions, cell nuclei segmentation Visium datasets, etc. geometries stored object facilitate plotting using sf operations find number nuclei Visium spot histological regions Visium spot intersects. Unlike colGeometries rowGeometries, number rows sf data frames annotGeometries constrained dimension gene count matrix can arbitrary. annotGraphs similar colGraphs rowGraphs, entities directly associated gene count matrix, spatial neighborhood graphs nuclei Visium datasets, objects like myofibers. graphs relevant spdep analyses attributes geometries spatial autocorrelation morphological metrics myofibers nuclei. geometry operations sf, attributes results analyses attributes (e.g. spatial regions defined attributes) may related back gene expression. localResults similar reducedDims SingleCellExperiment, stores results univariate bivariate local spatial analysis results, localmoran, Getis-Ord Gi*, local spatial heteroscedasticity (LOSH). Unlike reducedDims, type results (type type analysis Getis-Ord Gi*), feature (e.g. gene) pair features analysis performed results. local spatial analyses can also performed attributes colGeometries annotGeometries addition gene expression colData. Results multivariate spatial analysis MULTISPATI PCA can stored reducedDims.","code":""},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Integrating SpatialExperiment with Simple Features in sf","text":"Voyager: exploratory single-cell genomics data analysis geospatial statistics. Lambda Moses, Pétur Helgi Einarsson, Kayla Jackson, Laura Luebbert, . Sina Booeshaghi, Sindri Antonsson, Páll Melsted, Lior Pachter bioRxiv 2023.07.20.549945; doi: https://doi.org/10.1101/2023.07.20.549945","code":""},{"path":"/reference/BioFormatsImage-getters.html","id":null,"dir":"Reference","previous_headings":"","what":"Other BioFormatsImage getters — BioFormatsImage-getters","title":"Other BioFormatsImage getters — BioFormatsImage-getters","text":"isFULL indicates extent full extent image. origin gets x-y coordinates origin image, .e. smallest possible x-y coordinate values within full image.","code":""},{"path":"/reference/BioFormatsImage-getters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Other BioFormatsImage getters — BioFormatsImage-getters","text":"","code":"# S4 method for BioFormatsImage isFull(x)  # S4 method for BioFormatsImage origin(x)  # S4 method for BioFormatsImage transformation(x)"},{"path":"/reference/BioFormatsImage-getters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Other BioFormatsImage getters — BioFormatsImage-getters","text":"x BioFormatsImage object.","code":""},{"path":"/reference/BioFormatsImage-getters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Other BioFormatsImage getters — BioFormatsImage-getters","text":"isFull: Logical scalar indicating whether extent   full extent. origin: Numeric vector length 2.   transformation, list.","code":""},{"path":"/reference/BioFormatsImage.html","id":null,"dir":"Reference","previous_headings":"","what":"On disk representation of BioFormats images in SFE object — BioFormatsImage","title":"On disk representation of BioFormats images in SFE object — BioFormatsImage","text":"`r lifecycle::badge(\"experimental\")` present, BioFormatsImage designed OME-TIFF Xenium tested formats can read BioFormats. image loaded memory, , BioFormatsImage object converted ExtImage loaded image class inherits Image. ExtImage class thin wrapper inheriting VirtualSpatialImage compatible SpatialExperiment SFE derived. class might drastically change matures, say accommodate formats supported BioFormats store transformation matrix rather loading image memory upon transform.","code":""},{"path":"/reference/BioFormatsImage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"On disk representation of BioFormats images in SFE object — BioFormatsImage","text":"","code":"BioFormatsImage(   path,   ext = NULL,   isFull = TRUE,   origin = c(0, 0),   transformation = list() )"},{"path":"/reference/BioFormatsImage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"On disk representation of BioFormats images in SFE object — BioFormatsImage","text":"path Path OME-TIFF image file. ext Numeric vector names \"xmin\", \"xmax\", \"ymin\", \"ymax\" microns indicating spatial extent covered image. NULL, extent inferred metadata, physical pixel size number pixels. isFull Logical, extent specified ext full extent. ext = NULL inferred metadata isFull = TRUE set internally. origin Origin whole image x-y plane, defaults c(0,0). shifted image translated. xmin xmax. example, extent part whole image whole image can spatially translated, origin needed determine part whole image extent corresponds . transformation Named list specifying affine transformation. list can names \"name\" named parameter transformation, e.g. list(name = \"mirror\", direction = \"vertical\"), \"rotate\" degrees = 90 (clockwise), \"scale\" factor = 2. list can also names \"M\" 2x2 linear transformation matrix xy plane \"v\" translation vector length 2 specify general affine transformation. object BioFormatsImage object.","code":""},{"path":"/reference/BioFormatsImage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"On disk representation of BioFormats images in SFE object — BioFormatsImage","text":"BioFormatsImage object.","code":""},{"path":"/reference/BioFormatsImage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"On disk representation of BioFormats images in SFE object — BioFormatsImage","text":"Spatial extent inferred OME-TIFF metadata specified. Physical pixel size metadata used make extent micron space. physical pixel size absent metadata, extent pixel space, might mean image align geometries often geometry coordinates microns, warning issued case. Affine transformations can specified transformation argument, either name directly specifying matrix. transformations specified name always preserve center image. named transformations chained, name parameter converted matrix translation vector second time transformation specified. subsequent transformation happens restore image original place, transformation specifications removed.","code":""},{"path":[]},{"path":"/reference/ExtImage.html","id":null,"dir":"Reference","previous_headings":"","what":"Use the EBImage Image class in SFE objects — ExtImage","title":"Use the EBImage Image class in SFE objects — ExtImage","text":"thin wrapper around Image class EBImage package inherits VirtualSpatialImage compatible SpatialExperiment SFE inherits. ext field added specify spatial extent image microns facilitate geometric operations SFE object (including images) plotting Voyager.","code":""},{"path":"/reference/ExtImage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use the EBImage Image class in SFE objects — ExtImage","text":"","code":"ExtImage(img, ext = NULL)"},{"path":"/reference/ExtImage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use the EBImage Image class in SFE objects — ExtImage","text":"img Image object anything inherits Image AnnotatedImage RBioFormats. ext Numeric vector names \"xmin\", \"xmax\", \"ymin\", \"ymax\" microns indicating spatial extent covered image. NULL, extent inferred metadata, physical pixel size number pixels. object ExtImage object.","code":""},{"path":"/reference/ExtImage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use the EBImage Image class in SFE objects — ExtImage","text":"ExtImage object.","code":""},{"path":"/reference/SFE-image.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for handling image-related data — SFE-image","title":"Methods for handling image-related data — SFE-image","text":"Generics functions defined SpatialExperiment, except transposeImg. SFE methods cater new image-related classes SFE. SPE method getImg, rmvImg, imgRaster need modified SFE hence implemented , simply re-exported.","code":""},{"path":"/reference/SFE-image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for handling image-related data — SFE-image","text":"","code":"# S4 method for SpatialFeatureExperiment addImg(   x,   imageSource,   sample_id = 1L,   image_id,   extent = NULL,   scale_fct = 1,   file = deprecated() )  # S4 method for SpatialFeatureExperiment transposeImg(   x,   sample_id = 1L,   image_id = NULL,   maxcell = 1e+07,   filename = \"\" )  # S4 method for SpatialFeatureExperiment mirrorImg(   x,   sample_id = 1L,   image_id = NULL,   direction = \"vertical\",   maxcell = 1e+07,   filename = \"\" )  # S4 method for SpatialFeatureExperiment rotateImg(x, sample_id = 1L, image_id = NULL, degrees, maxcell = 1e+07)  # S4 method for SpatialFeatureExperiment translateImg(x, sample_id = 1L, image_id = NULL, v)  # S4 method for SpatialFeatureExperiment scaleImg(x, sample_id = 1L, image_id = NULL, factor)  # S4 method for SpatialFeatureExperiment affineImg(x, sample_id = 1L, image_id = NULL, M, v)"},{"path":"/reference/SFE-image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for handling image-related data — SFE-image","text":"x SFE object. imageSource character string specifying image file name  (.png, .jpg .tif) URL source image sample_id sample image associated . Use sampleIDs get sample IDs present SFE object. image_id Image ID, \"lowres\" \"hires\" Visium data \"DAPI\" \"PolyT\" Vizgen MERFISH data. extent numeric vector length 4 names set xmin, ymin, xmax, ymax, specifying extent image. scale_fct Scale factor -- multiply pixel coordinates full resolution image scale factor yield pixel coordinates different resolution. extent takes precedence scale_fct. file File read image. maxcell Max number pixels load SpatRasterImage memory. default 1e7 chosen approximate number pixels medium resolution image resolution = 4L Xenium OME-TIFF make different methods function consistent. filename character. Output filename direction character. (partially) match \"vertical\" flip rows, \"horizontal\" flip columns degrees many degrees rotate. Positive number means clockwise negative number means counterclockwise. v numeric vector length 2 specifying vector xy plane translate SFE object. factor Numeric, scaling factor. M 2x2 numeric matrix linear transformation xy plane.","code":""},{"path":"/reference/SFE-image.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Methods for handling image-related data — SFE-image","text":"Method transposeImg, mirrorImg, rotateImg perform method images within SFE object specified sample_id image_id. images loaded memory, rotateImg load SpatRasterImage memory image operations except translate load BioFormatsImage memory.","code":""},{"path":"/reference/SFE-image.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Methods for handling image-related data — SFE-image","text":"image already GeoTIFF file already extent, extent associated file honored extent scale_fct arguments ignored. Transposing image just like transposing matrix. flipped line going top left bottom right.","code":""},{"path":[]},{"path":"/reference/SFE-image.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods for handling image-related data — SFE-image","text":"","code":"library(SFEData) sfe <- McKellarMuscleData(\"small\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> downloading 1 resources #> retrieving 1 resource #> loading from cache img_path <- system.file(file.path(\"extdata\", \"sample01\", \"outs\", \"spatial\", \"tissue_lowres_image.png\"), package = \"SpatialFeatureExperiment\") sfe <- addImg(sfe, img_path, sample_id = \"Vis5A\", image_id = \"lowres\", scale_fct = 0.023) img <- getImg(sfe) # SpatRasterImage method img_t <- transposeImg(img) # SFE method sfe <- transposeImg(sfe, sample_id = \"Vis5A\", image_id = \"lowres\")"},{"path":"/reference/SFE-transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Affine transfortaion of SFE object in histological space — SFE-transform","title":"Affine transfortaion of SFE object in histological space — SFE-transform","text":"functions perform affine transformations SFE objects, including geometries images. transformation performed sample whole. differs functions mirrorImg mirrorImg rotateImg transform image center center image . contrast, center transformation center bounding box entire sample, including images.","code":""},{"path":"/reference/SFE-transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Affine transfortaion of SFE object in histological space — SFE-transform","text":"","code":"transpose(sfe, sample_id = \"all\", maxcell = NULL, filename = \"\")  mirror(   sfe,   sample_id = \"all\",   direction = c(\"vertical\", \"horizontal\"),   maxcell = NULL,   filename = \"\" )  rotate(sfe, sample_id = \"all\", degrees, maxcell = 1e+07)  translate(sfe, sample_id = \"all\", v)  scale(sfe, sample_id = \"all\", factor)  affine(sfe, sample_id = \"all\", M, v, maxcell = 1e+07)"},{"path":"/reference/SFE-transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Affine transfortaion of SFE object in histological space — SFE-transform","text":"sfe SFE object. sample_id Sample(s) transform. maxcell Rotating SpatRasterImage convert ExtImage, loading image memory. argument specifies maximum number pixels image loaded memory. image sampled approximately number pixels. filename character. Output filename direction character. (partially) match \"vertical\" flip rows, \"horizontal\" flip columns degrees many degrees rotate. Positive number means clockwise negative number means counterclockwise. v Vector spatially translate SFE object. factor Numeric, scaling factor. M 2x2 numeric matrix linear transformation xy plane.","code":""},{"path":"/reference/SFE-transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Affine transfortaion of SFE object in histological space — SFE-transform","text":"SFE object sample(s) transformed.","code":""},{"path":"/reference/SFE-transform.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Affine transfortaion of SFE object in histological space — SFE-transform","text":"images loaded memory, rotateImg load SpatRasterImage memory image operations except translate load BioFormatsImage memory.","code":""},{"path":"/reference/SFE-transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Affine transfortaion of SFE object in histological space — SFE-transform","text":"","code":"library(SFEData) sfe <- McKellarMuscleData(\"small\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache sfe2 <- transpose(sfe) sfe3 <- mirror(sfe)"},{"path":"/reference/SpatRasterImage.html","id":null,"dir":"Reference","previous_headings":"","what":"SpatRaster representation of images in SFE objects — SpatRasterImage","title":"SpatRaster representation of images in SFE objects — SpatRasterImage","text":"SpatialFeatureExperiment Voyager package work images differently SpatialExperiment. SFE Voyager's, plotting functions SFE objects, images can read rast represented SpatRaster, image entirely loaded memory unless necessary. Plotting load large image memory; rather image downsampled downsampled version plotted. SpatRasterImage object (Bioc 3.19 SFE version 1.6 ) SpatRaster object also inheriting VirtualSpatialImage required SpatialExperiment.","code":""},{"path":"/reference/SpatRasterImage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SpatRaster representation of images in SFE objects — SpatRasterImage","text":"","code":"SpatRasterImage(img)  # S4 method for SpatRasterImage show(object)"},{"path":"/reference/SpatRasterImage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SpatRaster representation of images in SFE objects — SpatRasterImage","text":"img SpatRaster PackedSpatRaster object. object SpatRasterImage object.","code":""},{"path":"/reference/SpatRasterImage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SpatRaster representation of images in SFE objects — SpatRasterImage","text":"SpatRasterImage object.","code":""},{"path":"/reference/SpatRasterImage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SpatRaster representation of images in SFE objects — SpatRasterImage","text":"","code":"# Example code"},{"path":"/reference/SpatialFeatureExperiment-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The SpatialFeatureExperiment class — SpatialFeatureExperiment-class","title":"The SpatialFeatureExperiment class — SpatialFeatureExperiment-class","text":"class inherits SpatialExperiment (SPE) class, turn inherits SingleCellExperiment (SCE). SpatialFeatureExperiment stores geometries spots cells sf objects form columns DataFrame turn column int_colData DataFrame underlying SCE object, just like reducedDim SCE. Geometries tissue outline, pathologist annotations, objects (e.g. nuclei segmentation Visium dataset) stored sf objects named list called annotGeometries int_metadata.","code":""},{"path":"/reference/SpatialFeatureExperiment-coercion.html","id":null,"dir":"Reference","previous_headings":"","what":"SpatialFeatureExperiment coercion methods — SpatialFeatureExperiment-coercion","title":"SpatialFeatureExperiment coercion methods — SpatialFeatureExperiment-coercion","text":"SpatialFeatureExperiment class inherits SpatialExperiment, turn inherits SingleCellExperiment. SpatialExperiment object geometries colGeometries int_colData, rowGeometries int_elementMetadata, annotGeometries int_metadata can directly converted SpatialFeatureExperiment (spe, \"SpatialFeatureExperiment\"). SpatialExperiment object without geometries can also converted; coordinates spatialCoords field used make POINT geometries named \"centroids\" add colGeometries. geometries can also supplied separately using toSpatialFeatureExperiment. Images converted SpatRaster.","code":""},{"path":"/reference/SpatialFeatureExperiment-coercion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SpatialFeatureExperiment coercion methods — SpatialFeatureExperiment-coercion","text":"","code":"# S4 method for SpatialExperiment toSpatialFeatureExperiment(   x,   colGeometries = NULL,   rowGeometries = NULL,   annotGeometries = NULL,   spatialCoordsNames = c(\"x\", \"y\"),   annotGeometryType = \"POLYGON\",   spatialGraphs = NULL,   spotDiameter = NA,   unit = NULL,   BPPARAM = deprecated() )  # S4 method for SingleCellExperiment toSpatialFeatureExperiment(   x,   sample_id = \"sample01\",   spatialCoordsNames = c(\"x\", \"y\"),   spatialCoords = NULL,   colGeometries = NULL,   rowGeometries = NULL,   annotGeometries = NULL,   annotGeometryType = \"POLYGON\",   spatialGraphs = NULL,   spotDiameter = NA,   scaleFactors = 1,   imageSources = NULL,   image_id = NULL,   loadImage = TRUE,   imgData = NULL,   unit = NULL,   BPPARAM = deprecated() )  # S4 method for Seurat toSpatialFeatureExperiment(   x,   add_molecules = TRUE,   flip = c(\"geometry\", \"image\", \"none\"),   image_scalefactors = c(\"lowres\", \"hires\"),   unit = NULL,   BPPARAM = SerialParam() )"},{"path":"/reference/SpatialFeatureExperiment-coercion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SpatialFeatureExperiment coercion methods — SpatialFeatureExperiment-coercion","text":"x SpatialExperiment Seurat object coerced SpatialFeatureExperiment object. colGeometries Geometry entities correspond columns gene count matrix, cells Visium spots. must named list one following: sf data frame geometry column specifies geometry entities. ordinary data frame specifying centroids Column names coordinates specified spatialCoordsNames argument. Visium ST, addition centroid coordinate data frame, spot diameter unit coordinates can specified spotDiamter argument. ordinary data frame specifying polygons Also use spatialCoordsNames. additional column \"ID\" specify vertices belong polygon. coordinates list columns. Rather, data frame look like passed ggplot2::geom_polygon. holes, must also column \"subID\" differentiates outer polygon holes. cases, data frame specify number geometries number columns gene count matrix. column \"barcode\" present, matched column names gene count matrix. Otherwise, geometries assumed order columns gene count matrix. geometries specified ordinary data frame, converted sf internally. Named list data frames entity can multiple geometries, whole cell nuclei segmentations. geometries assumed POINTs centroids POLYGONs segmentations. polygons specified ordinary data frame, anything fewer 3 vertices removed. anything POINTs, attributes geometry ignored. rowGeometries Geometry associated genes features, correspond rows gene count matrix. annotGeometries Geometry entities correspond columns rows gene count matrix, tissue boundary pathologist annotations histological regions, nuclei segmentation Visium dataset. Also named list colGeometries. ordinary data frame may specify POINTs, POLYGONs, LINESTRINGs, MULTI versions. data frame can specify one type geometry. MULTI versions, must column \"group\" identify MULTI geometry. spatialCoordsNames character vector column names *Geometries arguments ordinary data frames, identify columns ordinary data frames specify spatial coordinates. colGeometries specified, argument behave SpatialExperiment, colGeometries given precedence provided. annotGeometryType Character vector specifying geometry type element list annotGeometry specified. element vector must one POINT, LINESTRING, POLYGON, MULTIPOINT, MULTILINESTRING, MULTIPOLYGON. Must either length 1 (elements list) length list. Ignored corresponding element sf object. spatialGraphs named list listw objects (see spdep) spatial neighborhood graphs. spotDiameter Spot diameter technologies arrays spots fixed diameter per slide, Visium, ST, DBiT-seq, slide-seq. diameter must unit coordinates *Geometry arguments. Ignored geometries POINT MULTIPOINT. unit # Default unit \"micron\". However Visium one can choose \"micron\" \"full_res_image_pixel\". BPPARAM Deprecated coercing SpatialExperiment, used coercing Seurat object. sample_id character sample identifier, matches sample_id imgData. sample_id also stored new column colData, already present. Default = sample01. spatialCoords numeric matrix containing columns spatial coordinates, SpatialExperiment. coordinates centroids entities represented columns gene count matrix. colGeometries also specified, given priority warning issued. Otherwise, sf representation centroids stored colGeometry called centroids. scaleFactors Optional scale factors associated image(s). can provided numeric value, numeric vector, list, file path JSON file 10x Genomics Visium platform. 10x Genomics Visium, correct scale factor automatically selected depending resolution image imageSources. Default = 1. imageSources Optional file path(s) URL(s) one image sources. image_id Optional character vector (length imageSources) containing unique image identifiers. loadImage Logical indicating whether load image memory. Default = FALSE. imgData Optional DataFrame containing image data. Alternatively, can built arguments imageSources image_id (see Details). add_molecules Logical, whether add transcripts coordinates object. flip flip image, geometry coordinates, none. image origin top left geometry origin bottom left, one needs flipped match. one already flipped, use \"none\". image flipped GeoTIFF. image_scalefactors # character, choose \"lowres\" \"hires\". 10X Visium, image scaling factors `scalefactors_json.json` file.","code":""},{"path":"/reference/SpatialFeatureExperiment-coercion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SpatialFeatureExperiment coercion methods — SpatialFeatureExperiment-coercion","text":"SpatialFeatureExperiment object","code":""},{"path":"/reference/SpatialFeatureExperiment-coercion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SpatialFeatureExperiment coercion methods — SpatialFeatureExperiment-coercion","text":"","code":"library(SpatialExperiment) #> Loading required package: SingleCellExperiment #> Loading required package: SummarizedExperiment #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: ‘MatrixGenerics’ #> The following objects are masked from ‘package:matrixStats’: #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, setdiff, table, tapply, #>     union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: ‘S4Vectors’ #> The following object is masked from ‘package:utils’: #>  #>     findMatches #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: ‘Biobase’ #> The following object is masked from ‘package:MatrixGenerics’: #>  #>     rowMedians #> The following objects are masked from ‘package:matrixStats’: #>  #>     anyMissing, rowMedians example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/home/runner/work/_temp/Library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> class: SpatialExperiment  #> dim: 50 99  #> metadata(0): #> assays(1): counts #> rownames(50): ENSMUSG00000051951 ENSMUSG00000089699 ... #>   ENSMUSG00000005886 ENSMUSG00000101476 #> rowData names(1): symbol #> colnames(99): AAACAACGAATAGTTC-1 AAACAAGTATCTCCCA-1 ... #>   AAAGTCGACCCTCAGT-1 AAAGTGCCATCAATTA-1 #> colData names(4): in_tissue array_row array_col sample_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : pxl_col_in_fullres pxl_row_in_fullres #> imgData names(4): sample_id image_id data scaleFactor #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> class: SpatialExperiment  #> dim: 50 99  #> metadata(0): #> assays(1): counts #> rownames(50): ENSMUSG00000051951 ENSMUSG00000089699 ... #>   ENSMUSG00000005886 ENSMUSG00000101476 #> rowData names(1): symbol #> colnames(99): AAACAACGAATAGTTC-1 AAACAAGTATCTCCCA-1 ... #>   AAAGTCGACCCTCAGT-1 AAAGTGCCATCAATTA-1 #> colData names(4): in_tissue array_row array_col sample_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : pxl_col_in_fullres pxl_row_in_fullres #> imgData names(4): sample_id image_id data scaleFactor #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 # There can't be duplicate barcodes colnames(spe) <- make.unique(colnames(spe), sep = \"-\") rownames(spatialCoords(spe)) <- colnames(spe) sfe <- toSpatialFeatureExperiment(spe) # For coercing Seurat to SFE see this -> ./vignettes/seurat_sfe_coerce.Rmd"},{"path":"/reference/SpatialFeatureExperiment-subset.html","id":null,"dir":"Reference","previous_headings":"","what":"Subsetting SpatialFeatureExperiment objects — SpatialFeatureExperiment-subset","title":"Subsetting SpatialFeatureExperiment objects — SpatialFeatureExperiment-subset","text":"method SFE reconstructs spatial graphs SFE object subsetted listw objects encodes nodes indices longer valid subsetting nodes longer present.","code":""},{"path":"/reference/SpatialFeatureExperiment-subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subsetting SpatialFeatureExperiment objects — SpatialFeatureExperiment-subset","text":"","code":"# S4 method for SpatialFeatureExperiment,ANY,ANY,ANY [(x, i, j, ..., drop = FALSE)"},{"path":"/reference/SpatialFeatureExperiment-subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subsetting SpatialFeatureExperiment objects — SpatialFeatureExperiment-subset","text":"x SpatialFeatureExperiment object. Row indices subsetting. j column indices subsetting. ... Passed SingleCellExperiment method [. drop Logical. FALSE, warning issued node indices graphs longer valid row col graphs affected subsetting dropped. present, works wrapper functions package take SFE objects records info required reconstruct graphs. argument ignored SummarizedExperiment","code":""},{"path":"/reference/SpatialFeatureExperiment-subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subsetting SpatialFeatureExperiment objects — SpatialFeatureExperiment-subset","text":"subsetted SpatialFeatureExperiment object.","code":""},{"path":"/reference/SpatialFeatureExperiment-subset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subsetting SpatialFeatureExperiment objects — SpatialFeatureExperiment-subset","text":"","code":"# Just like subsetting matrices and SingleCellExperiment library(SFEData) sfe <- McKellarMuscleData(dataset = \"small\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache sfe_subset <- sfe[seq_len(10), seq_len(10), drop = TRUE] #> Node indices in the graphs are no longer valid after subsetting. Dropping all row and col graphs. # Gives warning as graph reconstruction fails # \\donttest{ sfe_subset <- sfe[seq_len(10), seq_len(10)] # }"},{"path":"/reference/SpatialFeatureExperiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor of SpatialFeatureExperiment object — SpatialFeatureExperiment","title":"Constructor of SpatialFeatureExperiment object — SpatialFeatureExperiment","text":"Create SpatialFeatureExperiment object.","code":""},{"path":"/reference/SpatialFeatureExperiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor of SpatialFeatureExperiment object — SpatialFeatureExperiment","text":"","code":"SpatialFeatureExperiment(   assays,   colData = DataFrame(),   rowData = NULL,   sample_id = \"sample01\",   spatialCoordsNames = c(\"x\", \"y\"),   spatialCoords = NULL,   colGeometries = NULL,   rowGeometries = NULL,   annotGeometries = NULL,   spotDiameter = NA_real_,   annotGeometryType = \"POLYGON\",   spatialGraphs = NULL,   unit = c(\"full_res_image_pixel\", \"micron\"),   BPPARAM = deprecated(),   ... )"},{"path":"/reference/SpatialFeatureExperiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor of SpatialFeatureExperiment object — SpatialFeatureExperiment","text":"assays list SimpleList matrix-like elements,     matrix-like object (e.g. ordinary matrix, data frame,     DataFrame object S4Vectors package,     sparseMatrix derivative Matrix package,     DelayedMatrix object DelayedArray     package, etc...).     elements list must dimensions, dimension     names (present) must consistent across elements row     names rowRanges colData. colData optional DataFrame describing     samples. Row names, present, become column names     RangedSummarizedExperiment. rowData DataFrame object describing      rows. Row names, present, become row names     SummarizedExperiment object. number rows     DataFrame must equal number rows     matrices assays. sample_id character sample identifier, matches sample_id imgData. sample_id also stored new column colData, already present. Default = sample01. spatialCoordsNames character vector column names *Geometries arguments ordinary data frames, identify columns ordinary data frames specify spatial coordinates. colGeometries specified, argument behave SpatialExperiment, colGeometries given precedence provided. spatialCoords numeric matrix containing columns spatial coordinates, SpatialExperiment. coordinates centroids entities represented columns gene count matrix. colGeometries also specified, given priority warning issued. Otherwise, sf representation centroids stored colGeometry called centroids. colGeometries Geometry entities correspond columns gene count matrix, cells Visium spots. must named list one following: sf data frame geometry column specifies geometry entities. ordinary data frame specifying centroids Column names coordinates specified spatialCoordsNames argument. Visium ST, addition centroid coordinate data frame, spot diameter unit coordinates can specified spotDiamter argument. ordinary data frame specifying polygons Also use spatialCoordsNames. additional column \"ID\" specify vertices belong polygon. coordinates list columns. Rather, data frame look like passed ggplot2::geom_polygon. holes, must also column \"subID\" differentiates outer polygon holes. cases, data frame specify number geometries number columns gene count matrix. column \"barcode\" present, matched column names gene count matrix. Otherwise, geometries assumed order columns gene count matrix. geometries specified ordinary data frame, converted sf internally. Named list data frames entity can multiple geometries, whole cell nuclei segmentations. geometries assumed POINTs centroids POLYGONs segmentations. polygons specified ordinary data frame, anything fewer 3 vertices removed. anything POINTs, attributes geometry ignored. rowGeometries Geometry associated genes features, correspond rows gene count matrix. annotGeometries Geometry entities correspond columns rows gene count matrix, tissue boundary pathologist annotations histological regions, nuclei segmentation Visium dataset. Also named list colGeometries. ordinary data frame may specify POINTs, POLYGONs, LINESTRINGs, MULTI versions. data frame can specify one type geometry. MULTI versions, must column \"group\" identify MULTI geometry. spotDiameter Spot diameter technologies arrays spots fixed diameter per slide, Visium, ST, DBiT-seq, slide-seq. diameter must unit coordinates *Geometry arguments. Ignored geometries POINT MULTIPOINT. annotGeometryType Character vector specifying geometry type element list annotGeometry specified. element vector must one POINT, LINESTRING, POLYGON, MULTIPOINT, MULTILINESTRING, MULTIPOLYGON. Must either length 1 (elements list) length list. Ignored corresponding element sf object. spatialGraphs named list listw objects (see spdep) spatial neighborhood graphs. unit Unit coordinates , either microns pixels full resolution image. BPPARAM Deprecated. `sfheaders` package used df2sf much better performance. ... Additional arguments passed SpatialExperiment SingleCellExperiment constructors.","code":""},{"path":"/reference/SpatialFeatureExperiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor of SpatialFeatureExperiment object — SpatialFeatureExperiment","text":"SFE object. neither colGeometries spotDiameter specified, colGeometry called \"centroids\" made,   essentially spatial coordinates sf POINTs.  spotDiameter specified, colGeometries,   spatial coordinates buffered half diameter get spots   desired diameter, resulting colGeometry called   \"spotPoly\", convenience getter setter,  spotPoly.","code":""},{"path":"/reference/SpatialFeatureExperiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor of SpatialFeatureExperiment object — SpatialFeatureExperiment","text":"","code":"library(Matrix) #>  #> Attaching package: ‘Matrix’ #> The following object is masked from ‘package:S4Vectors’: #>  #>     expand data(\"visium_row_col\") coords1 <- visium_row_col[visium_row_col$col < 6 & visium_row_col$row < 6, ] coords1$row <- coords1$row * sqrt(3) cg <- df2sf(coords1[, c(\"col\", \"row\")], c(\"col\", \"row\"), spotDiameter = 0.7)  set.seed(29) col_inds <- sample(seq_len(13), 13) row_inds <- sample(seq_len(5), 13, replace = TRUE) values <- sample(seq_len(5), 13, replace = TRUE) mat <- sparseMatrix(i = row_inds, j = col_inds, x = values) colnames(mat) <- coords1$barcode rownames(mat) <- sample(LETTERS, 5) rownames(cg) <- colnames(mat)  sfe <- SpatialFeatureExperiment(list(counts = mat),     colData = coords1,     spatialCoordsNames = c(\"col\", \"row\"),     spotDiameter = 0.7 ) sfe2 <- SpatialFeatureExperiment(list(counts = mat),     colGeometries = list(foo = cg) )"},{"path":"/reference/addVisiumSpotPoly.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Visium spot polygons to colGeometry — addVisiumSpotPoly","title":"Add Visium spot polygons to colGeometry — addVisiumSpotPoly","text":"adding spot polygons SFE objects converted SPE.","code":""},{"path":"/reference/addVisiumSpotPoly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Visium spot polygons to colGeometry — addVisiumSpotPoly","text":"","code":"addVisiumSpotPoly(x, spotDiameter)"},{"path":"/reference/addVisiumSpotPoly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Visium spot polygons to colGeometry — addVisiumSpotPoly","text":"x SpatialFeatureExperiment object. spotDiameter Spot diameter technologies arrays spots fixed diameter per slide, Visium, ST, DBiT-seq, slide-seq. diameter must unit coordinates *Geometry arguments. Ignored geometries POINT MULTIPOINT.","code":""},{"path":"/reference/addVisiumSpotPoly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Visium spot polygons to colGeometry — addVisiumSpotPoly","text":"SFE object new colGeometry called spotPoly, polygons spots.","code":""},{"path":"/reference/addVisiumSpotPoly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Visium spot polygons to colGeometry — addVisiumSpotPoly","text":"","code":"library(SpatialExperiment) example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/home/runner/work/_temp/Library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> class: SpatialExperiment  #> dim: 50 99  #> metadata(0): #> assays(1): counts #> rownames(50): ENSMUSG00000051951 ENSMUSG00000089699 ... #>   ENSMUSG00000005886 ENSMUSG00000101476 #> rowData names(1): symbol #> colnames(99): AAACAACGAATAGTTC-1 AAACAAGTATCTCCCA-1 ... #>   AAAGTCGACCCTCAGT-1 AAAGTGCCATCAATTA-1 #> colData names(4): in_tissue array_row array_col sample_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : pxl_col_in_fullres pxl_row_in_fullres #> imgData names(4): sample_id image_id data scaleFactor #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> class: SpatialExperiment  #> dim: 50 99  #> metadata(0): #> assays(1): counts #> rownames(50): ENSMUSG00000051951 ENSMUSG00000089699 ... #>   ENSMUSG00000005886 ENSMUSG00000101476 #> rowData names(1): symbol #> colnames(99): AAACAACGAATAGTTC-1 AAACAAGTATCTCCCA-1 ... #>   AAAGTCGACCCTCAGT-1 AAAGTGCCATCAATTA-1 #> colData names(4): in_tissue array_row array_col sample_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : pxl_col_in_fullres pxl_row_in_fullres #> imgData names(4): sample_id image_id data scaleFactor #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 # There can't be suplicate barcodes colnames(spe) <- make.unique(colnames(spe), sep = \"-\") rownames(spatialCoords(spe)) <- colnames(spe) sfe <- toSpatialFeatureExperiment(spe) # A hypothetical spot diameter; check the scalefactors_json.json file for # actual diameter in pixels in full resolution image. sfe <- addVisiumSpotPoly(sfe, spotDiameter = 80)"},{"path":"/reference/affineImg.html","id":null,"dir":"Reference","previous_headings":"","what":"Affine transformation of images — affineImg","title":"Affine transformation of images — affineImg","text":"function performs affine transformation images, matrix translation vector.","code":""},{"path":"/reference/affineImg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Affine transformation of images — affineImg","text":"","code":"# S4 method for SpatRasterImage affineImg(x, M, v, maxcell = 1e+07, ...)  # S4 method for BioFormatsImage affineImg(x, M, v, ...)  # S4 method for ExtImage affineImg(x, M, v, ...)"},{"path":"/reference/affineImg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Affine transformation of images — affineImg","text":"x object class *Image implemented package. M 2x2 numeric matrix linear transformation xy plane. v numeric vector length 2 translation xy plane. maxcell Max number pixels load SpatRasterImage memory. default 1e7 chosen approximate number pixels medium resolution image resolution = 4L Xenium OME-TIFF make different methods function consistent. ... Ignored. different methods can passed lapply method SFE objects. methods extra arguments.","code":""},{"path":"/reference/affineImg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Affine transformation of images — affineImg","text":"SpatRasterImage converted ExtImage. Otherwise *Image object class. BioFormatsImage, transformation info stored applied image loaded memory ExtImage.","code":""},{"path":[]},{"path":"/reference/aggBboxes.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate bounding boxes — aggBboxes","title":"Aggregate bounding boxes — aggBboxes","text":"find bounding box multiple bounding boxes.","code":""},{"path":"/reference/aggBboxes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate bounding boxes — aggBboxes","text":"","code":"aggBboxes(bboxes)"},{"path":"/reference/aggBboxes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate bounding boxes — aggBboxes","text":"bboxes Either matrix 4 rows whose columns different bounding boxes, row names \"xmin\", \"xmax\", \"ymin\", \"ymax\" order, list bounding boxes named numeric vectors.","code":""},{"path":"/reference/aggBboxes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate bounding boxes — aggBboxes","text":"named numeric vector total bounding box.","code":""},{"path":"/reference/aggBboxes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate bounding boxes — aggBboxes","text":"","code":"bboxes <- list(c(xmin = 5, xmax = 10, ymin = 2, ymax = 20), c(xmin = 8, xmax = 18, ymin = 0, ymax = 15)) bbox_all <- aggBboxes(bboxes)"},{"path":"/reference/annotGeometries.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotation geometry methods — annotGeometries","title":"Annotation geometry methods — annotGeometries","text":"\"Annotation geometry\" refers Simple Feature (sf) geometries associated rows (features, genes) columns (cells spots) gene count matrix SpatialFeatureExperiment object. can number rows sf data frame specifying geometry. Examples geometries tissue boundaries, pathologist annotation histological regions, objects characterized columns gene count matrix (e.g. nuclei segmentation Visium dataset columns Visium spots). page documents getters setters annotation geometries. Internally, annotation geometries stored int_metadata.","code":""},{"path":"/reference/annotGeometries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotation geometry methods — annotGeometries","text":"","code":"# S4 method for SpatialFeatureExperiment annotGeometries(x)  # S4 method for SpatialFeatureExperiment annotGeometries(x, translate = TRUE, ...) <- value  # S4 method for SpatialFeatureExperiment annotGeometryNames(x)  # S4 method for SpatialFeatureExperiment,character annotGeometryNames(x) <- value  # S4 method for SpatialFeatureExperiment annotGeometry(x, type = 1L, sample_id = NULL)  # S4 method for SpatialFeatureExperiment annotGeometry(x, type = 1L, sample_id = NULL, translate = TRUE, ...) <- value  tissueBoundary(x, sample_id = 1L)  tissueBoundary(x, sample_id = 1L, translate = TRUE, ...) <- value"},{"path":"/reference/annotGeometries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotation geometry methods — annotGeometries","text":"x SpatialFeatureExperiment object. translate Logical. used removeEmptySpace run SFE object. case, argument indicates whether new value assigned geometry coordinates prior removal empty space translated match new coordinates removing empty space. Default TRUE. ... spatialCoordsNames, spotDiameter, geometryType passed df2sf. Defaults df2sf. dimGeometries<- : geometryType can character vector geometry type data frame list length list data frames specify different types geometries. value Value set. annotGeometry, must sf data frame, ordinary data frame can converted sf data frame (see df2sf). annotGeometries, must list sf ordinary data frames. must column sample_id indicate sample geometries , sample_id must also appear colData. type integer specifying index string specifying name *Geometry query replace. missing, first item *Geometries returned replaced. sample_id Sample ID get set geometries.","code":""},{"path":"/reference/annotGeometries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotation geometry methods — annotGeometries","text":"Getters multiple geometries return named list. Getters   names return character vector names. Getters single geometries   return sf data frame. Setters return SFE object.","code":""},{"path":"/reference/annotGeometries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Annotation geometry methods — annotGeometries","text":"Wrapper getter setter special geometry: tisseuBoundary Boundary tissue interest, including holes. usually geometry type MULTIPOLYGON, though geometries annotGeometries can type supported sf.","code":""},{"path":"/reference/annotGeometries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotation geometry methods — annotGeometries","text":"","code":"# Example dataset library(SFEData) sfe_small <- McKellarMuscleData(dataset = \"small\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache  # Get all annotation geometries, returning a named list annotGeometries(sfe_small) #> $tissueBoundary #> Simple feature collection with 1 feature and 2 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 5094 ymin: 13000 xmax: 7000 ymax: 14969 #> CRS:           NA #>   ID                       geometry sample_id #> 7  7 POLYGON ((5094 13000, 5095 ...     Vis5A #>  #> $myofiber_full #> Simple feature collection with 195 features and 2 fields #> Geometry type: GEOMETRY #> Dimension:     XY #> Bounding box:  xmin: 5072 ymin: 13000 xmax: 7000 ymax: 14956 #> CRS:           NA #> First 10 features: #>      lyr.1                       geometry sample_id #> 1018  1018 POLYGON ((6620 14908, 6628 ...     Vis5A #> 1021  1021 POLYGON ((6476 13416, 6492 ...     Vis5A #> 1024  1024 GEOMETRYCOLLECTION (LINESTR...     Vis5A #> 1041  1041 POLYGON ((6024 14592, 6044 ...     Vis5A #> 1052  1052 POLYGON ((5948 14664, 5976 ...     Vis5A #> 1058  1058 POLYGON ((6184 13916, 6192 ...     Vis5A #> 1131  1131 POLYGON ((6560 14040, 6572 ...     Vis5A #> 1149  1149 POLYGON ((6948 14792, 6956 ...     Vis5A #> 1164  1164 GEOMETRYCOLLECTION (LINESTR...     Vis5A #> 1198  1198 POLYGON ((7000 14088, 6988 ...     Vis5A #>  #> $myofiber_simplified #> Simple feature collection with 195 features and 34 fields #> Geometry type: GEOMETRY #> Dimension:     XY #> Bounding box:  xmin: 5075.2 ymin: 13000 xmax: 7000 ymax: 14956 #> CRS:           NA #> First 10 features: #>      lyr.1   area perimeter eccentricity       theta  sine_theta convexity #> 1018  1018 1254.5  144.3111    0.7556634 -1.43691705 -0.99105155 0.9439428 #> 1021  1021 1294.0  154.6381    0.8373427  1.22884082  0.94210073 0.8970537 #> 1024  1024 1071.0  137.5860    0.7616274 -0.56418348 -0.53472602 0.8876917 #> 1041  1041 1117.5  143.9801    0.4602999  0.42465952  0.41201057 0.8830502 #> 1052  1052  702.5  108.8714    0.5921893  0.05022803  0.05020692 0.9117456 #> 1058  1058  748.0  130.9098    0.7333168  1.48690171  0.99648291 0.7877830 #> 1131  1131  921.0  123.1718    0.4938581  0.08929549  0.08917687 0.9109792 #> 1149  1149 1350.0  155.2466    0.8064659  1.45088782  0.99281958 0.9127789 #> 1164  1164 1361.0  160.5250    0.5199006 -1.43088381 -0.99022820 0.8668790 #> 1198  1198 1359.5  147.4640    0.7536808 -1.55943349 -0.99993544 0.9493715 #>        h.asm.s1 h.con.s1  h.cor.s1  h.var.s1  h.idm.s1 h.sav.s1 h.sva.s1 #> 1018 0.04569305 8.823872 0.6175303 12.535387 0.4677583 55.93346 3043.557 #> 1021 0.06676416 2.971181 0.3866366  3.422040 0.5244005 56.36618 3086.581 #> 1024 0.04072365 5.629854 0.5509958  7.269267 0.4544623 53.67451 2789.833 #> 1041 0.03789957 7.404033 0.6839055 12.711739 0.4583396 54.40403 2876.513 #> 1052 0.05586671 5.919123 0.5754451  7.970974 0.5074887 55.10506 2951.151 #> 1058 0.06039099 4.356942 0.6920377  8.073825 0.5117327 56.48317 3107.141 #> 1131 0.05073276 4.830403 0.6019241  7.067188 0.4921981 56.95746 3152.026 #> 1149 0.05089796 5.356243 0.7815510 13.259709 0.4837150 55.53230 3015.888 #> 1164 0.05300985 4.562002 0.6782312  8.088945 0.4944515 55.49526 2993.993 #> 1198 0.04410018 5.977108 0.5276979  7.327632 0.4641892 55.45479 2981.551 #>       h.sen.s1 h.ent.s1 h.dva.s1  h.den.s1   h.f12.s1  h.f13.s1   h.asm.s2 #> 1018 1.1042774 1.702237 8.823872 0.7768725 0.08287254 0.3699324 0.04843700 #> 1021 0.8696623 1.375543 2.971181 0.6110582 0.03857801 0.2295028 0.07371797 #> 1024 1.0400578 1.655837 5.629854 0.7268132 0.05447687 0.2975921 0.04179965 #> 1041 1.1398830 1.746922 7.404033 0.7499876 0.10322951 0.4161292 0.04108058 #> 1052 0.9831099 1.515003 5.919123 0.6924231 0.06404495 0.3088334 0.05065103 #> 1058 0.9565778 1.475250 4.356942 0.6600786 0.09843866 0.3763597 0.06705178 #> 1131 0.9879345 1.523556 4.830403 0.6717902 0.06896841 0.3211188 0.04611804 #> 1149 1.0143578 1.572877 5.356243 0.6964793 0.09582218 0.3826318 0.05029586 #> 1164 0.9957274 1.548318 4.562002 0.6773656 0.08123645 0.3505345 0.05579443 #> 1198 1.0285324 1.638017 5.977108 0.7321981 0.06439037 0.3213296 0.04349491 #>       h.con.s2  h.cor.s2  h.var.s2  h.idm.s2 h.sav.s2 h.sva.s2  h.sen.s2 #> 1018 13.956859 0.3591553 11.889424 0.4635219 56.08628 3053.482 1.0964515 #> 1021  4.374046 0.1620524  3.609976 0.5356106 56.44869 3096.160 0.8600733 #> 1024  7.633299 0.2524210  6.105346 0.4313602 53.81512 2802.705 0.9954560 #> 1041  9.969246 0.4542513 10.133550 0.4460751 54.74504 2904.280 1.1007054 #> 1052  8.709208 0.3130783  7.339302 0.4888779 55.15509 2949.709 0.9973425 #> 1058  5.844347 0.4605127  6.416574 0.5263770 56.37004 3088.457 0.9386880 #> 1131  6.231405 0.3613120  5.878286 0.4723205 57.09327 3162.454 0.9757856 #> 1149  9.113317 0.6047476 12.528476 0.4714423 55.47891 3003.012 1.0178087 #> 1164  5.682109 0.4433550  6.103889 0.4904749 55.70128 3011.191 0.9613706 #> 1198  8.985191 0.2719318  7.170570 0.4435528 55.39049 2970.667 1.0308582 #>      h.ent.s2  h.dva.s2  h.den.s2   h.f12.s2  h.f13.s2 #> 1018 1.648689 13.956859 0.8096457 0.07724304 0.3522316 #> 1021 1.347868  4.374046 0.6222874 0.02909852 0.1975308 #> 1024 1.592808  7.633299 0.7431862 0.03346647 0.2297161 #> 1041 1.688399  9.969246 0.7857339 0.09662418 0.3969055 #> 1052 1.501903  8.709208 0.6950301 0.05405809 0.2829466 #> 1058 1.423354  5.844347 0.6871059 0.07950027 0.3334109 #> 1131 1.503655  6.231405 0.7083074 0.05990168 0.2977786 #> 1149 1.553251  9.113317 0.7371693 0.08636114 0.3616774 #> 1164 1.496062  5.682109 0.6900179 0.06215469 0.3025037 #> 1198 1.645228  8.985191 0.7904764 0.05511628 0.2983840 #>                            geometry sample_id #> 1018 POLYGON ((6620 14908, 6628 ...     Vis5A #> 1021 POLYGON ((6476 13416, 6492 ...     Vis5A #> 1024 POLYGON ((6980 13492, 6992 ...     Vis5A #> 1041 POLYGON ((6024 14592, 6044 ...     Vis5A #> 1052 POLYGON ((6004 14652, 6016 ...     Vis5A #> 1058 POLYGON ((6184 13916, 6192 ...     Vis5A #> 1131 POLYGON ((6560 14040, 6592 ...     Vis5A #> 1149 POLYGON ((6948 14792, 6956 ...     Vis5A #> 1164 POLYGON ((7000 13152, 6984 ...     Vis5A #> 1198 POLYGON ((7000 14088, 6988 ...     Vis5A #>  #> $nuclei #> Simple feature collection with 442 features and 9 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 5097.075 ymin: 13000 xmax: 7000 ymax: 14948.44 #> CRS:           NA #> First 10 features: #>          ID index     area roundness eccentricity aspect_ratio     angle #> 10084 10084 10084 238.4863  1.085386    0.7328259     1.469689 139.27116 #> 10175 10175 10175 493.0881  1.067844    0.6938556     1.388669 148.65620 #> 10181 10181 10181 177.5525  1.061164    0.6553132     1.323877 122.36570 #> 10189 10189 10189 323.6471  1.153316    0.8276987     1.781982  45.38620 #> 10246 10246 10246 416.4098  1.072617    0.7292323     1.461420  97.54036 #> 10316 10316 10316 269.0076  1.067543    0.7193451     1.439568  11.75157 #> 10426 10426 10426 375.6754  1.028084    0.1588077     1.012854  16.43842 #> 10432 10432 10432 225.9670  1.038551    0.4909133     1.147831 162.73535 #> 10440 10440 10440 310.9183  1.052642    0.6360212     1.295888  72.76263 #> 10486 10486 10486 329.1423  1.084983    0.7364244     1.478153 159.36537 #>       convexity                       geometry sample_id #> 10084 0.9920712 POLYGON ((5776.277 14250, 5...     Vis5A #> 10175 0.9944043 POLYGON ((6920.169 14910, 6...     Vis5A #> 10181 0.9914434 POLYGON ((6414.457 14760, 6...     Vis5A #> 10189 0.9869685 POLYGON ((6396.188 13995, 6...     Vis5A #> 10246 0.9953556 POLYGON ((5838.198 14742, 5...     Vis5A #> 10316 0.9958743 POLYGON ((5407.794 13000, 5...     Vis5A #> 10426 0.9945204 POLYGON ((6014.04 14542, 60...     Vis5A #> 10432 0.9912810 POLYGON ((6308.317 14453, 6...     Vis5A #> 10440 0.9936670 POLYGON ((6145.372 13068, 6...     Vis5A #> 10486 0.9916191 POLYGON ((6091.856 13626, 6...     Vis5A #>  #> $nuclei_centroid #> Simple feature collection with 434 features and 8 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 5103 ymin: 13004 xmax: 7000 ymax: 14942 #> CRS:           NA #> First 10 features: #>       index     area roundness eccentricity aspect_ratio     angle convexity #> 10085 10084 238.4863  1.085386    0.7328259     1.469689 139.27116 0.9920712 #> 10176 10175 493.0881  1.067844    0.6938556     1.388669 148.65620 0.9944043 #> 10182 10181 177.5525  1.061164    0.6553132     1.323877 122.36570 0.9914434 #> 10190 10189 323.6471  1.153316    0.8276987     1.781982  45.38620 0.9869685 #> 10247 10246 416.4098  1.072617    0.7292323     1.461420  97.54036 0.9953556 #> 10317 10316 269.0076  1.067543    0.7193451     1.439568  11.75157 0.9958743 #> 10427 10426 375.6754  1.028084    0.1588077     1.012854  16.43842 0.9945204 #> 10433 10432 225.9670  1.038551    0.4909133     1.147831 162.73535 0.9912810 #> 10441 10440 310.9183  1.052642    0.6360212     1.295888  72.76263 0.9936670 #> 10487 10486 329.1423  1.084983    0.7364244     1.478153 159.36537 0.9916191 #>                 geometry sample_id #> 10085 POINT (5768 14250)     Vis5A #> 10176 POINT (6909 14910)     Vis5A #> 10182 POINT (6408 14760)     Vis5A #> 10190 POINT (6387 13995)     Vis5A #> 10247 POINT (5830 14742)     Vis5A #> 10317 POINT (5408 13008)     Vis5A #> 10427 POINT (6004 14542)     Vis5A #> 10433 POINT (6299 14453)     Vis5A #> 10441 POINT (6137 13068)     Vis5A #> 10487 POINT (6081 13626)     Vis5A #>   # Set all annotation geometries, in a named list toy <- readRDS(system.file(\"extdata/sfe_toy.rds\",     package = \"SpatialFeatureExperiment\" )) ag <- readRDS(system.file(\"extdata/ag.rds\",     package = \"SpatialFeatureExperiment\" )) annotGeometries(toy) <- list(hull = ag)  # Get names of annotation geometries annotGeometryNames(sfe_small) #> [1] \"tissueBoundary\"      \"myofiber_full\"       \"myofiber_simplified\" #> [4] \"nuclei\"              \"nuclei_centroid\"      # Set names of annotation geometries annotGeometryNames(toy) <- \"foo\"  # Get a specific annotation geometry by name # sample_id is optional when there is only one sample present nuclei <- annotGeometry(sfe_small, type = \"nuclei\", sample_id = \"Vis5A\")  # Get a specific annotation geometry by index tb <- annotGeometry(sfe_small, type = 1L)  # Set a specific annotation geometry annotGeometry(sfe_small, type = \"nuclei2\") <- nuclei  # Special convenience function for tissue boundaries # Getter tb <- tissueBoundary(sfe_small, sample_id = \"Vis5A\") # Setter tissueBoundary(sfe_small, sample_id = \"Vis5A\") <- tb"},{"path":"/reference/annotOp.html","id":null,"dir":"Reference","previous_headings":"","what":"Binary operations for geometry of each cell/spot and annotation — annotOp","title":"Binary operations for geometry of each cell/spot and annotation — annotOp","text":"Just like annotPred, performs operation rather predicate. example, function return geometry intersections Visium spot tissue boundary sample, rather whether Visium spot intersects tissue boundary. case one cell/spot gets broken multiple geometries, union geometries taken, cell/spot get one geometry.","code":""},{"path":"/reference/annotOp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binary operations for geometry of each cell/spot and annotation — annotOp","text":"","code":"annotOp(   sfe,   colGeometryName = 1L,   annotGeometryName = 1L,   sample_id = \"all\",   op = st_intersection )"},{"path":"/reference/annotOp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binary operations for geometry of each cell/spot and annotation — annotOp","text":"sfe SFE object. colGeometryName Name column geometry predicate. annotGeometryName Name annotation geometry predicate. sample_id sample(s) operate . Can \"\" indicate samples. op binary operation function geometries. Defaults st_intersection.","code":""},{"path":"/reference/annotOp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Binary operations for geometry of each cell/spot and annotation — annotOp","text":"sf data frame geometry column containing geometries corresponding column names sfe row names. guarantee returned geometries valid preserve geometry class (e.g. intersection polygons result line point).","code":""},{"path":[]},{"path":"/reference/annotOp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Binary operations for geometry of each cell/spot and annotation — annotOp","text":"","code":"library(SFEData) sfe <- McKellarMuscleData(\"small\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache # Get the intersection of myofibers with each Visium spot myofibers_on_spots <- annotOp(sfe, \"spotPoly\",     annotGeometryName = \"myofiber_simplified\" )"},{"path":"/reference/annotPred.html","id":null,"dir":"Reference","previous_headings":"","what":"Binary predicates for geometry of each cell/spot and annotation — annotPred","title":"Binary predicates for geometry of each cell/spot and annotation — annotPred","text":"function finds binary predicates geometry cell/spot (.e. colGeometry) annotation geometry sample. example, whether Visium spot intersects tissue boundary sample.","code":""},{"path":"/reference/annotPred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binary predicates for geometry of each cell/spot and annotation — annotPred","text":"","code":"annotPred(   sfe,   colGeometryName = 1L,   annotGeometryName = 1L,   sample_id = \"all\",   pred = st_intersects )  annotNPred(   sfe,   colGeometryName = 1L,   annotGeometryName = 1L,   sample_id = \"all\",   pred = st_intersects )"},{"path":"/reference/annotPred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binary predicates for geometry of each cell/spot and annotation — annotPred","text":"sfe SFE object. colGeometryName Name column geometry predicate. annotGeometryName Name annotation geometry predicate. sample_id sample(s) operate . Can \"\" indicate samples. pred Predicate function use, defaults st_intersects.","code":""},{"path":"/reference/annotPred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Binary predicates for geometry of each cell/spot and annotation — annotPred","text":"annotPred, logical vector length   number columns sample(s) interest, barcodes (  corresponding column names sfe) names. annotNPred,   numeric vector length number columns sample(s)   interest barcodes names, indicating number geometries   annotGeometry interest returns TRUE predicate   geometry colGeometry interest.","code":""},{"path":[]},{"path":"/reference/annotPred.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Binary predicates for geometry of each cell/spot and annotation — annotPred","text":"","code":"library(SFEData) sfe <- McKellarMuscleData(\"small\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache # Whether each spot is in tissue in_tissue <- annotPred(sfe, \"spotPoly\", annotGeometryName = \"tissueBoundary\") # How many nuclei are there in each Visium spot n_nuclei <- annotNPred(sfe, \"spotPoly\", annotGeometryName = \"nuclei\")"},{"path":"/reference/annotSummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize attributes of an annotGeometry for each cell/spot — annotSummary","title":"Summarize attributes of an annotGeometry for each cell/spot — annotSummary","text":"SFE objects, annotation geometries correspond dimensions gene count matrix, generally one one mapping annotation geometries cells/spots. However, may interesting relate attributes annotation geometries cell/spots attributes can related gene expression. function summarizes attributes annotGeometry cell/spot geometric predicate colGeometry.","code":""},{"path":"/reference/annotSummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize attributes of an annotGeometry for each cell/spot — annotSummary","text":"","code":"annotSummary(   sfe,   colGeometryName = 1L,   annotGeometryName = 1L,   annotColNames = 1L,   sample_id = \"all\",   pred = st_intersects,   summary_fun = mean )"},{"path":"/reference/annotSummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize attributes of an annotGeometry for each cell/spot — annotSummary","text":"sfe SFE object. colGeometryName Name column geometry predicate. annotGeometryName Name annotation geometry predicate. annotColNames Character, column names annotGeometry interest, indicate columns summarize. Columns absent annotGeometry removed. column \"geometry\" \"barcode\". sample_id sample(s) operate . Can \"\" indicate samples. pred Predicate function use, defaults st_intersects. summary_fun Function summary, defaults mean.","code":""},{"path":"/reference/annotSummary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize attributes of an annotGeometry for each cell/spot — annotSummary","text":"data frame whose row names relevant column names  sfe, column summary column   specified annotColName.","code":""},{"path":"/reference/annotSummary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize attributes of an annotGeometry for each cell/spot — annotSummary","text":"","code":"library(SFEData) sfe <- McKellarMuscleData(\"small\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache s <- annotSummary(sfe, \"spotPoly\", \"myofiber_simplified\",     annotColNames = c(\"area\", \"convexity\") )"},{"path":"/reference/bbox-SpatialFeatureExperiment-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Find bounding box of SFE objects — bbox,SpatialFeatureExperiment-method","title":"Find bounding box of SFE objects — bbox,SpatialFeatureExperiment-method","text":"Find bounding box union colGeometries annotGeometries sample SFE object. can used remove empty space tissue geometries one corner origin samples comparable coordinates.","code":""},{"path":"/reference/bbox-SpatialFeatureExperiment-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find bounding box of SFE objects — bbox,SpatialFeatureExperiment-method","text":"","code":"# S4 method for SpatialFeatureExperiment bbox(sfe, sample_id = \"all\", include_images = FALSE, include_row = TRUE)"},{"path":"/reference/bbox-SpatialFeatureExperiment-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find bounding box of SFE objects — bbox,SpatialFeatureExperiment-method","text":"sfe SpatialFeatureExperiment object. sample_id Sample(s) whose bounding box(es) find. bounding box union colGeometries annotGeometries associated sample. include_images Logical, whether bounding boxes include image extents. Defaults FALSE often image lot empty space surrounding tissue. include_row Logical, whether bounding boxes include rowGeometries, defaults TRUE.","code":""},{"path":"/reference/bbox-SpatialFeatureExperiment-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find bounding box of SFE objects — bbox,SpatialFeatureExperiment-method","text":"one sample, named vector names xmin,  ymin, xmax, ymax specifying bounding box.   multiple samples, matrix whose columns samples whose rows   delineate bounding box.","code":""},{"path":"/reference/bbox-SpatialFeatureExperiment-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find bounding box of SFE objects — bbox,SpatialFeatureExperiment-method","text":"","code":"library(SFEData) sfe <- McKellarMuscleData(\"small\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache bbox(sfe, sample_id = \"Vis5A\") #>  xmin  ymin  xmax  ymax  #>  5000 13000  7000 15000"},{"path":"/reference/bbox_center.html","id":null,"dir":"Reference","previous_headings":"","what":"Find center of bounding box — bbox_center","title":"Find center of bounding box — bbox_center","text":"Get x-y coordinates center bounding box","code":""},{"path":"/reference/bbox_center.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find center of bounding box — bbox_center","text":"","code":"bbox_center(bbox)"},{"path":"/reference/bbox_center.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find center of bounding box — bbox_center","text":"bbox numeric vector length 4 names xmin, xmax, ymin, ymax, order.","code":""},{"path":"/reference/bbox_center.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find center of bounding box — bbox_center","text":"numeric vector length 2.","code":""},{"path":"/reference/bbox_center.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find center of bounding box — bbox_center","text":"","code":"bbox <- c(xmin = 0, xmax = 100, ymin = 0, ymax = 80) bbox_center(bbox) #> [1] 50 40"},{"path":"/reference/cbind-SpatialFeatureExperiment-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate SpatialFeatureExperiment objects — cbind,SpatialFeatureExperiment-method","title":"Concatenate SpatialFeatureExperiment objects — cbind,SpatialFeatureExperiment-method","text":"top cbind method SpatialExperiment, method needed properly merge spatialGraphs field different SFE objects. rowGeometries annotGeometries also need combined properly.","code":""},{"path":"/reference/cbind-SpatialFeatureExperiment-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate SpatialFeatureExperiment objects — cbind,SpatialFeatureExperiment-method","text":"","code":"# S4 method for SpatialFeatureExperiment cbind(..., deparse.level = 1)"},{"path":"/reference/cbind-SpatialFeatureExperiment-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate SpatialFeatureExperiment objects — cbind,SpatialFeatureExperiment-method","text":"... SFE objects cbind. deparse.level See ?rbind.","code":""},{"path":"/reference/cbind-SpatialFeatureExperiment-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate SpatialFeatureExperiment objects — cbind,SpatialFeatureExperiment-method","text":"combined SFE object.","code":""},{"path":"/reference/cbind-SpatialFeatureExperiment-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate SpatialFeatureExperiment objects — cbind,SpatialFeatureExperiment-method","text":"","code":"library(SFEData) sfe_small <- McKellarMuscleData(dataset = \"small\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache sfe_small2 <- McKellarMuscleData(dataset = \"small2\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> downloading 1 resources #> retrieving 1 resource #> loading from cache sfe2 <- cbind(sfe_small, sfe_small2)"},{"path":"/reference/changeSampleIDs.html","id":null,"dir":"Reference","previous_headings":"","what":"Change sample IDs — changeSampleIDs","title":"Change sample IDs — changeSampleIDs","text":"Change sample IDs fields SFE object sample IDs present, just colData.","code":""},{"path":"/reference/changeSampleIDs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change sample IDs — changeSampleIDs","text":"","code":"changeSampleIDs(sfe, replacement)"},{"path":"/reference/changeSampleIDs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change sample IDs — changeSampleIDs","text":"sfe SpatialFeatureExperiment object. replacement named character vector whose names existing sample IDs changed whose values corresponding replacements.","code":""},{"path":"/reference/changeSampleIDs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change sample IDs — changeSampleIDs","text":"SFE object.","code":""},{"path":"/reference/changeSampleIDs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change sample IDs — changeSampleIDs","text":"","code":"library(SFEData) sfe <- McKellarMuscleData(dataset = \"small\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache sfe <- changeSampleIDs(sfe, c(Vis5A = \"sample01\")) sampleIDs(sfe) #> [1] \"sample01\""},{"path":"/reference/colFeatureData.html","id":null,"dir":"Reference","previous_headings":"","what":"Get global spatial analysis results and metadata of colData, rowData, and geometries — colFeatureData","title":"Get global spatial analysis results and metadata of colData, rowData, and geometries — colFeatureData","text":"Results spatial analyses columns colData, rowData, geometries stored metadata, can accessed metadata function. colFeaturedata function allows users directly access results.","code":""},{"path":"/reference/colFeatureData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get global spatial analysis results and metadata of colData, rowData, and geometries — colFeatureData","text":"","code":"colFeatureData(sfe)  rowFeatureData(sfe)  geometryFeatureData(sfe, type, MARGIN = 2L)  reducedDimFeatureData(sfe, dimred)"},{"path":"/reference/colFeatureData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get global spatial analysis results and metadata of colData, rowData, and geometries — colFeatureData","text":"sfe SFE object. type geometry, can name (character) index (integer) MARGIN Integer, 1 means rowGeometry, 2 means colGeometry, 3 means annotGeometry. Defaults 2, colGeometry. dimred Name dimension reduction, can seen reducedDimNames.","code":""},{"path":"/reference/colFeatureData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get global spatial analysis results and metadata of colData, rowData, and geometries — colFeatureData","text":"DataFrame.","code":""},{"path":[]},{"path":"/reference/colFeatureData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get global spatial analysis results and metadata of colData, rowData, and geometries — colFeatureData","text":"","code":"library(SpatialFeatureExperiment) library(SingleCellExperiment) library(SFEData) library(Voyager) sfe <- McKellarMuscleData(\"small\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache colGraph(sfe, \"visium\") <- findVisiumGraph(sfe) # Moran's I for colData sfe <- colDataMoransI(sfe, \"nCounts\") colFeatureData(sfe) #> DataFrame with 12 rows and 2 columns #>           moran_Vis5A   K_Vis5A #>             <numeric> <numeric> #> barcode            NA        NA #> col                NA        NA #> row                NA        NA #> x                  NA        NA #> y                  NA        NA #> ...               ...       ... #> sample_id          NA        NA #> nCounts      0.675416   1.67027 #> nGenes             NA        NA #> prop_mito          NA        NA #> in_tissue          NA        NA"},{"path":"/reference/colGeometries.html","id":null,"dir":"Reference","previous_headings":"","what":"Column geometry getters and setters — colGeometries","title":"Column geometry getters and setters — colGeometries","text":"colGeometries geometries correspond columns gene count matrix, Visium spots cells. dimGeometry(x, MARGIN = 2L, ...), convenience wrappers getters setters special geometries: spotPoly Polygons spots technologies Visium, ST, slide-seq, correspond cells. Centroids polygons stored spatialCoords underlying SpatialExperiment object. ROIPoly Polygons regions interest (ROIs) technologies laser capture microdissection (LCM) GeoMX DSP. correspond columns gene count matrix. cellSeg Cell segmentation polygons. columns gene count matrix single cells, stored colGeometries. Otherwise, stored annotGeometries. nucSeg Similar cellSeg, nuclei rather whole cell.","code":""},{"path":"/reference/colGeometries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Column geometry getters and setters — colGeometries","text":"","code":"colGeometry(x, type = 1L, sample_id = 1L, withDimnames = TRUE)  colGeometry(   x,   type = 1L,   sample_id = 1L,   withDimnames = TRUE,   translate = TRUE ) <- value  colGeometries(x, withDimnames = TRUE)  colGeometries(x, withDimnames = TRUE, translate = TRUE) <- value  colGeometryNames(x)  colGeometryNames(x) <- value  spotPoly(x, sample_id = 1L, withDimnames = TRUE)  spotPoly(x, sample_id = 1L, withDimnames = TRUE, translate = TRUE) <- value  centroids(x, sample_id = 1L, withDimnames = TRUE)  centroids(x, sample_id = 1L, withDimnames = TRUE, translate = TRUE) <- value  ROIPoly(x, sample_id = 1L, withDimnames = TRUE)  ROIPoly(x, sample_id = 1L, withDimnames = TRUE, translate = TRUE) <- value  cellSeg(x, sample_id = 1L, withDimnames = TRUE)  cellSeg(x, sample_id = 1L, withDimnames = TRUE, translate = TRUE) <- value  nucSeg(x, sample_id = 1L, withDimnames = TRUE)  nucSeg(x, sample_id = 1L, withDimnames = TRUE, translate = TRUE) <- value"},{"path":"/reference/colGeometries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Column geometry getters and setters — colGeometries","text":"x SpatialFeatureExperiment object. type integer specifying index string specifying name *Geometry query replace. missing, first item *Geometries returned replaced. sample_id Sample ID get set geometries. withDimnames Logical. TRUE, dimnames (colnames rownames) gene count matrix correspond row names sf data frames interest. translate Logical. used removeEmptySpace run SFE object. case, argument indicates whether new value assigned geometry coordinates prior removal empty space translated match new coordinates removing empty space. Default TRUE. value Value set. dimGeometry, must sf data frame number rows size dimension interest, ordinary data frame can converted sf data frame (see df2sf). dimGeometries, must list sf ordinary data frames.","code":""},{"path":[]},{"path":"/reference/colGeometries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Column geometry getters and setters — colGeometries","text":"","code":"library(SFEData) sfe <- McKellarMuscleData(dataset = \"small\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache cgs <- colGeometries(sfe) spots <- spotPoly(sfe)"},{"path":"/reference/crop.html","id":null,"dir":"Reference","previous_headings":"","what":"Crop an SFE object with a geometry — crop","title":"Crop an SFE object with a geometry — crop","text":"Returns SFE object whose specified colGeometry returns TRUE geometric predicate function (usually intersects) another geometry interest. can used subset SFE object tissue boundary histological region polygon, crop away empty spaces. cropping, cells/spots subsetted, also geometries cropped.","code":""},{"path":"/reference/crop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crop an SFE object with a geometry — crop","text":"","code":"crop(   x,   y = NULL,   colGeometryName = 1L,   sample_id = \"all\",   pred = deprecated(),   op = st_intersection,   keep_whole = \"none\",   cover = FALSE,   xmin = deprecated(),   xmax = deprecated(),   ymin = deprecated(),   ymax = deprecated() )"},{"path":"/reference/crop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crop an SFE object with a geometry — crop","text":"x SFE object. y object class sf, sfg, sfc crop SFE object, bounding box format output bbox,SpatialFeatureExperiment-method. colGeometryName Column geometry used indicate cells/spots keep. sample_id Samples crop. Optional one sample present. Can multiple samples, \"\", means samples. multiple samples, sf data frame y may column sample_id indicating geometry subsets sample matrix y may indicate sample specific bounding boxes column names. samples included indicated sample IDs subsetted. sample indicated y, geometry bounding box used subset samples specified sample_id argument. pred Deprecated. binary predicate now tied geometric operation specified op. op geometric operation function crop geometries SFE object. st_intersection st_difference allowed. \"intersection\", things inside y kept cropping. \"difference\", things outside y kept. keep_whole Character vector, can one \"col\" \"annot\" keep whole items colGeometries annotGeometries, keeping geometries partially intersect y whole. can greatly speed code breaking geometries multiple pieces. Can also \"none\" geometries actually cropped. cover Logical, whether geometries x must entirely covered y op = st_intersection whether x must entirely outside y op = st_difference. relevant keep_whole != \"none\". xmin Deprecated. Supply bounding box argument y instead. xmax Deprecated. ymin Deprecated. ymax Deprecated.","code":""},{"path":"/reference/crop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crop an SFE object with a geometry — crop","text":"SFE object. guarantee geometries   cropping still valid preserve original geometry class.","code":""},{"path":"/reference/crop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Crop an SFE object with a geometry — crop","text":"3D geometries allowed, geometric operations can performed x y z.","code":""},{"path":"/reference/crop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crop an SFE object with a geometry — crop","text":"","code":"library(SFEData) sfe <- McKellarMuscleData(\"small\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache # Subset sfe to only keep spots on tissue sfe_on_tissue <- crop(sfe, tissueBoundary(sfe),     colGeometryName = \"spotPoly\",     sample_id = \"Vis5A\" )"},{"path":"/reference/cropImg.html","id":null,"dir":"Reference","previous_headings":"","what":"Crop images — cropImg","title":"Crop images — cropImg","text":"Crop images class *Image package bounding box.","code":""},{"path":"/reference/cropImg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crop images — cropImg","text":"","code":"# S4 method for SpatRasterImage cropImg(x, bbox, filename = \"\")  # S4 method for BioFormatsImage cropImg(x, bbox)  # S4 method for ExtImage cropImg(x, bbox)"},{"path":"/reference/cropImg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crop images — cropImg","text":"x object class *Image implemented package. bbox Numeric vector names \"xmin\", \"xmax\", \"ymin\", \"ymax\", order, specify bounding box. filename Output file name transformed SpatRaster.","code":""},{"path":"/reference/cropImg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crop images — cropImg","text":"Image class input cropped.  BioFormatsImage, image loaded memory;   extent changed.","code":""},{"path":[]},{"path":"/reference/df2sf.html","id":null,"dir":"Reference","previous_headings":"","what":"From ordinary data frame to sf to construct SFE object — df2sf","title":"From ordinary data frame to sf to construct SFE object — df2sf","text":"SpatialFeatureExperiment constructor *Geometry replacement methods can convert properly formatted ordinary data frames sf objects used store geometries internally, user might want conversion, check geometry valid, inspect fix invalid geometries.","code":""},{"path":"/reference/df2sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"From ordinary data frame to sf to construct SFE object — df2sf","text":"","code":"df2sf(   df,   spatialCoordsNames = c(\"x\", \"y\"),   spotDiameter = NA,   geometryType = c(\"POINT\", \"LINESTRING\", \"POLYGON\", \"MULTIPOINT\", \"MULTILINESTRING\",     \"MULTIPOLYGON\"),   group_col = \"group\",   id_col = \"ID\",   subid_col = \"subID\",   check = TRUE,   BPPARAM = deprecated(),   ... )"},{"path":"/reference/df2sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"From ordinary data frame to sf to construct SFE object — df2sf","text":"df ordinary data frame, .e. sf. matrix can converted data frame. spatialCoordsNames Column names df specify spatial coordinates. spotDiameter Spot diameter technologies arrays spots fixed diameter per slide, Visium, ST, DBiT-seq, slide-seq. diameter must unit coordinates *Geometry arguments. Ignored geometries POINT MULTIPOINT. geometryType Type geometry convert ordinary data frame . geometry df de facto points, argument ignored returned sf geometry type POINT. group_col Column indicate coordinates MULTI geometry, identify MULTIPOLYGON MULTIPOINT. id_col Column indicate coordinates geometry, within MULTI geometry applicable, identify POLYGON polygon within MULTIPOLYGON. subid_col Column indicate coordinates holes polygons. check Logical, whether check input data frame issues related constructing geometry interese number vertices per geometry. FALSE, save bit time, useful input already known good. BPPARAM Deprecated. `sfheaders` package used df2sf much better performance. ... arguments passed `sf::st_buffer`, mainly make polygon shapes, eg Visium spot `endCapStyle = \"ROUND\"` VisiumHD bin `endCapStyle = \"SQUARE\"`","code":""},{"path":"/reference/df2sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"From ordinary data frame to sf to construct SFE object — df2sf","text":"sf object.","code":""},{"path":"/reference/df2sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"From ordinary data frame to sf to construct SFE object — df2sf","text":"","code":"# Points, use spotDiameter to convert to circle polygons # This is done to Visium spots pts_df <- readRDS(system.file(\"extdata/pts_df.rds\",     package = \"SpatialFeatureExperiment\" )) sf_use <- df2sf(pts_df, geometryType = \"POINT\", spotDiameter = 0.1) # Linestring ls_df <- readRDS(system.file(\"extdata/ls_df.rds\",     package = \"SpatialFeatureExperiment\" )) sf_use <- df2sf(ls_df, geometryType = \"LINESTRING\") # Polygon pol_df <- readRDS(system.file(\"extdata/pol_df.rds\",     package = \"SpatialFeatureExperiment\" )) sf_use <- df2sf(pol_df,     geometryType = \"POLYGON\",     spatialCoordsNames = c(\"V1\", \"V2\") ) # Multipolygon mpol_df <- readRDS(system.file(\"extdata/mpol_df.rds\",     package = \"SpatialFeatureExperiment\" )) sf_use <- df2sf(mpol_df,     geometryType = \"MULTIPOLYGON\",     spatialCoordsNames = c(\"V1\", \"V2\") ) # Multiple sample_ids present multipts_df <- readRDS(system.file(\"extdata/multipts_df.rds\",     package = \"SpatialFeatureExperiment\" )) sf_use <- df2sf(multipts_df, geometryType = \"MULTIPOINT\")"},{"path":"/reference/dim-BioFormatsImage-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Find dimension of BioFormatsImage — dim,BioFormatsImage-method","title":"Find dimension of BioFormatsImage — dim,BioFormatsImage-method","text":"different classes. metadata read dimensions pixels can found. image read memory .","code":""},{"path":"/reference/dim-BioFormatsImage-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find dimension of BioFormatsImage — dim,BioFormatsImage-method","text":"","code":"# S4 method for BioFormatsImage dim(x)"},{"path":"/reference/dim-BioFormatsImage-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find dimension of BioFormatsImage — dim,BioFormatsImage-method","text":"x BioFormatsImage object.","code":""},{"path":"/reference/dim-BioFormatsImage-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find dimension of BioFormatsImage — dim,BioFormatsImage-method","text":"integer vector length 5 showing number rows columns   full resolution image. 5 dimensions order XYCZT:   x, y, channel, z, time. changed transformations. Use  ext see extent transformation.","code":""},{"path":[]},{"path":"/reference/dimGeometries.html","id":null,"dir":"Reference","previous_headings":"","what":"Dimension geometry methods — dimGeometries","title":"Dimension geometry methods — dimGeometries","text":"\"Dimension geometry\" refers Simple Feature (sf) geometries associated rows (features, genes) columns (cells spots) gene count matrix SpatialFeatureExperiment object. dimension, number rows sf data frame specifying geometries must match size dimension interest. example, must number rows sf data frame describing cells cells gene count matrix. page documents getters setters dimension geometries. getters setters implemented way similar reducedDims SingleCellExperiment.","code":""},{"path":"/reference/dimGeometries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dimension geometry methods — dimGeometries","text":"","code":"# S4 method for SpatialFeatureExperiment dimGeometries(x, MARGIN = 2, withDimnames = TRUE)  # S4 method for SpatialFeatureExperiment dimGeometries(x, MARGIN, withDimnames = TRUE, translate = TRUE, ...) <- value  # S4 method for SpatialFeatureExperiment dimGeometryNames(x, MARGIN)  # S4 method for SpatialFeatureExperiment,numeric,character dimGeometryNames(x, MARGIN) <- value  # S4 method for SpatialFeatureExperiment dimGeometry(x, type = 1L, MARGIN, sample_id = 1L, withDimnames = TRUE)  # S4 method for SpatialFeatureExperiment dimGeometry(   x,   type = 1L,   MARGIN,   sample_id = 1L,   withDimnames = TRUE,   translate = TRUE,   ... ) <- value"},{"path":"/reference/dimGeometries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dimension geometry methods — dimGeometries","text":"x SpatialFeatureExperiment object. MARGIN apply. 1 stands rows 2 stands columns. withDimnames Logical. TRUE, dimnames (colnames rownames) gene count matrix correspond row names sf data frames interest. translate Logical. used removeEmptySpace run SFE object. case, argument indicates whether new value assigned geometry coordinates prior removal empty space translated match new coordinates removing empty space. Default TRUE. ... spatialCoordsNames, spotDiameter, geometryType passed df2sf. Defaults df2sf. dimGeometries<- : geometryType can character vector geometry type data frame list length list data frames specify different types geometries. value Value set. dimGeometry, must sf data frame number rows size dimension interest, ordinary data frame can converted sf data frame (see df2sf). dimGeometries, must list sf ordinary data frames. type integer specifying index string specifying name *Geometry query replace. missing, first item *Geometries returned replaced. sample_id Sample ID get set geometries.","code":""},{"path":"/reference/dimGeometries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dimension geometry methods — dimGeometries","text":"Getters multiple geometries return named list. Getters names   return character vector names. Getters single geometries   return sf data frame. Setters return SFE object.","code":""},{"path":[]},{"path":"/reference/dimGeometries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dimension geometry methods — dimGeometries","text":"","code":"library(SFEData) sfe <- McKellarMuscleData(dataset = \"small\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache  # Get all column geometries as a named list # Use MARGIN = 1 or rowGeometry/ies for rowGeometries cgs <- dimGeometries(sfe, MARGIN = 2) # Or equivalently cgs <- colGeometries(sfe)  # Set all column geometries with a named list dimGeometries(sfe, MARGIN = 2) <- cgs # Or equivalently colGeometries(sfe) <- cgs  # Get names of column geometries cgns <- dimGeometryNames(sfe, MARGIN = 2) cgns <- colGeometryNames(sfe)  # Set column geometry names dimGeometryNames(sfe, MARGIN = 2) <- cgns colGeometryNames(sfe) <- cgns  # Get a specific column geometry by name spots <- dimGeometry(sfe, \"spotPoly\", MARGIN = 2) spots <- colGeometry(sfe, \"spotPoly\") # Or equivalently, the wrapper specifically for Visium spot polygons, # for the name \"spotPoly\" spots <- spotPoly(sfe) # Other colGeometry wrappers for specific names: # ROIPoly (for LCM and GeoMX DSP), cellSeg and nucSeg (for MERFISH; would # query annotGeometries for Visium) # rowGeometry wrappers for specific names: txSpots (MERFISH transcript spots) # By index spots <- colGeometry(sfe, 1L)  # Multiple samples, only get geometries for one sample sfe2 <- McKellarMuscleData(\"small2\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache sfe_combined <- cbind(sfe, sfe2) spots1 <- colGeometry(sfe, \"spotPoly\", sample_id = \"Vis5A\") spots2 <- spotPoly(sfe_combined, sample_id = \"sample02\") # Get geometries for multiple samples spots3 <- spotPoly(sfe_combined, sample_id = c(\"Vis5A\", \"sample02\")) # All samples spots3 <- spotPoly(sfe_combined, sample_id = \"all\")  # Set specific column geometry by name colGeometry(sfe, \"foobar\") <- spots # Or use wrapper spotPoly(sfe) <- spots # Specify sample_id colGeometry(sfe_combined, \"foobar\", sample_id = \"Vis5A\") <- spots1 # Only entries for the specified sample are set. foobar <- colGeometry(sfe_combined, \"foobar\", sample_id = \"sample02\")"},{"path":"/reference/ext.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set extent of image objects — ext","title":"Get and set extent of image objects — ext","text":"Unlike SpatialExperiment, images SFE extents used align geometries geometric operations SFE objects. functions get set extent S4 image classes inheriting VirtualSpatialImage implemented SFE package.","code":""},{"path":"/reference/ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set extent of image objects — ext","text":"","code":"# S4 method for BioFormatsImage ext(x)  # S4 method for ExtImage ext(x)  # S4 method for SpatRasterImage ext(x)  # S4 method for BioFormatsImage,numeric ext(x) <- value  # S4 method for ExtImage,numeric ext(x) <- value  # S4 method for SpatRasterImage,numeric ext(x) <- value"},{"path":"/reference/ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set extent of image objects — ext","text":"x *Image object. value numeric vector names \"xmin\", \"xmax\", \"ymin\", \"ymax\" specifying extent use.","code":""},{"path":"/reference/ext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get and set extent of image objects — ext","text":"Getters return numeric vector specifying extent. Setters return   *Image object class input.","code":""},{"path":"/reference/ext.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get and set extent of image objects — ext","text":"SpatRasterImage, image may may loaded memory. can check image loaded memory terra::inMemory(imgRaster(x)), check original file path imgSource. image loaded memory, original file must present path indicated imgSource order code using image work, includes function ext. BioFormatsImage, internally pre-transform extent stored. ext getter apply transformation fly. setter sets pre-transformation extent.","code":""},{"path":[]},{"path":"/reference/findSpatialNeighbors-SpatialFeatureExperiment-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Find spatial neighborhood graph — findSpatialNeighbors,SpatialFeatureExperiment-method","title":"Find spatial neighborhood graph — findSpatialNeighbors,SpatialFeatureExperiment-method","text":"function wraps spatial neighborhood graphs implemented package spdep SpatialFeatureExperiment (SFE) class, find spatial neighborhood graphs entities represented columns rows gene count matrix SFE object spatial entities annotGeometries field SFE object. Results stored listw objects spatialGraphs field SFE object, listw used many methods facilitate spatial neighborhood graph spdep, spatialreg, adespatial. edge weights graph listw object default style W (see nb2listw) unweighted neighbor list neighbours field listw object.","code":""},{"path":"/reference/findSpatialNeighbors-SpatialFeatureExperiment-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find spatial neighborhood graph — findSpatialNeighbors,SpatialFeatureExperiment-method","text":"","code":"# S4 method for SpatialFeatureExperiment findSpatialNeighbors(   x,   sample_id = \"all\",   type = \"spatialCoords\",   MARGIN = 2,   method = c(\"tri2nb\", \"knearneigh\", \"dnearneigh\", \"gabrielneigh\", \"relativeneigh\",     \"soi.graph\", \"poly2nb\"),   dist_type = c(\"none\", \"idw\", \"exp\", \"dpd\"),   glist = NULL,   style = c(\"raw\", \"W\", \"B\", \"C\", \"U\", \"minmax\", \"S\"),   nn_method = c(\"bioc\", \"spdep\"),   alpha = 1,   dmax = NULL,   BPPARAM = SerialParam(),   BNPARAM = KmknnParam(),   zero.policy = TRUE,   ... )"},{"path":"/reference/findSpatialNeighbors-SpatialFeatureExperiment-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find spatial neighborhood graph — findSpatialNeighbors,SpatialFeatureExperiment-method","text":"x SpatialFeatureExperiment object. sample_id sample(s) SFE object use graph. Can also \"\", means function compute graph samples independently. type Name geometry associated MARGIN interest compute graph. MARGIN Just like apply, 1 stands row, 2 stands column. , addition, 3 stands annotation, query annotGeometries, nuclei segmentation Visium data method Name function package spdep use find spatial neighborhood graph. dist_type Type distance-based weight. \"none\" means using distance-based weights; edge weights spatial neighborhood graph entirely determined style argument. \"idw\" means inverse distance weighting. \"exp\" means exponential decay. \"dpd\" means double-power distance weights. See nb2listwdist details. glist list general weights corresponding neighbours style style can take values “W”, “B”, “C”, “U”, “minmax” “S” nn_method Method find k nearest neighbors distance based neighbors. Can either \"bioc\" \"spdep\". \"bioc\", methods BiocNeighbors used. \"spdep\", methods spdep package used. \"bioc\" option scalable larger datasets supports multithreading. alpha relevant dist_type = \"dpd\". dmax relevant dist_type = \"dpd\". BPPARAM BiocParallelParam object multithreading. used k nearest neighbor distance based neighbor nn_method = \"bioc\". BNPARAM BiocNeighborParam object specifying algorithm find k nearest neighbors distance based neighbors nn_method = \"bioc\". distance based neighbors, KmknnParam VptreeParam applicable. zero.policy default NULL, use global option value; FALSE stop error empty neighbour sets, TRUE permit weights list formed zero-length weights vectors ... Extra arguments passed spdep function stated method argument, k, use_kd_tree, d1, d2, nnmult, sym, quadsegs. Note arguments using longitude latitude, irrelevant, ignored.","code":""},{"path":"/reference/findSpatialNeighbors-SpatialFeatureExperiment-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find spatial neighborhood graph — findSpatialNeighbors,SpatialFeatureExperiment-method","text":"one sample, listw object representing graph,   attribute \"method\" recording function used build graph,   arguments, information geometry graph   built. attribute used reconstruct graphs SFE object   subsetted since nodes graph longer present.   sample_id = \"\" length > 1, named list listw objects, whose names sample_ids. add list multiple   samples SFE object, specify name argument  spatialGraphs replacement method, graph name   added SFE object sample.","code":""},{"path":"/reference/findSpatialNeighbors-SpatialFeatureExperiment-method.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Find spatial neighborhood graph — findSpatialNeighbors,SpatialFeatureExperiment-method","text":"style = \"raw\" applicable dist_type   \"none\". dist_type = \"none\" style = \"raw\", style   default \"W\". Using distance based weights supplant finding   spatial neighborhood graph. spatial neighborhood graph first found   edges weighted based distance function.","code":""},{"path":"/reference/findSpatialNeighbors-SpatialFeatureExperiment-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find spatial neighborhood graph — findSpatialNeighbors,SpatialFeatureExperiment-method","text":"","code":"library(SFEData) sfe <- McKellarMuscleData(dataset = \"small\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache # sample_id is optional when only one sample is present g <- findSpatialNeighbors(sfe, sample_id = \"Vis5A\") attr(g, \"method\") #> $FUN #> [1] \"findSpatialNeighbors\" #>  #> $package #> $package[[1]] #> [1] \"SpatialFeatureExperiment\" #>  #> $package[[2]] #> [1] ‘1.6.1’ #>  #>  #> $args #> $args$method #> [1] \"tri2nb\" #>  #> $args$row.namesargs$dist_type #> [1] \"none\" #>  #> $args$style #> [1] \"W\" #>  #> $args$alpha #> [1] 1 #>  #> $args$zero.policy #> [1] TRUE #>  #> $args$sample_id #> [1] \"Vis5A\" #>  #> $args$type #> [1] \"spatialCoords\" #>  #> $args$MARGIN #> [1] 2 #>  #>  # Returns named list for multiple samples sfe2 <- McKellarMuscleData(dataset = \"small2\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache sfe_combined <- cbind(sfe, sfe2) gs <- findSpatialNeighbors(sfe, sample_id = \"all\")"},{"path":"/reference/findVisiumGraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Find spatial neighborhood graphs for Visium spots — findVisiumGraph","title":"Find spatial neighborhood graphs for Visium spots — findVisiumGraph","text":"Visium spots arranged hexagonal grid. function uses known locations Visium barcodes construct neighborhood graph, adjacent spots connected edges. Since known rows columns spots used, unit spot centroid coordinates matter.","code":""},{"path":"/reference/findVisiumGraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find spatial neighborhood graphs for Visium spots — findVisiumGraph","text":"","code":"findVisiumGraph(x, sample_id = \"all\", style = \"W\", zero.policy = NULL)"},{"path":"/reference/findVisiumGraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find spatial neighborhood graphs for Visium spots — findVisiumGraph","text":"x SpatialFeatureExperiment object Visium data. Column names gene count matrix must Visium barcodes, may numeric suffix distinguish samples (e.g. \"AAACAACGAATAGTTC-1\"). sample_id sample(s) SFE object use graph. Can also \"\", means function compute graph samples independently. style style can take values “W”, “B”, “C”, “U”, “minmax” “S” zero.policy default NULL, use global option value; FALSE stop error empty neighbour sets, TRUE permit weights list formed zero-length weights vectors","code":""},{"path":"/reference/findVisiumGraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find spatial neighborhood graphs for Visium spots — findVisiumGraph","text":"one sample, listw object representing graph,   attribute \"method\" recording function used build graph,   arguments, information geometry graph   built. attribute used reconstruct graphs SFE object   subsetted since nodes graph longer present.   sample_id = \"\" length > 1, named list listw objects, whose names sample_ids. add list multiple   samples SFE object, specify name argument  spatialGraphs replacement method, graph name   added SFE object sample.","code":""},{"path":"/reference/findVisiumGraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find spatial neighborhood graphs for Visium spots — findVisiumGraph","text":"","code":"library(SFEData) sfe <- McKellarMuscleData(dataset = \"small\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache g <- findVisiumGraph(sfe) # For multiple samples, returns named list sfe2 <- McKellarMuscleData(dataset = \"small2\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache sfe_combined <- cbind(sfe, sfe2) gs <- findVisiumGraph(sfe, sample_id = \"all\")"},{"path":"/reference/formatTxSpots.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and process transcript spots geometry for SFE — formatTxSpots","title":"Read and process transcript spots geometry for SFE — formatTxSpots","text":"function `formatTxSpots` reads transcript spot coordinates smFISH-based data formats data. data added SFE object. file specified `file_out` already exists, file read instead original file `file` argument, processing run multiple times. function `addTxSpots` adds data read processed `formatTxSpots` SFE object, reads transcript spot data. read subset transcript spot data, first use `formatTxSpots` write re-formatted data disk. read specific subset add separately SFE object setter functions.","code":""},{"path":"/reference/formatTxSpots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and process transcript spots geometry for SFE — formatTxSpots","text":"","code":"formatTxSpots(   file,   dest = c(\"rowGeometry\", \"colGeometry\"),   spatialCoordsNames = c(\"global_x\", \"global_y\", \"global_z\"),   gene_col = \"gene\",   cell_col = \"cell_id\",   z = \"all\",   phred_col = \"qv\",   min_phred = 20,   split_col = NULL,   not_in_cell_id = c(\"-1\", \"UNASSIGNED\"),   z_option = c(\"3d\", \"split\"),   flip = FALSE,   file_out = NULL,   BPPARAM = SerialParam(),   return = TRUE )  addTxSpots(   sfe,   file,   sample_id = 1L,   spatialCoordsNames = c(\"global_x\", \"global_y\", \"global_z\"),   gene_col = \"gene\",   z = \"all\",   phred_col = \"qv\",   min_phred = 20,   split_col = NULL,   z_option = c(\"3d\", \"split\"),   flip = FALSE,   file_out = NULL,   BPPARAM = SerialParam() )"},{"path":"/reference/formatTxSpots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and process transcript spots geometry for SFE — formatTxSpots","text":"file File transcript spot coordinates. one row per spot read R columns coordinates axis, gene transcript assigned , optionally cell transcript assigned . Must csv, tsv, parquet. dest SFE object store spot geometries. affects data processed. Options: rowGeometry spots gene `MULTIPOINT` geometry, regardless whether cells cells assigned . colGeometry spots gene assigned cell interest `MULTIPOINT` geometry; since gene count matrix sparse, geometries returned memory. spatialCoordsNames Column names x, y, optionally z coordinates spots. defaults Vizgen. gene_col Column name genes. cell_col Column name cell IDs, ignored `dest = \"rowGeometry\"`. Can length > 1 multiple columns needed uniquely identify cells, case contents columns concatenated, CosMX data cell ID unique within FOV. Default \"cell_id\" Vizgen MERFISH. `c(\"cell_ID\", \"fov\")` CosMX. z Index z plane read. Can \"\" read z-planes MULTIPOINT geometries XYZ coordinates. z values integer, spots z values read. phred_col Column name Phred scores spots. min_phred Minimum Phred score keep spot. default 20, conventional threshold indicating \"acceptable\", meaning 1 chance spot decoded error. split_col Categorical column split geometries, cell compartment spots assigned \"CellComp\" column CosMX output. not_in_cell_id Value cell ID indicating spot assigned cell, \"-1\" Vizgen MERFISH \"0\" CosMX. 're multiple columns `cell_col`, first column used identify spots cells. z_option z coordinates. \"3d\" construct 3D geometries. \"split\" create separate 2D geometry z-plane geometric operations fully supported data wrangling required perform 3D analyses. z coordinates integers, 3D geometries always constructed since z-planes speak . argument apply `spatialCoordsNames` length 2. flip Logical, whether flip geometry match image. y coordinates simply set -y, original bounding box preserved. consistent readVizgen readXenium. file_out Name file save geometry raster disk. Especially geometries large unwieldy load everything memory. file (directory multiple files) already exists, existing file(s) read, skipping processing. writing file, extensions supplied ignored extensions determined based `dest`. BPPARAM BiocParallelParam object specify multithreading convert raw char parquet files R objects. used otherwise. return Logical, whether return geometries memory. depend whether geometries written file. Always `FALSE` `dest = \"colGeometry\"`. sfe `SpatialFeatureExperiment` object. sample_id sample SFE object transcript spots added .","code":""},{"path":"/reference/formatTxSpots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and process transcript spots geometry for SFE — formatTxSpots","text":"sf data frame vector geometries `file_out` set.   `SpatRaster` raster. multiple files written,   splitting cell compartment `dest = \"colGeometry\"`,   directory name `file_out` created (without   extension) files written directory informative   names. `parquet` files can read `st_read` written   vector geometries. `return = FALSE`, file name directory   ('re multiple files) returned. `sf` data frame, path file geometries written   `return = FALSE`.","code":""},{"path":"/reference/formatTxSpots.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Read and process transcript spots geometry for SFE — formatTxSpots","text":"`dest = \"colGeometry\"`, geometries always written disk   returned memory, essentially gene count   matrix, sparse. kind reformatting implemented users   can read MULTIPOINT geometries transcript spots gene   assigned cell spatial point process analyses,   genes loaded .","code":""},{"path":"/reference/formatTxSpots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and process transcript spots geometry for SFE — formatTxSpots","text":"","code":"# Default arguments are for MERFISH fp <- tempdir() dir_use <- SFEData::VizgenOutput(file_path = file.path(fp, \"vizgen_test\")) #> see ?SFEData and browseVignettes('SFEData') for documentation #> downloading 1 resources #> retrieving 1 resource #> loading from cache #> The downloaded files are in /tmp/RtmpRqe7ue/vizgen_test/vizgen_cellbound  g <- formatTxSpots(file.path(dir_use, \"detected_transcripts.csv\")) #> >>> Converting transcript spots to geometry unlink(dir_use, recursive = TRUE)  # For CosMX, note the colnames, also dest = \"colGeometry\" # Results are written to the tx_spots directory dir_use <- SFEData::CosMXOutput(file_path = file.path(fp, \"cosmx_test\")) #> see ?SFEData and browseVignettes('SFEData') for documentation #> downloading 1 resources #> retrieving 1 resource #> loading from cache #> The downloaded files are in /tmp/RtmpRqe7ue/cosmx_test/cosmx  cg <- formatTxSpots(file.path(dir_use, \"Run5642_S3_Quarter_tx_file.csv\"), dest = \"colGeometry\", z = \"all\", cell_col = c(\"cell_ID\", \"fov\"), gene_col = \"target\", not_in_cell_id = \"0\", spatialCoordsNames = c(\"x_global_px\", \"y_global_px\", \"z\"), file_out = file.path(dir_use, \"tx_spots\")) #> >>> Converting transcript spots to geometry #> >>> Writing reformatted transcript spots to disk #>    |                                                                               |                                                                      |   0%   |                                                                               |                                                                      |   1%   |                                                                               |=                                                                     |   1%   |                                                                               |=                                                                     |   2%   |                                                                               |==                                                                    |   2%   |                                                                               |==                                                                    |   3%   |                                                                               |===                                                                   |   4%   |                                                                               |===                                                                   |   5%   |                                                                               |====                                                                  |   5%   |                                                                               |====                                                                  |   6%   |                                                                               |=====                                                                 |   7%   |                                                                               |=====                                                                 |   8%   |                                                                               |======                                                                |   8%   |                                                                               |======                                                                |   9%   |                                                                               |=======                                                               |   9%   |                                                                               |=======                                                               |  10%   |                                                                               |=======                                                               |  11%   |                                                                               |========                                                              |  11%   |                                                                               |========                                                              |  12%   |                                                                               |=========                                                             |  12%   |                                                                               |=========                                                             |  13%   |                                                                               |==========                                                            |  14%   |                                                                               |==========                                                            |  15%   |                                                                               |===========                                                           |  15%   |                                                                               |===========                                                           |  16%   |                                                                               |============                                                          |  17%   |                                                                               |============                                                          |  18%   |                                                                               |=============                                                         |  18%   |                                                                               |=============                                                         |  19%   |                                                                               |==============                                                        |  19%   |                                                                               |==============                                                        |  20%   |                                                                               |==============                                                        |  21%   |                                                                               |===============                                                       |  21%   |                                                                               |===============                                                       |  22%   |                                                                               |================                                                      |  22%   |                                                                               |================                                                      |  23%   |                                                                               |=================                                                     |  24%   |                                                                               |=================                                                     |  25%   |                                                                               |==================                                                    |  25%   |                                                                               |==================                                                    |  26%   |                                                                               |===================                                                   |  27%   |                                                                               |===================                                                   |  28%   |                                                                               |====================                                                  |  28%   |                                                                               |====================                                                  |  29%   |                                                                               |=====================                                                 |  29%   |                                                                               |=====================                                                 |  30%   |                                                                               |=====================                                                 |  31%   |                                                                               |======================                                                |  31%   |                                                                               |======================                                                |  32%   |                                                                               |=======================                                               |  32%   |                                                                               |=======================                                               |  33%   |                                                                               |========================                                              |  34%   |                                                                               |========================                                              |  35%   |                                                                               |=========================                                             |  35%   |                                                                               |=========================                                             |  36%   |                                                                               |==========================                                            |  37%   |                                                                               |==========================                                            |  38%   |                                                                               |===========================                                           |  38%   |                                                                               |===========================                                           |  39%   |                                                                               |============================                                          |  39%   |                                                                               |============================                                          |  40%   |                                                                               |============================                                          |  41%   |                                                                               |=============================                                         |  41%   |                                                                               |=============================                                         |  42%   |                                                                               |==============================                                        |  42%   |                                                                               |==============================                                        |  43%   |                                                                               |===============================                                       |  44%   |                                                                               |===============================                                       |  45%   |                                                                               |================================                                      |  45%   |                                                                               |================================                                      |  46%   |                                                                               |=================================                                     |  47%   |                                                                               |=================================                                     |  48%   |                                                                               |==================================                                    |  48%   |                                                                               |==================================                                    |  49%   |                                                                               |===================================                                   |  49%   |                                                                               |===================================                                   |  50%   |                                                                               |===================================                                   |  51%   |                                                                               |====================================                                  |  51%   |                                                                               |====================================                                  |  52%   |                                                                               |=====================================                                 |  52%   |                                                                               |=====================================                                 |  53%   |                                                                               |======================================                                |  54%   |                                                                               |======================================                                |  55%   |                                                                               |=======================================                               |  55%   |                                                                               |=======================================                               |  56%   |                                                                               |========================================                              |  57%   |                                                                               |========================================                              |  58%   |                                                                               |=========================================                             |  58%   |                                                                               |=========================================                             |  59%   |                                                                               |==========================================                            |  59%   |                                                                               |==========================================                            |  60%   |                                                                               |==========================================                            |  61%   |                                                                               |===========================================                           |  61%   |                                                                               |===========================================                           |  62%   |                                                                               |============================================                          |  62%   |                                                                               |============================================                          |  63%   |                                                                               |=============================================                         |  64%   |                                                                               |=============================================                         |  65%   |                                                                               |==============================================                        |  65%   |                                                                               |==============================================                        |  66%   |                                                                               |===============================================                       |  67%   |                                                                               |===============================================                       |  68%   |                                                                               |================================================                      |  68%   |                                                                               |================================================                      |  69%   |                                                                               |=================================================                     |  69%   |                                                                               |=================================================                     |  70%   |                                                                               |=================================================                     |  71%   |                                                                               |==================================================                    |  71%   |                                                                               |==================================================                    |  72%   |                                                                               |===================================================                   |  72%   |                                                                               |===================================================                   |  73%   |                                                                               |====================================================                  |  74%   |                                                                               |====================================================                  |  75%   |                                                                               |=====================================================                 |  75%   |                                                                               |=====================================================                 |  76%   |                                                                               |======================================================                |  77%   |                                                                               |======================================================                |  78%   |                                                                               |=======================================================               |  78%   |                                                                               |=======================================================               |  79%   |                                                                               |========================================================              |  79%   |                                                                               |========================================================              |  80%   |                                                                               |========================================================              |  81%   |                                                                               |=========================================================             |  81%   |                                                                               |=========================================================             |  82%   |                                                                               |==========================================================            |  82%   |                                                                               |==========================================================            |  83%   |                                                                               |===========================================================           |  84%   |                                                                               |===========================================================           |  85%   |                                                                               |============================================================          |  85%   |                                                                               |============================================================          |  86%   |                                                                               |=============================================================         |  87%   |                                                                               |=============================================================         |  88%   |                                                                               |==============================================================        |  88%   |                                                                               |==============================================================        |  89%   |                                                                               |===============================================================       |  89%   |                                                                               |===============================================================       |  90%   |                                                                               |===============================================================       |  91%   |                                                                               |================================================================      |  91%   |                                                                               |================================================================      |  92%   |                                                                               |=================================================================     |  92%   |                                                                               |=================================================================     |  93%   |                                                                               |==================================================================    |  94%   |                                                                               |==================================================================    |  95%   |                                                                               |===================================================================   |  95%   |                                                                               |===================================================================   |  96%   |                                                                               |====================================================================  |  97%   |                                                                               |====================================================================  |  98%   |                                                                               |===================================================================== |  98%   |                                                                               |===================================================================== |  99%   |                                                                               |======================================================================|  99%   |                                                                               |======================================================================| 100% #>  # Cleanup unlink(dir_use, recursive = TRUE)"},{"path":"/reference/formatTxTech.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and process transcript spots for specific commercial technologies — formatTxTech","title":"Read and process transcript spots for specific commercial technologies — formatTxTech","text":"preset parameters spatialCoordsNames, gene_col, cell_col, phred_col standard output technology.","code":""},{"path":"/reference/formatTxTech.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and process transcript spots for specific commercial technologies — formatTxTech","text":"","code":"formatTxTech(   data_dir,   tech = c(\"Vizgen\", \"Xenium\", \"CosMX\"),   dest = c(\"rowGeometry\", \"colGeometry\"),   z = \"all\",   min_phred = 20,   split_cell_comps = FALSE,   z_option = c(\"3d\", \"split\"),   flip = FALSE,   file_out = NULL,   BPPARAM = SerialParam(),   return = TRUE )  addTxTech(   sfe,   data_dir,   sample_id = 1L,   tech = c(\"Vizgen\", \"Xenium\", \"CosMX\"),   z = \"all\",   min_phred = 20,   split_cell_comps = FALSE,   z_option = c(\"3d\", \"split\"),   flip = FALSE,   file_out = NULL,   BPPARAM = SerialParam() )"},{"path":"/reference/formatTxTech.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and process transcript spots for specific commercial technologies — formatTxTech","text":"data_dir Top level output directory. tech technology whose output read, must one \"Vizgen\", \"Xenium\", \"CosMX\" though technologies may added later. dest SFE object store spot geometries. affects data processed. Options: rowGeometry spots gene `MULTIPOINT` geometry, regardless whether cells cells assigned . colGeometry spots gene assigned cell interest `MULTIPOINT` geometry; since gene count matrix sparse, geometries returned memory. z z-planes read. Always \"\" Xenium z coordinates discrete. min_phred Minimum Phred score keep spot. default 20, conventional threshold indicating \"acceptable\", meaning 1 chance spot decoded error. split_cell_comps relevant CosMX whose transcript spot file assigns spots cell components. Setting argument TRUE z_option z coordinates. \"3d\" construct 3D geometries. \"split\" create separate 2D geometry z-plane geometric operations fully supported data wrangling required perform 3D analyses. z coordinates integers, 3D geometries always constructed since z-planes speak . argument apply `spatialCoordsNames` length 2. flip Logical, whether flip geometry match image. y coordinates simply set -y, original bounding box preserved. consistent readVizgen readXenium. file_out Name file save geometry raster disk. Especially geometries large unwieldy load everything memory. file (directory multiple files) already exists, existing file(s) read, skipping processing. writing file, extensions supplied ignored extensions determined based `dest`. BPPARAM BiocParallelParam object specify multithreading convert raw char parquet files R objects. used otherwise. return Logical, whether return geometries memory. depend whether geometries written file. Always `FALSE` `dest = \"colGeometry\"`. sfe `SpatialFeatureExperiment` object. sample_id sample SFE object transcript spots added .","code":""},{"path":"/reference/formatTxTech.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and process transcript spots for specific commercial technologies — formatTxTech","text":"`sf` data frame, path file geometries written   `return = FALSE`.","code":""},{"path":"/reference/formatTxTech.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and process transcript spots for specific commercial technologies — formatTxTech","text":"","code":"library(SFEData) fp <- tempdir() dir_use <- XeniumOutput(\"v2\", file_path = file.path(fp, \"xenium_test\")) #> see ?SFEData and browseVignettes('SFEData') for documentation #> downloading 1 resources #> retrieving 1 resource #> loading from cache #> The downloaded files are in /tmp/RtmpRqe7ue/xenium_test/xenium2  fn_tx <- formatTxTech(dir_use, tech = \"Xenium\", flip = TRUE, return = FALSE,                       file_out = file.path(dir_use, \"tx_spots.parquet\")) #> >>> Converting transcript spots to geometry #> >>> Writing reformatted transcript spots to disk"},{"path":"/reference/gdalParquetAvailable.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Parquet GDAL driver is available — gdalParquetAvailable","title":"Check if Parquet GDAL driver is available — gdalParquetAvailable","text":"GeoParquet files geometries typically written read sfarrow package, add select genes SFE object say visualization purposes, Parquet GDAL driver required order use GDAL's SQL query GeoParquet file load genes requested. transcript spots large dataset can take lot memory loaded.","code":""},{"path":"/reference/gdalParquetAvailable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Parquet GDAL driver is available — gdalParquetAvailable","text":"","code":"gdalParquetAvailable()"},{"path":"/reference/gdalParquetAvailable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Parquet GDAL driver is available — gdalParquetAvailable","text":"Logical, indicating whether Parquet driver present.","code":""},{"path":"/reference/gdalParquetAvailable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if Parquet GDAL driver is available — gdalParquetAvailable","text":"Parquet driver supported since GDAL 3.5.0. arrow C++ library must installed order make Parquet driver available. arrow installed, newer versions GDAL installed Homebrew (Mac) Parquet driver. Linux, binary apt-get's default repo 3.4.1 (April 2024). use Parquet driver, GDAL may need installed source. See script geospatial rocker. Voyager docker container Parquet driver soon provided.","code":""},{"path":"/reference/gdalParquetAvailable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if Parquet GDAL driver is available — gdalParquetAvailable","text":"","code":"gdalParquetAvailable() #> [1] FALSE"},{"path":"/reference/getParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Get parameters used in spatial methods — getParams","title":"Get parameters used in spatial methods — getParams","text":"getParams function allows users access parameters used compute results may stored colFeatureData.","code":""},{"path":"/reference/getParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get parameters used in spatial methods — getParams","text":"","code":"getParams(   sfe,   name,   local = FALSE,   colData = FALSE,   colGeometryName = NULL,   annotGeometryName = NULL,   reducedDimName = NULL )"},{"path":"/reference/getParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get parameters used in spatial methods — getParams","text":"sfe SpatialFeatureExperiment object. name Name used store results. local Logical, whether results interest come local spatial method. colData Logical, whether results computed column colData(sfe). colGeometryName get results colGeometry. annotGeometryName get results annotGeometry; colGeometry precedence argument ignored colGeometryName specified. reducedDimName Name dimension reduction, can seen reducedDimNames. colGeometryName annotGeometryName precedence reducedDimName.","code":""},{"path":"/reference/getParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get parameters used in spatial methods — getParams","text":"named list showing parameters","code":""},{"path":"/reference/getParams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get parameters used in spatial methods — getParams","text":"","code":"library(SFEData) library(scater) #> Loading required package: scuttle #> Loading required package: ggplot2 #>  #> Attaching package: ‘ggplot2’ #> The following object is masked from ‘package:SpatialFeatureExperiment’: #>  #>     unit library(Voyager) sfe <- McKellarMuscleData(\"small\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache colGraph(sfe, \"visium\") <- findVisiumGraph(sfe) sfe <- colDataMoransI(sfe, \"nCounts\") getParams(sfe, \"moran\", colData = TRUE) #> $name #> [1] \"moran\" #>  #> $package #> [1] \"spdep\" #>  #> $version #> [1] ‘1.3.3’ #>  #> $zero.policy #> NULL #>  #> $include_self #> [1] FALSE #>  #> $graph_params #> $graph_params$FUN #> [1] \"findVisiumGraph\" #>  #> $graph_params$package #> $graph_params$package[[1]] #> [1] \"SpatialFeatureExperiment\" #>  #> $graph_params$package[[2]] #> [1] ‘1.6.1’ #>  #>  #> $graph_params$args #> $graph_params$args$style #> [1] \"W\" #>  #> $graph_params$args$zero.policy #> NULL #>  #> $graph_params$args$sample_id #> [1] \"Vis5A\" #>  #>  #>"},{"path":"/reference/getPixelSize.html","id":null,"dir":"Reference","previous_headings":"","what":"Get physical size of pixels — getPixelSize","title":"Get physical size of pixels — getPixelSize","text":"function gets physical size pixels resolution OME-TIFF pyramid BioFormatsImage.","code":""},{"path":"/reference/getPixelSize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get physical size of pixels — getPixelSize","text":"","code":"getPixelSize(file, resolution = 1L)"},{"path":"/reference/getPixelSize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get physical size of pixels — getPixelSize","text":"file Path OME-TIFF file. resolution resolution query; 1 means highest resolution. pixels larger lower resolutions.","code":""},{"path":"/reference/getPixelSize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get physical size of pixels — getPixelSize","text":"Numeric vector length 2 pixel size x y. Usually .","code":""},{"path":"/reference/getPixelSize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get physical size of pixels — getPixelSize","text":"","code":"library(SFEData) fp <- tempdir() dir_use <- XeniumOutput(\"v1\", file_path = file.path(fp, \"xenium_test\")) #> see ?SFEData and browseVignettes('SFEData') for documentation #> downloading 1 resources #> retrieving 1 resource #> loading from cache #> The downloaded files are in /tmp/RtmpRqe7ue/xenium_test/xenium_lr  # RBioFormats null pointer error try(getPixelSize(file.path(dir_use, \"morphology_focus.ome.tif\"))) #> Error in .jcall(.jcall(\"RBioFormats\", \"Lloci/formats/meta/MetadataStore;\",  :  #>   java.lang.NullPointerException getPixelSize(file.path(dir_use, \"morphology_focus.ome.tif\")) #> [1] 1.7 1.7 unlink(dir_use, recursive = TRUE)"},{"path":"/reference/imageIDs.html","id":null,"dir":"Reference","previous_headings":"","what":"Show all image_ids in the SFE object — imageIDs","title":"Show all image_ids in the SFE object — imageIDs","text":"title self-explanatory. functions require image_id get set images.","code":""},{"path":"/reference/imageIDs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show all image_ids in the SFE object — imageIDs","text":"","code":"imageIDs(sfe)"},{"path":"/reference/imageIDs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show all image_ids in the SFE object — imageIDs","text":"sfe SpatialFeatureExperiment object.","code":""},{"path":"/reference/imageIDs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show all image_ids in the SFE object — imageIDs","text":"character vector image_ids.","code":""},{"path":"/reference/imageIDs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show all image_ids in the SFE object — imageIDs","text":"","code":"fp <- system.file(file.path(\"extdata\", \"sample01\"), package = \"SpatialFeatureExperiment\") sfe <- read10xVisiumSFE(fp, type = \"sparse\") imageIDs(sfe) #> [1] \"lowres\" \"hires\""},{"path":"/reference/imgRaster.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the image from *Image class — imgRaster","title":"Get the image from *Image class — imgRaster","text":"SFE, S4 classes inheriting VirtualSpatialImage implemented make image classes compatible SpatialExperiment. imgRaster methods SFE meant extract original image *Image classes, SpatRaster SpatRasterImage, Image ExtImage BioFormatsImage. BioFormatsImage, image specified resolution read memory AnnotatedImage, inherits EBImage::Image.","code":""},{"path":"/reference/imgRaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the image from *Image class — imgRaster","text":"x object class *Image implemented package. resolution Resolution read OME-TIFF, defaults 4, medium resolution Xenium.","code":""},{"path":"/reference/imgRaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the image from *Image class — imgRaster","text":"SpatRaster SpatRasterImage, Image  ExtImage BioFormatsImage. BioFormatsImage,   image specified resolution read memory  AnnotatedImage ExtImage, inherit  EBImage::Image.","code":""},{"path":[]},{"path":"/reference/imgSource.html","id":null,"dir":"Reference","previous_headings":"","what":"Source of images that are on disk — imgSource","title":"Source of images that are on disk — imgSource","text":"Get file path images disk read memory. applies SpatRasterImage BioFormatsImage.","code":""},{"path":"/reference/imgSource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Source of images that are on disk — imgSource","text":"","code":"# S4 method for SpatRasterImage imgSource(x)  # S4 method for BioFormatsImage imgSource(x)  # S4 method for ExtImage imgSource(x)"},{"path":"/reference/imgSource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source of images that are on disk — imgSource","text":"x object class *Image implemented package.","code":""},{"path":"/reference/imgSource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Source of images that are on disk — imgSource","text":"String, file path original image disk.  SpatRasterImage, image loaded memory,  NULL.","code":""},{"path":[]},{"path":"/reference/internal-Voyager.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal functions also used in Voyager — internal-Voyager","title":"Internal functions also used in Voyager — internal-Voyager","text":"meant user, exporting used internally Voyager. one day may clean remove internal note people building top SFE.","code":""},{"path":"/reference/internal-Voyager.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal functions also used in Voyager — internal-Voyager","text":"","code":".value2df(value, use_geometry, feature = NULL)  .check_features(x, features, colGeometryName = NULL, swap_rownames = NULL)  .warn_symbol_duplicate(x, symbols, swap_rownames = \"symbol\")  .symbol2id(x, features, swap_rownames)  .check_sample_id(x, sample_id, one = TRUE, mustWork = TRUE)  .rm_empty_geometries(g, MARGIN)"},{"path":"/reference/internal-Voyager.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal functions also used in Voyager — internal-Voyager","text":"Internal","code":""},{"path":"/reference/localResults.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set results from local spatial statistics — localResults","title":"Get and set results from local spatial statistics — localResults","text":"Local spatial statics like local Moran's , local Geary's C, Getis-Ord Gi*, geographically weighted summary statistics return values spatial location. Just like dimension reductions, results clearly associated broader SFE object, place within object. However, separate field needed analyses conceptually distinct dimension reduction. Also, feature (e.g. gene) can results values location. localResults field SFE object stores results value spatial location.","code":""},{"path":"/reference/localResults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set results from local spatial statistics — localResults","text":"","code":"# S4 method for SpatialFeatureExperiment localResults(   x,   sample_id = \"all\",   name = \"all\",   features = NULL,   colGeometryName = NULL,   annotGeometryName = NULL,   withDimnames = TRUE,   swap_rownames = NULL,   ... )  # S4 method for SpatialFeatureExperiment localResults(   x,   sample_id = \"all\",   name = \"all\",   features = NULL,   colGeometryName = NULL,   annotGeometryName = NULL,   withDimnames = TRUE,   swap_rownames = NULL,   ... ) <- value  # S4 method for SpatialFeatureExperiment localResultNames(x)  # S4 method for SpatialFeatureExperiment,character localResultNames(x) <- value  # S4 method for SpatialFeatureExperiment localResultFeatures(   x,   type = 1L,   colGeometryName = NULL,   annotGeometryName = NULL,   swap_rownames = NULL )  # S4 method for SpatialFeatureExperiment localResultAttrs(   x,   type = 1L,   feature,   colGeometryName = NULL,   annotGeometryName = NULL,   swap_rownames = NULL )  # S4 method for SpatialFeatureExperiment localResult(   x,   type = 1L,   feature,   colGeometryName = NULL,   annotGeometryName = NULL,   sample_id = 1L,   withDimnames = TRUE,   simplify = TRUE,   swap_rownames = NULL )  # S4 method for SpatialFeatureExperiment localResult(   x,   type = 1L,   feature,   colGeometryName = NULL,   annotGeometryName = NULL,   sample_id = 1L,   withDimnames = TRUE ) <- value"},{"path":"/reference/localResults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set results from local spatial statistics — localResults","text":"x SpatialFeatureExperiment object. sample_id Sample ID get set geometries. name Name spatial method used, \"localmoran\". features Features whose local results get set, localResults getter setter multiple features time. colGeometryName colGeometry get set local results. annotGeometryName annotGeometry get set local results. withDimnames Logical. TRUE, dimnames (colnames rownames) gene count matrix correspond row names sf data frames interest. swap_rownames Name column rowData identify features instead row names SFE object. example, row names SFE object Ensembl IDs gene symbols \"symbol\" column rowData, putting \"symbol\" argument use gene symbols identify gene's local results get set. ... Ignored value Values set, either matrix data frame. type Name index spatial method used, \"localmoran\". feature Feature whose local results get set, localResult getter setter one feature time. simplify Basically whether return content list rather list list one element, results one type one feature.","code":""},{"path":"/reference/localResults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get and set results from local spatial statistics — localResults","text":"localResults returns named list element   set local results interest. localResult returns matrix   data frame, whichever original set.  localResultNames returns character vector. Setters return SFE   object desired field set. genes colData columns,   local results stored localResults field  int_colData, whereas colGeometries  annotGeometries, local results stored columns  sf data frames. localResultFeatures returns character   vector names features local results available.  localResultAttrs returns character vector column names   local results one type one feature. returns NULL   results vector.","code":""},{"path":"/reference/localResults.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get and set results from local spatial statistics — localResults","text":"","code":"# Toy example sfe <- readRDS(system.file(\"extdata/sfe_toy.rds\",     package = \"SpatialFeatureExperiment\" )) # localResults functions are written for organizing results from local # spatial statistics (see the Voyager package). But for the examples here, # random toy matrices are used. The real results are often matrices, with a # matrix for each feature. library(S4Vectors) set.seed(29) toy_res1 <- matrix(rnorm(10),     nrow = 5, ncol = 2,     dimnames = list(colnames(sfe), c(\"meow\", \"purr\")) ) toy_res1b <- matrix(rgamma(10, shape = 2),     nrow = 5, ncol = 2,     dimnames = list(colnames(sfe), c(\"meow\", \"purr\")) ) toy_df1 <- DataFrame(gene1 = I(toy_res1), gene2 = I(toy_res1b))  toy_res2 <- matrix(rpois(10, lambda = 2),     nrow = 5, ncol = 2,     dimnames = list(colnames(sfe), c(\"sassy\", \"tortitude\")) ) toy_df2 <- DataFrame(gene1 = I(toy_res2)) # Set all local results localResults(sfe) <- list(localmoran = toy_df1, Gistar = toy_df2) # Get all local results lrs <- localResults(sfe)  # Set results of the same type for multiple genes localResults(sfe, name = \"localmoran\") <- toy_df1 # Can also use a list localResults(sfe, name = \"localmoran\") <- as.list(toy_df1) # Get results of the same type for multiple genes lrs <- localResults(sfe, name = \"localmoran\", features = c(\"gene1\", \"gene2\"))  # Set results for one type and one gene localResult(sfe, \"localmoran\", feature = \"gene1\") <- toy_res1 # Get results for one type and one gene lr <- localResult(sfe, \"localmoran\", feature = \"gene1\")  # Set results for a feature in colGeometries cg_toy <- readRDS(system.file(\"extdata/cg_toy.rds\",     package = \"SpatialFeatureExperiment\" )) colGeometry(sfe, \"cg\") <- cg_toy localResult(sfe, \"localmoran\",     feature = \"gene1\",     colGeometryName = \"cg\" ) <- toy_res1 # Get results for a feature in colGeometries lr <- localResult(sfe, \"localmoran\", \"gene1\", colGeometryName = \"cg\")"},{"path":"/reference/mirrorImg.html","id":null,"dir":"Reference","previous_headings":"","what":"Mirror/flip images — mirrorImg","title":"Mirror/flip images — mirrorImg","text":"Flip images along middle horizontal vertical axis.","code":""},{"path":"/reference/mirrorImg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mirror/flip images — mirrorImg","text":"","code":"# S4 method for SpatRasterImage mirrorImg(   x,   direction = c(\"vertical\", \"horizontal\"),   filename = \"\",   maxcell = NULL,   ... )  # S4 method for BioFormatsImage mirrorImg(x, direction = c(\"vertical\", \"horizontal\"), ...)  # S4 method for ExtImage mirrorImg(x, direction = c(\"vertical\", \"horizontal\"), ...)"},{"path":"/reference/mirrorImg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mirror/flip images — mirrorImg","text":"x SpatRaster SpatVector direction character. (partially) match \"vertical\" flip rows, \"horizontal\" flip columns filename character. Output filename maxcell Max number pixels load SpatRasterImage memory. default 1e7 chosen approximate number pixels medium resolution image resolution = 4L Xenium OME-TIFF make different methods function consistent. ... additional arguments writing files writeRaster","code":""},{"path":"/reference/mirrorImg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mirror/flip images — mirrorImg","text":"*Image object class.","code":""},{"path":[]},{"path":"/reference/read10xVisiumSFE.html","id":null,"dir":"Reference","previous_headings":"","what":"Read 10X Visium data as SpatialFeatureExperiment — read10xVisiumSFE","title":"Read 10X Visium data as SpatialFeatureExperiment — read10xVisiumSFE","text":"Read Space Ranger output SpatialFeatureExperiment object, spots represented polygons colGeometry called \"spotPoly\". geometries can added later dataset read. data = \"filtered\", spatial neighborhood graphs spots also computed stored colGraph called \"visium\" samples downstream spatial analyses.","code":""},{"path":"/reference/read10xVisiumSFE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read 10X Visium data as SpatialFeatureExperiment — read10xVisiumSFE","text":"","code":"read10xVisiumSFE(   samples = \"\",   dirs = file.path(samples, \"outs\"),   sample_id = paste0(\"sample\", sprintf(\"%02d\", seq_along(samples))),   type = c(\"HDF5\", \"sparse\"),   data = c(\"filtered\", \"raw\"),   images = c(\"lowres\", \"hires\"),   unit = c(\"full_res_image_pixel\", \"micron\"),   style = \"W\",   zero.policy = NULL,   load = FALSE )"},{"path":"/reference/read10xVisiumSFE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read 10X Visium data as SpatialFeatureExperiment — read10xVisiumSFE","text":"samples character vector specifying one directories,  corresponding 10x Genomics Visium sample (see Details); provided, names used sample identifiers dirs Directory sample contains spatial raw/filtered_featues_bc_matrix directories. default, outs directory directory specified samples argument, Space Ranger output. Change dirs argument moved renamed output directory. sample_id character string specifying unique sample identifiers, one directory specified via samples;  ignored !.null(names(samples)) type Either \"HDF5\", matrix represented TENxMatrix, \"sparse\", matrix read dgCMatrix. data character string specifying whether read filtered (spots mapped tissue) raw data (spots). images character vector specifying images include.  Valid values \"lowres\", \"hires\", \"fullres\", \"detected\", \"aligned\" unit Whether use pixels full resolution image microns unit. using microns, spacing spots pixels used convert coordinates microns, spacing known 100 microns. used plot scale bar. style style can take values “W”, “B”, “C”, “U”, “minmax” “S” zero.policy default NULL, use global option value; FALSE stop error empty neighbour sets, TRUE permit weights list formed zero-length weights vectors load used, kept backward compatibility.","code":""},{"path":"/reference/read10xVisiumSFE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read 10X Visium data as SpatialFeatureExperiment — read10xVisiumSFE","text":"SpatialFeatureExperiment object. images might need   manually transposed /mirrored match spots version   package.","code":""},{"path":"/reference/read10xVisiumSFE.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Read 10X Visium data as SpatialFeatureExperiment — read10xVisiumSFE","text":"(<dgTMatrix>, \"dgCMatrix\") deprecated warning comes   DropletUtils package used   SpatialExperiment read 10X outputs. fixed   SpatialExperiment switches TENxIO. assumed images cropped. Otherwise images might align spots.","code":""},{"path":"/reference/read10xVisiumSFE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read 10X Visium data as SpatialFeatureExperiment — read10xVisiumSFE","text":"","code":"dir <- system.file(\"extdata\", package = \"SpatialFeatureExperiment\")  sample_ids <- c(\"sample01\", \"sample02\") samples <- file.path(dir, sample_ids)  list.files(samples[1]) #> [1] \"outs\" list.files(file.path(samples[1], \"spatial\")) #> character(0) (sfe <- read10xVisiumSFE(samples, sample_id = sample_ids,     type = \"sparse\", data = \"filtered\",     load = FALSE )) #> class: SpatialFeatureExperiment  #> dim: 5 25  #> metadata(0): #> assays(1): counts #> rownames(5): ENSG00000014257 ENSG00000142515 ENSG00000263639 #>   ENSG00000163810 ENSG00000149591 #> rowData names(14): symbol Feature.Type ... #>   Median.Normalized.Average.Counts_sample02 #>   Barcodes.Detected.per.Feature_sample02 #> colnames(25): GTGGCGTGCACCAGAG-1 GGTCCCATAACATAGA-1 ... #>   TGCAATTTGGGCACGG-1 ATGCCAATCGCTCTGC-1 #> colData names(10): in_tissue array_row ... channel3_mean channel3_stdev #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : pxl_col_in_fullres pxl_row_in_fullres #> imgData names(4): sample_id image_id data scaleFactor #>  #> unit: full_res_image_pixel #> Geometries: #> colGeometries: spotPoly (POLYGON)  #>  #> Graphs: #> sample01: col: visium #> sample02: col: visium"},{"path":"/reference/readCosMX.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CosMX data into SFE — readCosMX","title":"Read CosMX data into SFE — readCosMX","text":"function reads standard CosMX output SFE object, \"Basic Data Files\" Nanostring website.","code":""},{"path":"/reference/readCosMX.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CosMX data into SFE — readCosMX","text":"","code":"readCosMX(   data_dir,   z = \"all\",   sample_id = \"sample01\",   add_molecules = FALSE,   split_cell_comps = FALSE,   BPPARAM = SerialParam(),   file_out = file.path(data_dir, \"tx_spots.parquet\"),   z_option = c(\"3d\", \"split\") )"},{"path":"/reference/readCosMX.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CosMX data into SFE — readCosMX","text":"data_dir Top level output directory. z Integer z index \"\" indicate z-planes read transcript spots. sample_id character sample identifier, matches sample_id imgData. sample_id also stored new column colData, already present. Default = sample01. add_molecules Logical, whether add transcripts coordinates object. split_cell_comps Logical, whether split transcript spot geometries cell compartment. relevant `add_molecules = TRUE`. BPPARAM BiocParallelParam object specifying parallel   processing backend number threads use parallelizable tasks: load cell segmentation HDF5 files different   fields view (FOVs) multiple cores. progress bar can configured   BiocParallelParam object. numerous   FOVs, reading geometries can time consuming, recommend   using server larger number threads. argument used   use_cellpose = TRUE parquet file present. get largest piece see larger min_area   multiple pieces cell segmentation one cell. file_out Name file save geometry raster disk. Especially geometries large unwieldy load everything memory. file (directory multiple files) already exists, existing file(s) read, skipping processing. writing file, extensions supplied ignored extensions determined based `dest`. z_option z coordinates. \"3d\" construct 3D geometries. \"split\" create separate 2D geometry z-plane geometric operations fully supported data wrangling required perform 3D analyses. z coordinates integers, 3D geometries always constructed since z-planes speak . argument apply `spatialCoordsNames` length 2.","code":""},{"path":"/reference/readCosMX.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CosMX data into SFE — readCosMX","text":"SFE object. Cell polygons written   `cell_boundaries_sf.parquet` `data_dir`. reading transcript spots   (`add_molecules = TRUE`), reformatted transcript spots saved   file specified `file_out` argument, default   `tx_spots.parquet` directory rest data.","code":""},{"path":"/reference/readCosMX.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read CosMX data into SFE — readCosMX","text":"","code":"fp <- tempdir() dir_use <- SFEData::CosMXOutput(file_path = file.path(fp, \"cosmx_test\")) #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache #> The downloaded files are in /tmp/RtmpRqe7ue/cosmx_test/cosmx  sfe <- readCosMX(dir_use, z = \"all\", add_molecules = TRUE) #> >>> Constructing cell polygons #> >>> Reading transcript coordinates #> >>> Converting transcript spots to geometry #> >>> Writing reformatted transcript spots to disk # Clean up unlink(dir_use, recursive = TRUE)"},{"path":"/reference/readSelectTx.html","id":null,"dir":"Reference","previous_headings":"","what":"Read transcript spots of select genes — readSelectTx","title":"Read transcript spots of select genes — readSelectTx","text":"speculate practice, common use transcript spots visualization, genes can visualized time spots overcrowd. make sense load transcript spots genes memory can take lot memory. function readSelectTx reads transcript spots select genes R, function addSelectTx adds rowGeometries SFE object.","code":""},{"path":"/reference/readSelectTx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read transcript spots of select genes — readSelectTx","text":"","code":"readSelectTx(file, gene_select, z = \"all\", z_option = c(\"3d\", \"split\"))  addSelectTx(   sfe,   file,   gene_select,   sample_id = 1L,   z = \"all\",   z_option = c(\"3d\", \"split\"),   swap_rownames = NULL )"},{"path":"/reference/readSelectTx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read transcript spots of select genes — readSelectTx","text":"file File path GeoParquet file (e.g. already reformatted formatTxSpots addTxSpots function, already flipped match image necessary). gene_select Character vector subset genes. NULL, genes transcript spots added. relevant reading data formatted files disk. specified, return = TRUE. z Index z plane read. Can \"\" read z-planes MULTIPOINT geometries XYZ coordinates. z values integer, spots z values read. z_option z coordinates. \"3d\" construct 3D geometries. \"split\" create separate 2D geometry z-plane geometric operations fully supported data wrangling required perform 3D analyses. z coordinates integers, 3D geometries always constructed since z-planes speak . argument apply `spatialCoordsNames` length 2. sfe `SpatialFeatureExperiment` object. sample_id sample SFE object transcript spots added . swap_rownames Name column rowData(sfe) use gene identifiers place actual row names. cases may needed match transcript spot MULTIPOINT geometry rows sfe.","code":""},{"path":"/reference/readSelectTx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read transcript spots of select genes — readSelectTx","text":"multipel parquet files read, list sf data   frames MULTIPOINT geometry genes selected. one   file, one sf data frame. addSelectTx, SFE object   transcript spots selected genes added.","code":""},{"path":"/reference/readSelectTx.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Read transcript spots of select genes — readSelectTx","text":"GDAL Parquet driver required function, though   functions work GeoParquet files. GDAL Parquet driver   supported since GDAL 3.5.0, part default   installation. z z_option arguments since   file names contain z-plane information relevant. See GDAL documentation page Parquet driver.","code":""},{"path":"/reference/readSelectTx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read transcript spots of select genes — readSelectTx","text":"","code":"library(SFEData) if (gdalParquetAvailable()) {     fp <- tempdir()     dir_use <- XeniumOutput(\"v2\", file_path = file.path(fp, \"xenium_test\"))     fn_tx <- formatTxTech(dir_use, tech = \"Xenium\", flip = TRUE, return = FALSE,                           file_out = file.path(dir_use, \"tx_spots.parquet\"))     gene_select <- c(\"ACE2\", \"BMX\")     df <- readSelectTx(fn_tx, gene_select)      sfe <- readXenium(dir_use)     sfe <- addSelectTx(sfe, fn_tx, head(rownames(sfe), 5), swap_rownames = \"Symbol\")     unlink(dir_use, recursive = TRUE) }"},{"path":"/reference/readVizgen.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Vizgen MERFISH output as SpatialFeatureExperiment — readVizgen","title":"Read Vizgen MERFISH output as SpatialFeatureExperiment — readVizgen","text":"function reads standard Vizgen MERFISH output SFE object. coordinates microns. Cell centroids read colGeometry \"centroids\", cell segmentations read colGeometry \"cellSeg\". image(s) (polyT, DAPI, cell boundaries) also read SpatRaster objects loaded memory unless necessary. image's origin top left geometry's origin bottom left, either image geometry needs flipped. image accompanying MERFISH datasets usually large, coordinates flipped flipping operation load entire image memory. Large datasets hundreds thousands cells can take read reading transcript spots takes convert spots MULTIPOINT geometries.","code":""},{"path":"/reference/readVizgen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Vizgen MERFISH output as SpatialFeatureExperiment — readVizgen","text":"","code":"readVizgen(   data_dir,   z = \"all\",   sample_id = \"sample01\",   min_area = 15,   image = c(\"DAPI\", \"PolyT\", \"Cellbound\"),   flip = c(\"geometry\", \"image\", \"none\"),   max_flip = \"50 MB\",   filter_counts = FALSE,   add_molecules = FALSE,   use_bboxes = FALSE,   use_cellpose = TRUE,   BPPARAM = SerialParam(),   file_out = file.path(data_dir, \"detected_transcripts.parquet\"),   z_option = c(\"3d\", \"split\") )"},{"path":"/reference/readVizgen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Vizgen MERFISH output as SpatialFeatureExperiment — readVizgen","text":"data_dir Top level output directory. z Integer, z index read, \"\", indicating z-planes images transcript spots read. cell segmentation seems multiple z-planes, segmentation z-planes effect cell segmentatio 2D. sample_id character sample identifier, matches sample_id imgData. sample_id also stored new column colData, already present. Default = sample01. min_area Minimum cell area square microns. Anything smaller considered artifact debris removed. image image(s) load, can \"DAPI\", \"PolyT\", \"Cellbound\" combination . flip flip image, geometry coordinates, none. image origin top left geometry origin bottom left, one needs flipped match. one already flipped, use \"none\". image flipped GeoTIFF. max_flip Maximum size image allowed flip image. image loaded memory flipped. image larger size coordinates flipped instead. filter_counts Logical, whether keep cells counts > 0. add_molecules Logical, whether add transcripts coordinates object. use_bboxes segmentation output present, use cell_metadata make bounding boxes instead. use_cellpose Whether read parquet files CellPose cell segmentation. FALSE, cell segmentation read HDF5 files. Note reading HDF5 files numerous FOVs slow. BPPARAM BiocParallelParam object specifying parallel   processing backend number threads use parallelizable tasks: load cell segmentation HDF5 files different   fields view (FOVs) multiple cores. progress bar can configured   BiocParallelParam object. numerous   FOVs, reading geometries can time consuming, recommend   using server larger number threads. argument used   use_cellpose = TRUE parquet file present. get largest piece see larger min_area   multiple pieces cell segmentation one cell. file_out Name file save geometry raster disk. Especially geometries large unwieldy load everything memory. file (directory multiple files) already exists, existing file(s) read, skipping processing. writing file, extensions supplied ignored extensions determined based `dest`. z_option z coordinates. \"3d\" construct 3D geometries. \"split\" create separate 2D geometry z-plane geometric operations fully supported data wrangling required perform 3D analyses. z coordinates integers, 3D geometries always constructed since z-planes speak . argument apply `spatialCoordsNames` length 2.","code":""},{"path":"/reference/readVizgen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Vizgen MERFISH output as SpatialFeatureExperiment — readVizgen","text":"SpatialFeatureExperiment object.","code":""},{"path":"/reference/readVizgen.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Read Vizgen MERFISH output as SpatialFeatureExperiment — readVizgen","text":"Since transcript spots file often large, recommend   using add_molecules = TRUE servers lot memory.   reading z-planes, conversion transcript spot geometry parquet   file might fail due arrow data length limit. future version,   transcript spot geometry large, written multiple   separate parquet files concatenated DuckDB. Also,   future version, transcript spot processing function might rewritten   C++ stream original CSV file entirely loaded   memory.","code":""},{"path":"/reference/readVizgen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Vizgen MERFISH output as SpatialFeatureExperiment — readVizgen","text":"","code":"fp <- tempdir() dir_use <- SFEData::VizgenOutput(file_path = file.path(fp, \"vizgen_test\")) #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache #> The downloaded files are in /tmp/RtmpRqe7ue/vizgen_test/vizgen_cellbound  sfe <- readVizgen(dir_use, z = 3L, image = \"PolyT\", flip = \"geometry\") #> >>> 1 `.parquet` files exist: #> /tmp/RtmpRqe7ue/vizgen_test/vizgen_cellbound/cell_boundaries.parquet #> >>> using -> /tmp/RtmpRqe7ue/vizgen_test/vizgen_cellbound/cell_boundaries.parquet #> >>> Cell segmentations are found in `.parquet` file #> Removing 35 cells with area less than 15 #> >>> filtering geometries to match 1023 cells with counts > 0  ## Filtering of counts, and addition of molecule coordinates.. sfe <- readVizgen(dir_use, z = 3L, image = \"PolyT\", filter_counts = TRUE, add_molecules = TRUE, flip = \"geometry\") #> >>> 1 `.parquet` files exist: #> /tmp/RtmpRqe7ue/vizgen_test/vizgen_cellbound/cell_boundaries.parquet #> >>> using -> /tmp/RtmpRqe7ue/vizgen_test/vizgen_cellbound/cell_boundaries.parquet #> >>> Cell segmentations are found in `.parquet` file #> Removing 35 cells with area less than 15 #> >>> ..filtering `cell_metadata` - keep cells with `transcript_count` > 0 #> >>> filtering geometries to match 1023 cells with counts > 0 #> >>> Reading transcript coordinates #> >>> Converting transcript spots to geometry #> >>> Writing reformatted transcript spots to disk  unlink(dir_use, recursive = TRUE)"},{"path":"/reference/readXenium.html","id":null,"dir":"Reference","previous_headings":"","what":"Read 10X Xenium output as SpatialFeatureExperiment — readXenium","title":"Read 10X Xenium output as SpatialFeatureExperiment — readXenium","text":"function reads standard 10X Xenium output SFE object.","code":""},{"path":"/reference/readXenium.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read 10X Xenium output as SpatialFeatureExperiment — readXenium","text":"","code":"readXenium(   data_dir,   sample_id = \"sample01\",   image = c(\"morphology_focus\", \"morphology_mip\"),   segmentations = c(\"cell\", \"nucleus\"),   row.names = c(\"id\", \"symbol\"),   flip = c(\"geometry\", \"image\", \"none\"),   max_flip = \"50 MB\",   filter_counts = FALSE,   add_molecules = FALSE,   min_phred = 20,   BPPARAM = SerialParam(),   file_out = file.path(data_dir, \"tx_spots.parquet\") )"},{"path":"/reference/readXenium.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read 10X Xenium output as SpatialFeatureExperiment — readXenium","text":"data_dir Top level output directory. sample_id character sample identifier, matches sample_id imgData. sample_id also stored new column colData, already present. Default = sample01. image image(s) load, can \"morphology_mip\", \"morphology_focus\" . Note Xenium Onboarding Analysis (XOA) v2, longer \"morphology_mip\" \"morphology_focus\" directory 4 images corresponding 4 channels: DAPI, \"Cadherin\", 18S, Vimentin. argument ignored XOA v2. segmentations segmentation outputs read, can \"cell\", \"nucleus\", . row.names String specifying whether use Ensembl IDs (\"id\") gene symbols (\"symbol\") row names. using symbols, Ensembl ID appended disambiguate case symbol corresponds multiple Ensembl IDs. Always \"symbol\" `add_molecules = TRUE` gene symbols used transcript spot files. flip flip image, geometry coordinates, none. image origin top left geometry origin bottom left, one needs flipped match. one already flipped, use \"none\". image flipped GeoTIFF. max_flip Maximum size image allowed flip image. image loaded memory flipped. image larger size coordinates flipped instead. filter_counts Logical, whether keep cells counts > 0. add_molecules Logical, whether add transcripts coordinates object. min_phred Minimum Phred score keep spot. default 20, conventional threshold indicating \"acceptable\", meaning 1 chance spot decoded error. BPPARAM BiocParallelParam object specifying parallel   processing backend number threads use parallelizable tasks: load cell segmentation HDF5 files different   fields view (FOVs) multiple cores. progress bar can configured   BiocParallelParam object. numerous   FOVs, reading geometries can time consuming, recommend   using server larger number threads. argument used   use_cellpose = TRUE parquet file present. get largest piece see larger min_area   multiple pieces cell segmentation one cell. file_out Name file save geometry raster disk. Especially geometries large unwieldy load everything memory. file (directory multiple files) already exists, existing file(s) read, skipping processing. writing file, extensions supplied ignored extensions determined based `dest`.","code":""},{"path":"/reference/readXenium.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read 10X Xenium output as SpatialFeatureExperiment — readXenium","text":"SFE object. reading segmentations, cell nuclei   segmentation saved `cell_boundaries_sf.parquet`   `nucleus_boundaries_sf.parquet` respectively `data.dir` next time   boundaries can read much quickly. reading transcript spots   (`add_molecules = TRUE`), reformatted transcript spots saved   file specified `file_out` argument, default   `tx_spots.parquet` directory rest data. images   present, images BioFormatsImage class   loaded memory necessary later operations.","code":""},{"path":"/reference/readXenium.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Read 10X Xenium output as SpatialFeatureExperiment — readXenium","text":"Sometimes reading images, see error first time: 'java.lang.NullPointerException: invoke \"loci.formats.DimensionSwapper.setMetadataFiltered(boolean)\" \"RBioFormats.reader\" null'. Rerun code work second time.","code":""},{"path":"/reference/readXenium.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read 10X Xenium output as SpatialFeatureExperiment — readXenium","text":"","code":"library(SFEData) library(RBioFormats) #> BioFormats library version 7.3.0 fp <- tempdir() dir_use <- XeniumOutput(\"v2\", file_path = file.path(fp, \"xenium_test\")) #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache #> The downloaded files are in /tmp/RtmpRqe7ue/xenium_test/xenium2  # RBioFormats issue try(sfe <- readXenium(dir_use, add_molecules = TRUE)) #> >>> Must use gene symbols as row names when adding transcript spots. #> >>> Cell segmentations are found in `.parquet` file(s) #> >>> Reading cell and nucleus segmentations #> >>> Making MULTIPOLYGON nuclei geometries #> >>> Making POLYGON cell geometries #> >>> Checking polygon validity #> >>> Saving geometries to parquet files #> >>> Reading cell metadata -> `cells.csv` #> >>> Reading h5 gene count matrix #> >>> filtering cellSeg geometries to match 6272 cells with counts > 0 #> >>> filtering nucSeg geometries to match 6158 cells with counts > 0 #> >>> Reading transcript coordinates #> >>> Total of 116 features/genes with no transcript detected or `min_phred` < 20 are removed from SFE object #> >>> To keep all features -> set `min_phred = NULL` sfe <- readXenium(dir_use, add_molecules = TRUE) #> >>> Must use gene symbols as row names when adding transcript spots. #> >>> Preprocessed sf segmentations found #> >>> Reading cell and nucleus segmentations #> >>> Reading cell metadata -> `cells.csv` #> >>> Reading h5 gene count matrix #> >>> filtering cellSeg geometries to match 6272 cells with counts > 0 #> >>> filtering nucSeg geometries to match 6158 cells with counts > 0 #> >>> Reading transcript coordinates #> >>> Total of 116 features/genes with no transcript detected or `min_phred` < 20 are removed from SFE object #> >>> To keep all features -> set `min_phred = NULL` unlink(dir_use, recursive = TRUE)"},{"path":"/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions re-exported from other packages — reexports","title":"Functions re-exported from other packages — reexports","text":"commonly used getters setters classes SFE inherits separately attach packages use functions.","code":""},{"path":"/reference/reexports.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions re-exported from other packages — reexports","text":"","code":"colData(x, ...)  rowData(x, use.names = TRUE, ...)  colData(x, ...) <- value  spatialCoords(x, ...)  spatialCoords(x) <- value  spatialCoordsNames(x)  getImg(x, ...)  imgData(x)  rmvImg(x, ...)  counts(object, ...)  logcounts(object, ...)  reducedDim(x, type, ...)"},{"path":"/reference/removeEmptySpace.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove empty space — removeEmptySpace","title":"Remove empty space — removeEmptySpace","text":"sample independently, geometries spatialCoords translated origin minimum coordinates bounding box geometries sample. way coordinates different samples comparable. removes empty space images present.","code":""},{"path":"/reference/removeEmptySpace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove empty space — removeEmptySpace","text":"","code":"removeEmptySpace(sfe, sample_id = \"all\")"},{"path":"/reference/removeEmptySpace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove empty space — removeEmptySpace","text":"sfe SFE object. sample_id Sample remove empty space.","code":""},{"path":"/reference/removeEmptySpace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove empty space — removeEmptySpace","text":"SFE object empty space removed.","code":""},{"path":"/reference/removeEmptySpace.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Remove empty space — removeEmptySpace","text":"Unlike functions package, function operates samples default.","code":""},{"path":"/reference/removeEmptySpace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove empty space — removeEmptySpace","text":"","code":"library(SFEData) library(SingleCellExperiment) sfe <- McKellarMuscleData(\"full\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> downloading 1 resources #> retrieving 1 resource #> loading from cache # Only keep spots on tissue sfe <- sfe[, colData(sfe)$in_tissue] # Move the coordinates of the tissue sfe <- removeEmptySpace(sfe)"},{"path":"/reference/rotateImg.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate image — rotateImg","title":"Rotate image — rotateImg","text":"SpatialExperiment, rotation must multiple 90 degrees.","code":""},{"path":"/reference/rotateImg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotate image — rotateImg","text":"","code":"# S4 method for SpatRasterImage rotateImg(x, degrees, maxcell = 1e+07, ...)  # S4 method for BioFormatsImage rotateImg(x, degrees, ...)  # S4 method for ExtImage rotateImg(x, degrees, ...)"},{"path":"/reference/rotateImg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotate image — rotateImg","text":"x object class *Image implemented package. degrees many degrees rotate. Positive number means clockwise negative number means counterclockwise. maxcell Max number pixels load SpatRasterImage memory. default 1e7 chosen approximate number pixels medium resolution image resolution = 4L Xenium OME-TIFF make different methods function consistent. ... Ignored. different methods can passed lapply method SFE objects. methods extra arguments.","code":""},{"path":"/reference/rotateImg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rotate image — rotateImg","text":"SpatRasterImage loaded memory converted  ExtImage. Otherwise *Image object class.","code":""},{"path":[]},{"path":"/reference/rowGeometries.html","id":null,"dir":"Reference","previous_headings":"","what":"Row geometry getters and setters — rowGeometries","title":"Row geometry getters and setters — rowGeometries","text":"rowGeometries geometries corresponding rows gene count matrix, smFISH transcript spots. txSpots() function convenience wrapper transcript spots, although entirely depends rowGeometry named txSpots.","code":""},{"path":"/reference/rowGeometries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row geometry getters and setters — rowGeometries","text":"","code":"rowGeometry(x, type = 1L, sample_id = 1L, withDimnames = TRUE)  rowGeometry(   x,   type = 1L,   sample_id = 1L,   withDimnames = TRUE,   partial = FALSE,   translate = TRUE ) <- value  rowGeometries(x, sample_id = \"all\", withDimnames = TRUE)  rowGeometries(   x,   sample_id = \"all\",   withDimnames = TRUE,   partial = FALSE,   translate = TRUE ) <- value  rowGeometryNames(x)  rowGeometryNames(x) <- value  txSpots(x, sample_id = 1L, withDimnames = TRUE)  txSpots(   x,   sample_id = 1L,   withDimnames = TRUE,   partial = FALSE,   translate = TRUE ) <- value"},{"path":"/reference/rowGeometries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row geometry getters and setters — rowGeometries","text":"x SpatialFeatureExperiment object. type integer specifying index string specifying name *Geometry query replace. missing, first item *Geometries returned replaced. sample_id Sample ID get set geometries. withDimnames Logical. TRUE, dimnames (colnames rownames) gene count matrix correspond row names sf data frames interest. partial setters, rowGeometry name exists, whether replace rows present value. translate Logical. used removeEmptySpace run SFE object. case, argument indicates whether new value assigned geometry coordinates prior removal empty space translated match new coordinates removing empty space. Default TRUE. value Value set. dimGeometry, must sf data frame number rows size dimension interest, ordinary data frame can converted sf data frame (see df2sf). dimGeometries, must list sf ordinary data frames.","code":""},{"path":"/reference/rowGeometries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Row geometry getters and setters — rowGeometries","text":"multiple samples SFE object, rowGeometries sample sample_id appended name geometry. example, name txSpots sample ID sample01, actual name rowGeometry txSpots_sample01. getter, one can still specify rowGeometry(sfe, \"txSpots\", sample_id = \"sample01\"). Appending sample_id unnecessary one sample, sample_id appended SFE objects combined cbind. necessary distinguish bewteen different samples can overlapping coordinate values.","code":""},{"path":[]},{"path":"/reference/rowGeometries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Row geometry getters and setters — rowGeometries","text":"","code":"library(SFEData) library(RBioFormats) fp <- tempdir() dir_use <- XeniumOutput(\"v2\", file_path = file.path(fp, \"xenium_test\")) #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache #> The downloaded files are in /tmp/RtmpRqe7ue/xenium_test/xenium2  # RBioFormats issue try(sfe <- readXenium(dir_use, add_molecules = TRUE)) #> >>> Must use gene symbols as row names when adding transcript spots. #> >>> Cell segmentations are found in `.parquet` file(s) #> >>> Reading cell and nucleus segmentations #> >>> Making MULTIPOLYGON nuclei geometries #> >>> Making POLYGON cell geometries #> >>> Checking polygon validity #> >>> Saving geometries to parquet files #> >>> Reading cell metadata -> `cells.csv` #> >>> Reading h5 gene count matrix #> >>> filtering cellSeg geometries to match 6272 cells with counts > 0 #> >>> filtering nucSeg geometries to match 6158 cells with counts > 0 #> >>> Reading transcript coordinates #> >>> Converting transcript spots to geometry #> >>> Writing reformatted transcript spots to disk #> >>> Total of 116 features/genes with no transcript detected or `min_phred` < 20 are removed from SFE object #> >>> To keep all features -> set `min_phred = NULL` sfe <- readXenium(dir_use, add_molecules = TRUE) #> >>> Must use gene symbols as row names when adding transcript spots. #> >>> Preprocessed sf segmentations found #> >>> Reading cell and nucleus segmentations #> >>> Reading cell metadata -> `cells.csv` #> >>> Reading h5 gene count matrix #> >>> filtering cellSeg geometries to match 6272 cells with counts > 0 #> >>> filtering nucSeg geometries to match 6158 cells with counts > 0 #> >>> Reading transcript coordinates #> >>> Total of 116 features/genes with no transcript detected or `min_phred` < 20 are removed from SFE object #> >>> To keep all features -> set `min_phred = NULL` rowGeometries(sfe) #> List of length 1 #> names(1): txSpots rowGeometryNames(sfe) #> [1] \"txSpots\" tx <- rowGeometry(sfe, \"txSpots\") txSpots(sfe) #> Simple feature collection with 398 features and 2 fields #> Geometry type: MULTIPOINT #> Dimension:     XYZ #> Bounding box:  xmin: 0.001159668 ymin: -1008.098 xmax: 1026.159 ymax: -4.473946 #> z_range:       zmin: 13.56251 zmax: 27.21318 #> CRS:           NA #> First 10 features: #>            gene codeword_index                       geometry #> ABCC11   ABCC11             87 MULTIPOINT Z ((111.2996 -47... #> ACE2       ACE2             31 MULTIPOINT Z ((204.9438 -21... #> ACKR1     ACKR1            349 MULTIPOINT Z ((8.244019 -88... #> ACTA2     ACTA2            342 MULTIPOINT Z ((4.195129 -40... #> ACTG2     ACTG2            231 MULTIPOINT Z ((6.257874 -30... #> ADAM28   ADAM28            119 MULTIPOINT Z ((0.2313232 -4... #> ADAMTS1 ADAMTS1            242 MULTIPOINT Z ((5.13385 -321... #> ADGRE1   ADGRE1             24 MULTIPOINT Z ((119.8132 -7.... #> ADGRL4   ADGRL4            132 MULTIPOINT Z ((4.375183 -32... #> ADH1C     ADH1C             92 MULTIPOINT Z ((1.244507 -59... unlink(dir_use, recursive = TRUE)"},{"path":"/reference/sampleIDs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all unique sample IDs — sampleIDs","title":"Get all unique sample IDs — sampleIDs","text":"title self-explanatory.","code":""},{"path":"/reference/sampleIDs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all unique sample IDs — sampleIDs","text":"","code":"sampleIDs(sfe)"},{"path":"/reference/sampleIDs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all unique sample IDs — sampleIDs","text":"sfe SpatialFeatureExperiment object.","code":""},{"path":"/reference/sampleIDs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all unique sample IDs — sampleIDs","text":"character vector unique entries sample_id column colData(x).","code":""},{"path":"/reference/sampleIDs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all unique sample IDs — sampleIDs","text":"","code":"library(SFEData) sfe <- McKellarMuscleData(dataset = \"small\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache sampleIDs(sfe) #> [1] \"Vis5A\""},{"path":"/reference/saveRDS-SpatialFeatureExperiment-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Save SpatialFeatureExperiment as RDS file — saveRDS,SpatialFeatureExperiment-method","title":"Save SpatialFeatureExperiment as RDS file — saveRDS,SpatialFeatureExperiment-method","text":"Saving SFE objects RDS files complicated SpatRaster class images. present, images need wrapped wrap function terra serializing SFE object. Otherwise images invalid pointers RDS reloaded. image fit memory file source unknown, written temporary file, reloaded RDS file loaded. SFE object images read RDS file, images unwrapped necessary.","code":""},{"path":"/reference/saveRDS-SpatialFeatureExperiment-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save SpatialFeatureExperiment as RDS file — saveRDS,SpatialFeatureExperiment-method","text":"","code":"# S4 method for SpatialFeatureExperiment saveRDS(   object,   file = \"\",   ascii = FALSE,   version = NULL,   compress = TRUE,   refhook = NULL )"},{"path":"/reference/saveRDS-SpatialFeatureExperiment-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save SpatialFeatureExperiment as RDS file — saveRDS,SpatialFeatureExperiment-method","text":"object SpatialFeatureExperiment object. file connection name file R object     saved read . ascii logical.  TRUE NA, ASCII     representation written; otherwise (default), binary one used.     See comments help save. version workspace format version use.  NULL     specifies current default version (3). supported     value 2, default R 1.4.0 R 3.5.0. compress logical specifying whether saving named file     use \"gzip\" compression, one \"gzip\",     \"bzip2\" \"xz\" indicate type compression     used.  Ignored file connection. refhook hook function handling reference objects.","code":""},{"path":"/reference/saveRDS-SpatialFeatureExperiment-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save SpatialFeatureExperiment as RDS file — saveRDS,SpatialFeatureExperiment-method","text":"Invisibly NULL.","code":""},{"path":"/reference/saveRDS-SpatialFeatureExperiment-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save SpatialFeatureExperiment as RDS file — saveRDS,SpatialFeatureExperiment-method","text":"","code":"outdir <- system.file(\"extdata\", package = \"SpatialFeatureExperiment\") samples <- file.path(outdir, paste0(\"sample0\", 1:2)) sfe <- read10xVisiumSFE(samples, type = \"sparse\", data = \"filtered\") saveRDS(sfe, \"foo.rds\") # Clean up file.remove(\"foo.rds\") #> [1] TRUE"},{"path":"/reference/scaleImg.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale image — scaleImg","title":"Scale image — scaleImg","text":"function scales image center. scaling, center image shifted.","code":""},{"path":"/reference/scaleImg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale image — scaleImg","text":"","code":"# S4 method for AlignedSpatialImage scaleImg(x, factor, ...)"},{"path":"/reference/scaleImg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale image — scaleImg","text":"x object class *Image implemented package. factor Numeric, scaling factor. ... Ignored. different methods can passed lapply method SFE objects. methods extra arguments.","code":""},{"path":"/reference/scaleImg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale image — scaleImg","text":"*Image object class scaled. Behind scene, extent changed images changed. center image unchanged.","code":""},{"path":[]},{"path":"/reference/show-SpatialFeatureExperiment-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for SpatialFeatureExperiment — show,SpatialFeatureExperiment-method","title":"Print method for SpatialFeatureExperiment — show,SpatialFeatureExperiment-method","text":"Printing summaries colGeometries, rowGeometries, annotGeometries addition shown SpatialExperiment. Geometry names types printed.","code":""},{"path":"/reference/show-SpatialFeatureExperiment-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for SpatialFeatureExperiment — show,SpatialFeatureExperiment-method","text":"","code":"# S4 method for SpatialFeatureExperiment show(object)"},{"path":"/reference/show-SpatialFeatureExperiment-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for SpatialFeatureExperiment — show,SpatialFeatureExperiment-method","text":"object SpatialFeatureExperiment object.","code":""},{"path":"/reference/show-SpatialFeatureExperiment-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for SpatialFeatureExperiment — show,SpatialFeatureExperiment-method","text":"None (invisible NULL).","code":""},{"path":"/reference/show-SpatialFeatureExperiment-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for SpatialFeatureExperiment — show,SpatialFeatureExperiment-method","text":"","code":"library(SFEData) sfe <- McKellarMuscleData(dataset = \"small\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache sfe # The show method is implicitly called #> class: SpatialFeatureExperiment  #> dim: 15123 77  #> metadata(0): #> assays(1): counts #> rownames(15123): ENSMUSG00000025902 ENSMUSG00000096126 ... #>   ENSMUSG00000064368 ENSMUSG00000064370 #> rowData names(6): Ensembl symbol ... vars cv2 #> colnames(77): AAATTACCTATCGATG AACATATCAACTGGTG ... TTCTTTGGTCGCGACG #>   TTGATGTGTAGTCCCG #> colData names(12): barcode col ... prop_mito in_tissue #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : imageX imageY #> imgData names(1): sample_id #>  #> unit: full_res_image_pixels #> Geometries: #> colGeometries: spotPoly (POLYGON)  #> annotGeometries: tissueBoundary (POLYGON), myofiber_full (GEOMETRY), myofiber_simplified (GEOMETRY), nuclei (POLYGON), nuclei_centroid (POINT)  #>  #> Graphs: #> Vis5A:"},{"path":"/reference/spatialGraphs.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial graph methods — spatialGraphs","title":"Spatial graph methods — spatialGraphs","text":"Spatial neighborhood graphs spdep's listw objects stored int_metadata SFE object. listw class used spdep many useful methods rely neighborhood graph listw.","code":""},{"path":"/reference/spatialGraphs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatial graph methods — spatialGraphs","text":"","code":"# S4 method for SpatialFeatureExperiment spatialGraphs(x, MARGIN = NULL, sample_id = \"all\", name = \"all\")  colGraphs(x, sample_id = \"all\", name = \"all\")  rowGraphs(x, sample_id = \"all\", name = \"all\")  annotGraphs(x, sample_id = \"all\", name = \"all\")  # S4 method for SpatialFeatureExperiment spatialGraphs(x, MARGIN = NULL, sample_id = \"all\", name = \"all\") <- value  colGraphs(x, sample_id = \"all\", name = \"all\") <- value  rowGraphs(x, sample_id = \"all\", name = \"all\") <- value  annotGraphs(x, sample_id = \"all\", name = \"all\") <- value  # S4 method for SpatialFeatureExperiment,numeric spatialGraphNames(x, MARGIN, sample_id = 1L)  # S4 method for SpatialFeatureExperiment,numeric,ANY,character spatialGraphNames(x, MARGIN, sample_id = 1L) <- value  colGraphNames(x, sample_id = 1L)  rowGraphNames(x, sample_id = 1L)  annotGraphNames(x, sample_id = 1L)  colGraphNames(x, sample_id = 1L) <- value  rowGraphNames(x, sample_id = 1L) <- value  annotGraphNames(x, sample_id = 1L) <- value  # S4 method for SpatialFeatureExperiment spatialGraph(x, type = 1L, MARGIN, sample_id = 1L)  colGraph(x, type = 1L, sample_id = 1L)  rowGraph(x, type = 1L, sample_id = 1L)  annotGraph(x, type = 1L, sample_id = 1L)  # S4 method for SpatialFeatureExperiment spatialGraph(x, type = 1L, MARGIN, sample_id = NULL) <- value  colGraph(x, type = 1L, sample_id = 1L) <- value  rowGraph(x, type = 1L, sample_id = 1L) <- value  annotGraph(x, type = 1L, sample_id = 1L) <- value"},{"path":"/reference/spatialGraphs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatial graph methods — spatialGraphs","text":"x SpatialFeatureExperiment object. MARGIN apply. 1 stands rows 2 stands columns. addition, 3 stands spatial neighborhood graphs correspond annotGeometries. sample_id Name sample graph associated . useful multiple pieces tissues SFE object (say joint dimension reduction clustering) spatial neighborhood meaningful within piece tissue. See sample_id argument SpatialExperiment. name Name graphs add sample_id; used spatialGraphs replacement method must character type can either integer index name. value listw object (*Graph), named list list listw objects (*Graphs) names top level list sample_ids adding graphs samples margin interest, list listw objects adding graphs one sample one margin. type integer specifying index string specifying name *Graph query replace. missing, first item *Graph returned replaced.","code":""},{"path":"/reference/spatialGraphs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatial graph methods — spatialGraphs","text":"Getters multiple graphs return named list. Getters   names return character vector names. Getters single graphs   return listw object. Setters return SFE object.","code":""},{"path":"/reference/spatialGraphs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatial graph methods — spatialGraphs","text":"","code":"library(SFEData) sfe <- McKellarMuscleData(dataset = \"small\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache g1 <- findVisiumGraph(sfe) g2 <- findSpatialNeighbors(sfe)  # Set all graphs of a margin by a named list spatialGraphs(sfe, MARGIN = 2L, sample_id = \"Vis5A\") <-     list(tri2nb = g2, visium = g1) # Or equivalently colGraphs(sfe, sample_id = \"Vis5A\") <- list(tri2nb = g2, visium = g1)  # Get all graphs of a margin, returning a named list gs <- spatialGraphs(sfe, MARGIN = 2L) # Or equivalently gs <- colGraphs(sfe)  # Set graph of the same name and same margin for multiple samples # Each sample has a separate graph sfe2 <- McKellarMuscleData(\"small2\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache sfe_combined <- cbind(sfe, sfe2) colGraphs(sfe_combined, name = \"visium\", sample_id = \"all\") <-     findVisiumGraph(sfe_combined, sample_id = \"all\")  # Get graph names spatialGraphNames(sfe, MARGIN = 2L, sample_id = \"Vis5A\") #> [1] \"tri2nb\" \"visium\" # Or equivalently (sample_id optional as only one sample is present) colGraphNames(sfe) #> [1] \"tri2nb\" \"visium\"  # Set graph names spatialGraphNames(sfe, MARGIN = 2L) <- c(\"foo\", \"bar\") colGraphNames(sfe) <- c(\"tri2nb\", \"visium\")  # MARGIN = 1 means rowGraphs; MARGIN = 3 means annotation graphs (annotGraphs) # for both getters and setters  # Set single graph by # Spatial graph for myofibers g_myofiber <- findSpatialNeighbors(sfe,     type = \"myofiber_simplified\",     MARGIN = 3L ) spatialGraph(sfe, type = \"myofiber\", MARGIN = 3L) <- g_myofiber # Or equivalently annotGraph(sfe, \"myofiber\") <- g_myofiber  # Get a specific graph by name g <- spatialGraph(sfe, \"myofiber\", MARGIN = 3L) g2 <- spatialGraph(sfe, \"visium\", MARGIN = 2L) # Or equivalently g <- annotGraph(sfe, \"myofiber\") g2 <- colGraph(sfe, \"visium\")"},{"path":"/reference/st_any_pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple geometry predicates — st_any_pred","title":"Simple geometry predicates — st_any_pred","text":"Unlike functions sf like st_intersects, function simply returns logical vector indicating whether geometry x intersects (returns TRUE predicates) anything y, preferably y contains small number geometries one single MULTI geometry. useful cropping subsetting SFE object geometry, tissue boundary histological region polygons bounding box.","code":""},{"path":"/reference/st_any_pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple geometry predicates — st_any_pred","text":"","code":"st_any_pred(x, y, pred)  st_any_intersects(x, y)  st_n_pred(x, y, pred)  st_n_intersects(x, y)"},{"path":"/reference/st_any_pred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple geometry predicates — st_any_pred","text":"x object class sf, sfc, sfg. y Another object class sf, sfc, sfg. pred geometric binary predicate function, st_intersects. return object class sgbp, sparse predicates.","code":""},{"path":"/reference/st_any_pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple geometry predicates — st_any_pred","text":"st_any_*, logical vector indicating whether   geometry x intersects (predicates covered )   anything y. Simplified sgbp results   indicate item y item x intersects,   might always relevant. st_n_*, integer vector   indicating number geometries y returns TRUE geometry   x.","code":""},{"path":"/reference/st_any_pred.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple geometry predicates — st_any_pred","text":"","code":"library(sf) #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE pts <- st_sfc(     st_point(c(.5, .5)), st_point(c(1.5, 1.5)),     st_point(c(2.5, 2.5)) ) pol <- st_polygon(list(rbind(c(0, 0), c(2, 0), c(2, 2), c(0, 2), c(0, 0)))) st_any_pred(pts, pol, pred = st_disjoint) #> [1] FALSE FALSE  TRUE st_any_intersects(pts, pol) #> [1]  TRUE  TRUE FALSE st_n_pred(pts, pol, pred = st_disjoint) #> [1] 0 0 1 st_n_intersects(pts, pol) #> [1] 1 1 0"},{"path":"/reference/toExtImage.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert images to ExtImage — toExtImage","title":"Convert images to ExtImage — toExtImage","text":"ExtImage class thin wrapper around Image class ExtImage inherits VirtualSpatialImage required SpatialExperiment extent used Voyager's plotting functions. function converts SpatRasterImage (thin wrapper around class terra) BioFormatsImage ExtImage image operations implemented ExtImage package.","code":""},{"path":"/reference/toExtImage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert images to ExtImage — toExtImage","text":"","code":"# S4 method for BioFormatsImage toExtImage(x, resolution = 4L, channel = NULL)  # S4 method for SpatRasterImage toExtImage(x, maxcell = 1e+07, channel = NULL)"},{"path":"/reference/toExtImage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert images to ExtImage — toExtImage","text":"x Either BioFormatsImage SpatRasterImage object. resolution Integer, resolution BioFormatsImage read convert. Defaults 4, lower resolution. Ignored 1 resolution present. channel Integer vector indicate channel(s) read. NULL, channels read. maxcell Maximum number pixels SpatRasterImage read memory.","code":""},{"path":"/reference/toExtImage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert images to ExtImage — toExtImage","text":"ExtImage object. image loaded memory.","code":""},{"path":[]},{"path":"/reference/toSpatRasterImage.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert images to SpatRasterImage — toSpatRasterImage","title":"Convert images to SpatRasterImage — toSpatRasterImage","text":"resolution specified OME-TIFF file read memory written disk GeoTIFF file extent. output file file name input file except without ome extension.","code":""},{"path":"/reference/toSpatRasterImage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert images to SpatRasterImage — toSpatRasterImage","text":"","code":"# S4 method for ExtImage toSpatRasterImage(   x,   save_geotiff = TRUE,   file_out = \"img.tiff\",   overwrite = FALSE )  # S4 method for BioFormatsImage toSpatRasterImage(   x,   save_geotiff = TRUE,   resolution = 4L,   channel = NULL,   overwrite = FALSE )"},{"path":"/reference/toSpatRasterImage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert images to SpatRasterImage — toSpatRasterImage","text":"x Either BioFormatsImage EBIImage object. save_geotiff Logical, whether save image GeoTIFF file. file_out File save non-OME TIFF file SpatRaster. overwrite Logical, whether overwrite existing file name. resolution Integer, resolution BioFormatsImage read convert. Defaults 4, lower resolution. Ignored 1 resolution present. channel Integer vector indicate channel(s) read. NULL, channels read.","code":""},{"path":"/reference/toSpatRasterImage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert images to SpatRasterImage — toSpatRasterImage","text":"SpatRasterImage object","code":""},{"path":[]},{"path":"/reference/translateImg.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate/shift image in space — translateImg","title":"Translate/shift image in space — translateImg","text":"function shifts spatial extent image x-y plane.","code":""},{"path":"/reference/translateImg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate/shift image in space — translateImg","text":"","code":"# S4 method for SpatRasterImage translateImg(x, v, ...)  # S4 method for BioFormatsImage translateImg(x, v, ...)  # S4 method for ExtImage translateImg(x, v, ...)"},{"path":"/reference/translateImg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate/shift image in space — translateImg","text":"x object class *Image implemented package. v Numeric vector length 2 shift image x-y plane. ... Ignored. different methods can passed lapply method SFE objects. methods extra arguments.","code":""},{"path":"/reference/translateImg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate/shift image in space — translateImg","text":"*Image object class shifted   space.","code":""},{"path":[]},{"path":"/reference/transposeImg.html","id":null,"dir":"Reference","previous_headings":"","what":"Transpose images — transposeImg","title":"Transpose images — transposeImg","text":"Swap rows columns images. effect, flip image around diagonal running top left bottom right.","code":""},{"path":"/reference/transposeImg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transpose images — transposeImg","text":"","code":"# S4 method for SpatRasterImage transposeImg(x, filename = \"\", maxcell = NULL, ...)  # S4 method for BioFormatsImage transposeImg(x, ...)  # S4 method for ExtImage transposeImg(x, ...)"},{"path":"/reference/transposeImg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transpose images — transposeImg","text":"x object class *Image implemented package. filename Output file name transformed SpatRaster. maxcell Max number pixels load SpatRasterImage memory. default 1e7 chosen approximate number pixels medium resolution image resolution = 4L Xenium OME-TIFF make different methods function consistent. ... Ignored. different methods can passed lapply method SFE objects. methods extra arguments.","code":""},{"path":"/reference/transposeImg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transpose images — transposeImg","text":"SpatRasterImage ExtImage, object   class. BioFormatsImage, image specified resolution   read memory ExtImage method called, returning  ExtImage. extent: xmin xmax switched ymin   ymax.","code":""},{"path":[]},{"path":"/reference/unit-SpatialFeatureExperiment-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Get unit of a SpatialFeatureExperiment — unit,SpatialFeatureExperiment-method","title":"Get unit of a SpatialFeatureExperiment — unit,SpatialFeatureExperiment-method","text":"Length units can microns pixels full resolution image SFE objects.","code":""},{"path":"/reference/unit-SpatialFeatureExperiment-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get unit of a SpatialFeatureExperiment — unit,SpatialFeatureExperiment-method","text":"","code":"# S4 method for SpatialFeatureExperiment unit(x)"},{"path":"/reference/unit-SpatialFeatureExperiment-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get unit of a SpatialFeatureExperiment — unit,SpatialFeatureExperiment-method","text":"x SpatialFeatureExperiment object.","code":""},{"path":"/reference/unit-SpatialFeatureExperiment-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get unit of a SpatialFeatureExperiment — unit,SpatialFeatureExperiment-method","text":"string name unit. present merely   string udunits used.","code":""},{"path":"/reference/unit-SpatialFeatureExperiment-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get unit of a SpatialFeatureExperiment — unit,SpatialFeatureExperiment-method","text":"","code":"library(SFEData) sfe <- McKellarMuscleData(dataset = \"small\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache SpatialFeatureExperiment::unit(sfe) #> [1] \"full_res_image_pixels\""},{"path":"/reference/updateObject.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a SpatialFeatureExperiment object — updateObject","title":"Update a SpatialFeatureExperiment object — updateObject","text":"Update SpatialFeatureExperiment latest version object structure. usually called internal functions.","code":""},{"path":"/reference/updateObject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a SpatialFeatureExperiment object — updateObject","text":"","code":"# S4 method for SpatialFeatureExperiment updateObject(object, ..., verbose = FALSE)  SFEVersion(object)"},{"path":"/reference/updateObject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a SpatialFeatureExperiment object — updateObject","text":"object old SpatialFeatureExperiment object. ... Additional arguments ignored. verbose Logical scalar indicating whether message emitted object updated.","code":""},{"path":"/reference/updateObject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a SpatialFeatureExperiment object — updateObject","text":"updated version object.","code":""},{"path":"/reference/updateObject.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update a SpatialFeatureExperiment object — updateObject","text":"Version 1.1.4 adds package version SFE object. considering overhaul spatialGraphs slot future version using sfdep package decouple adjacency graph edge weights.","code":""},{"path":[]},{"path":"/reference/updateObject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update a SpatialFeatureExperiment object — updateObject","text":"","code":"library(SFEData) sfe <- McKellarMuscleData(\"small\") #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache # First version of SFE object doesn't log SFE package version, so should be NULL SFEVersion(sfe) #> [1] ‘1.6.1’ sfe <- updateObject(sfe) # See current version SFEVersion(sfe) #> [1] ‘1.6.1’"},{"path":"/reference/visium_row_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Row and columns of Visium barcodes on the slide — visium_row_col","title":"Row and columns of Visium barcodes on the slide — visium_row_col","text":"Space Ranger 1.3.1.","code":""},{"path":"/reference/visium_row_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row and columns of Visium barcodes on the slide — visium_row_col","text":"","code":"visium_row_col"},{"path":"/reference/visium_row_col.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Row and columns of Visium barcodes on the slide — visium_row_col","text":"data frame 4992 rows columns barcode, col, row.","code":""},{"path":"/reference/visium_row_col.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Row and columns of Visium barcodes on the slide — visium_row_col","text":"Space Ranger 1.3.1","code":""},{"path":"/news/index.html","id":"version-161-05092024","dir":"Changelog","previous_headings":"","what":"Version 1.6.1 (05/09/2024)","title":"Version 1.6.1 (05/09/2024)","text":"readRDS converts old style SpatRasterImage new style readSelectTx addSelectTx functions read transcript spots select genes parquet output formatTxSpots add SFE object Added formatTxTech addTxTech functions, basically thin wrappers formatTxSpots addTxSpots presets Vizgen, Xenium, CosMX","code":""},{"path":"/news/index.html","id":"version-160-04292024","dir":"Changelog","previous_headings":"","what":"Version 1.6.0 (04/29/2024)","title":"Version 1.6.0 (04/29/2024)","text":"Changed defaults sample_id = NULL sample_id = 1L dealing 1 sample “” dealing multiple samples dim method BioFormatsImage doesn’t load image memory Deal univariate spatial results featureData cbind changeSampleID Fixed super embarrassing bug cbind fails combining 2 SFE objects Updated readXenium XOA v2 Updated BioFormatsImage store affine transform info rather converting EBImage transform Speed affine transformation sf geometries sfheaders Coercion Seurat SFE SpatRasterImage EBImage directly inherit SpatRaster Image respectively user longer needs call imgRaster every time plots operates image, find really annoying. Changed name EBImage ExtImage reduce confusion Bug fixes image affine transformation Exporting util functions: aggBboxes, getPixelSize, imageIDs Read select genes rowGeometry add existing rowGeometry without erasing existing genes rowGeometry","code":""},{"path":"/news/index.html","id":"version-152-03042024","dir":"Changelog","previous_headings":"","what":"Version 1.5.2 (03/04/2024)","title":"Version 1.5.2 (03/04/2024)","text":"Added readXenium (XOA v1) Added BioFormatsImage EBImage classes deal Xenium OME-TIFF Conversion SpatRasterImage, BioFormatsImage, EBImage Overhaul geometry operation functions images SFE objects new image classes, including bbox, crop, affine transforms Don’t throw error rows columns left [ subsetting cbind multiple samples rowGeometry Rewrote df2df much faster sfheaders, deprecating less efficient BPPARAM argument","code":""},{"path":"/news/index.html","id":"version-151-02022024","dir":"Changelog","previous_headings":"","what":"Version 1.5.1 (02/02/2024)","title":"Version 1.5.1 (02/02/2024)","text":"Added support rowGeometry transcript spots Reformat transcript spot files Vizgen CosMX Improved readVizgen transcript spots Added readCosMX","code":""},{"path":"/news/index.html","id":"version-131-09222023","dir":"Changelog","previous_headings":"","what":"Version 1.3.1 (09/22/2023)","title":"Version 1.3.1 (09/22/2023)","text":"Refactored remove “missing” methods geometries, graphs, local results. Changed defaults sample_id = NULL sample_id = “” unless one sample can specified.","code":""},{"path":"/news/index.html","id":"version-123-08182023","dir":"Changelog","previous_headings":"","what":"Version 1.2.3 (08/18/2023)","title":"Version 1.2.3 (08/18/2023)","text":"Fixed bug Visium graph added filtered matrix one sample read read10xVisiumSFE. Changed way pixels converted microns Visium. Old way: use top left corner Visium spot array compute spacing spots, doesn’t work filtered data ’re singleton spots. New way: Use median row/col indices, robust ’re singletons. spacing used conversion, spot size found vary across datasets. Added saveRDS method SFE objects, SpatRaster images wrapped saving unwrapped fly ’re requested. Fixed bug wrong bounding boxes used crop images SFE object subsetted ’re multiple samples.","code":""},{"path":"/news/index.html","id":"version-122-07212023","dir":"Changelog","previous_headings":"","what":"Version 1.2.2 (07/21/2023)","title":"Version 1.2.2 (07/21/2023)","text":"Fixed embarrassing documentation mismatch localResults","code":""},{"path":"/news/index.html","id":"version-121-04262023","dir":"Changelog","previous_headings":"","what":"Version 1.2.1 (04/26/2023)","title":"Version 1.2.1 (04/26/2023)","text":"Fixed bug .check_features .symbol2id “symbol” column hard coded","code":""},{"path":"/news/index.html","id":"version-116-04202023","dir":"Changelog","previous_headings":"","what":"Version 1.1.6 (04/20/2023)","title":"Version 1.1.6 (04/20/2023)","text":"Read images SpatRaster, read10xVisiumSFE read10xVisiumSFE can also convert full resolution image pixels microns based Visium spot spacing read10xVisiumSFE longer transposes output read10xVisium spots match image default, consistent SpatialExperiment Read standard Vizgen MERFISH output readVizgen SpatRasterImage class inheriting VirtualSpatialImage SpatialExperiment compatibility Methods addImg, mirrorImg, transposeImg SpatRasterImage SFE Mirror transpose SFE objects, operating geometries images Images cropped SFE object cropped Images also shifted removeEmptySpace called","code":""},{"path":"/news/index.html","id":"version-114-03022023","dir":"Changelog","previous_headings":"","what":"Version 1.1.4 (03/02/2023)","title":"Version 1.1.4 (03/02/2023)","text":"Store SFE package version object added SFE method updateObject pave way potential reimplementation spatialGraphs.","code":""},{"path":"/news/index.html","id":"version-113-12202022","dir":"Changelog","previous_headings":"","what":"Version 1.1.3 (12/20/2022)","title":"Version 1.1.3 (12/20/2022)","text":"Use BiocNeighbors k nearest neighbors distance based neighbors, preserving distance info avoid slow step refind distances sf done spdep. Added swap_rownames argument localResult(s) getters gene symbols rowData column can used get local results stored Ensembl IDs.","code":""},{"path":"/news/index.html","id":"version-103-01112023","dir":"Changelog","previous_headings":"","what":"Version 1.0.3 (01/11/2023)","title":"Version 1.0.3 (01/11/2023)","text":"Correctly move geometries multiple samples Use translate = FALSE using localResult setter geometries helpful error messages geometries, localResult, spatial graphs absent","code":""},{"path":"/news/index.html","id":"version-102-12032022","dir":"Changelog","previous_headings":"","what":"Version 1.0.2 (12/03/2022)","title":"Version 1.0.2 (12/03/2022)","text":"Correctly move spatialCoords removeEmptySpace Preserve rownames setting colGeometry samples","code":""},{"path":"/news/index.html","id":"version-100-11022022","dir":"Changelog","previous_headings":"","what":"Version 1.0.0 (11/02/2022)","title":"Version 1.0.0 (11/02/2022)","text":"First version Bioconductor","code":""},{"path":"/news/index.html","id":"version-0994-09072022","dir":"Changelog","previous_headings":"","what":"Version 0.99.4 (09/07/2022)","title":"Version 0.99.4 (09/07/2022)","text":"Added  field Also reimplemented internals behind","code":""},{"path":"/news/index.html","id":"version-0990-02092022","dir":"Changelog","previous_headings":"","what":"Version 0.99.0 (02/09/2022)","title":"Version 0.99.0 (02/09/2022)","text":"Hello world! personal record, package submitted Bioconductor July 22","code":""}]
