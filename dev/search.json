[{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/articles/SFE.html","id":"introduction","dir":"Articles","previous_headings":"Class structure","what":"Introduction","title":"Introduction to the SpatialFeatureExperiment class","text":"SpatialFeatureExperiment (SFE) new S4 class built top SpatialExperiment (SPE). SpatialFeatureExperiment incorporates geometries geometry operations sf package. Examples supported geometries Visium spots represented polygons corresponding size, cell nuclei segmentation polygons, tissue boundary polygons, pathologist annotation histological regions, transcript spots genes. Using sf, SpatialFeatureExperiment leverages GEOS C++ libraries underlying sf geometry operations, including algorithms determining whether geometries intersect, finding intersection geometries, buffering geometries margins, etc. schematic SFE object shown : Schematics SFE object list SFE features extend SPE object: colGeometries sf data frames associated entities correspond columns gene count matrix, Visium spots cells. geometries sf data frames can Visium spot centroids, Visium spot polygons, datasets single cell resolution, cell nuclei segmentations. Multiple colGeometries can stored SFE object, one cell segmentation another nuclei segmentation. can non-spatial, attribute columns colGeometry rather colData, sf class allows users specify attributes relate geometries, “constant”, “aggregate”, “identity”. See agr argument st_sf documentation. colGraphs spatial neighborhood graphs cells spots. graphs class listw (spdep package), colPairs SingleCellExperiment used conversion necessary use numerous spatial dependency functions spdep, Moran’s , Geary’s C, Getis-Ord Gi*, LOSH, etc. Conversion also needed classical spatial statistics packages spatialreg adespatial. rowGeometries similar colGeometries, support entities correspond rows gene count matrix, genes. potential use case store transcript spots gene smFISH situ sequencing based datasets. rowGraphs similar colGraphs. potential use case may spatial colocalization transcripts different genes. annotGeometries sf data frames associated dataset directly gene count matrix, tissue boundaries, histological regions, cell nuclei segmentation Visium datasets, etc. geometries stored object facilitate plotting using sf operations find number nuclei Visium spot histological regions Visium spot intersects. Unlike colGeometries rowGeometries, number rows sf data frames annotGeometries constrained dimension gene count matrix can arbitrary. annotGraphs similar colGraphs rowGraphs, entities directly associated gene count matrix, spatial neighborhood graphs nuclei Visium datasets, objects like myofibers. graphs relevant spdep analyses attributes geometries spatial autocorrelation morphological metrics myofibers nuclei. geometry operations sf, attributes results analyses attributes (e.g. spatial regions defined attributes) may related back gene expression.","code":"library(SpatialFeatureExperiment) library(SpatialExperiment) #> Loading required package: SingleCellExperiment #> Loading required package: SummarizedExperiment #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: 'MatrixGenerics' #> The following objects are masked from 'package:matrixStats': #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: 'BiocGenerics' #> The following objects are masked from 'package:stats': #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from 'package:base': #>  #>     anyDuplicated, append, as.data.frame, basename, cbind, colnames, #>     dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep, #>     grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget, #>     order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank, #>     rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply, #>     union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: 'S4Vectors' #> The following objects are masked from 'package:base': #>  #>     expand.grid, I, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: 'Biobase' #> The following object is masked from 'package:MatrixGenerics': #>  #>     rowMedians #> The following objects are masked from 'package:matrixStats': #>  #>     anyMissing, rowMedians library(SFEData) library(sf) #> Linking to GEOS 3.8.0, GDAL 3.0.4, PROJ 6.3.1; sf_use_s2() is TRUE library(Matrix) #>  #> Attaching package: 'Matrix' #> The following object is masked from 'package:S4Vectors': #>  #>     expand # Example dataset (sfe <- McKellarMuscleData(dataset = \"small\")) #> snapshotDate(): 2022-08-23 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache #> class: SpatialFeatureExperiment  #> dim: 15123 77  #> metadata(0): #> assays(1): counts #> rownames(15123): ENSMUSG00000025902 ENSMUSG00000096126 ... #>   ENSMUSG00000064368 ENSMUSG00000064370 #> rowData names(6): Ensembl symbol ... vars cv2 #> colnames(77): AAATTACCTATCGATG AACATATCAACTGGTG ... TTCTTTGGTCGCGACG #>   TTGATGTGTAGTCCCG #> colData names(12): barcode col ... prop_mito in_tissue #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : imageX imageY #> imgData names(1): sample_id #>  #> Geometries: #> colGeometries: spotPoly (POLYGON)  #> annotGeometries: tissueBoundary (POLYGON), myofiber_full (GEOMETRY), myofiber_simplified (GEOMETRY), nuclei (POLYGON), nuclei_centroid (POINT)  #>  #> Graphs: #> Vis5A:"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/articles/SFE.html","id":"geometries","dir":"Articles","previous_headings":"Class structure","what":"Geometries","title":"Introduction to the SpatialFeatureExperiment class","text":"User interfaces get set geometries spatial graphs emulate reducedDims row/colPairs SingleCellExperiment. Column row geometries also emulate reducedDims internal implementation, annotation geometries spatial graphs differ.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/articles/SFE.html","id":"column-and-row","dir":"Articles","previous_headings":"Class structure > Geometries","what":"Column and row","title":"Introduction to the SpatialFeatureExperiment class","text":"Column row geometries can get set dimGeometries dimGeometry function. MARGIN argument apply function: MARGIN = 1 means row, MARGIN = 2 means column. dimGeometry gets sets one particular geometry name index.  dimGeometries gets sets geometry given margin. dimGeometryNames gets sets names geometries colGeometry(sfe, \"spotPoly\"), colGeometries(sfe), colGeometryNames(sfe) shorthands dimGeometry(sfe, \"spotPoly\", MARGIN = 2), dimGeometries(sfe, MARGIN = 2), dimGeometryNames(sfe, MARGIN = 2) respectively. Similarly, rowGeometr*(sfe, ...) shorthand dimGeometr*(sfe, ..., MARGIN = 1). shorthands specific column row geometries. example, spotPoly(sfe) equivalent colGeometry(sfe, \"spotPoly\") Visium spot polygons, txSpots(sfe) equivalent rowGeometry(sfe, \"txSpots\") transcript spots single molecule technologies.","code":"# Get Visium spot polygons (spots <- dimGeometry(sfe, \"spotPoly\", MARGIN = 2)) #> Simple feature collection with 77 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 5000 ymin: 13000 xmax: 7000 ymax: 15000 #> CRS:           NA #> First 10 features: #>                                        geometry sample_id #> AAATTACCTATCGATG POLYGON ((6472.186 13875.23...     Vis5A #> AACATATCAACTGGTG POLYGON ((5778.291 13635.43...     Vis5A #> AAGATTGGCGGAACGT POLYGON ((7000 13809.84, 69...     Vis5A #> AAGGGACAGATTCTGT POLYGON ((6749.535 13874.64...     Vis5A #> AATATCGAGGGTTCTC POLYGON ((5500.941 13636.03...     Vis5A #> AATGATGATACGCTAT POLYGON ((6612.42 14598.82,...     Vis5A #> AATGATGCGACTCCTG POLYGON ((5501.981 14118.62...     Vis5A #> AATTCATAAGGGATCT POLYGON ((6889.769 14598.22...     Vis5A #> ACGAGTACGGATGCCC POLYGON ((5084.397 13395.63...     Vis5A #> ACGCTAGTGATACACT POLYGON ((5639.096 13394.44...     Vis5A plot(st_geometry(spots)) # Setter dimGeometry(sfe, \"foobar\", MARGIN = 2) <- spots # Getter, all geometries of one margin (cgs <- dimGeometries(sfe, MARGIN = 2)) #> List of length 2 #> names(2): spotPoly foobar # Setter, all geometries dimGeometries(sfe, MARGIN = 2) <- cgs (cg_names <- dimGeometryNames(sfe, MARGIN = 2)) #> [1] \"spotPoly\" \"foobar\" # Setter dimGeometryNames(sfe, MARGIN = 2) <- cg_names # Getter (spots <- spotPoly(sfe)) #> Simple feature collection with 77 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 5000 ymin: 13000 xmax: 7000 ymax: 15000 #> CRS:           NA #> First 10 features: #>                                        geometry sample_id #> AAATTACCTATCGATG POLYGON ((6472.186 13875.23...     Vis5A #> AACATATCAACTGGTG POLYGON ((5778.291 13635.43...     Vis5A #> AAGATTGGCGGAACGT POLYGON ((7000 13809.84, 69...     Vis5A #> AAGGGACAGATTCTGT POLYGON ((6749.535 13874.64...     Vis5A #> AATATCGAGGGTTCTC POLYGON ((5500.941 13636.03...     Vis5A #> AATGATGATACGCTAT POLYGON ((6612.42 14598.82,...     Vis5A #> AATGATGCGACTCCTG POLYGON ((5501.981 14118.62...     Vis5A #> AATTCATAAGGGATCT POLYGON ((6889.769 14598.22...     Vis5A #> ACGAGTACGGATGCCC POLYGON ((5084.397 13395.63...     Vis5A #> ACGCTAGTGATACACT POLYGON ((5639.096 13394.44...     Vis5A # Setter spotPoly(sfe) <- spots"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/articles/SFE.html","id":"annotation","dir":"Articles","previous_headings":"Class structure > Geometries","what":"Annotation","title":"Introduction to the SpatialFeatureExperiment class","text":"Annotation geometries can get set annotGeometries annotGeometry. column row geometries, number rows sf data frame (.e. number geometries data frame) constrained number rows columns gene count matrix respectively, just like rowData colData, row rowGeometry colGeometry sf data frame must correspond row column gene count matrix respectively. contrast, annotGeometry sf data frame can dimension, constrained dimension gene count matrix. Similar column row geometries, annotation geometries annotGeometry, annotGeometries, annotGeometryNames getters setters.  shorthands specific annotation geometries. example, tissueBoundary(sfe) equivalent annotGeometry(sfe, \"tissueBoundary\"). cellSeg() (cell segmentation) nucSeg() (nuclei segmentation) first query colGeometries (single cell, single molecule technologies, equivalent colGeometry(sfe, \"cellSeg\") colGeometry(sfe, \"nucSeg\")), found, query annotGeometries (array capture microdissection technologies, equivalent annotGeometry(sfe, \"cellSeg\") annotGeometry(sfe, \"nucSeg\")).","code":"# Getter, by name or index (tb <- annotGeometry(sfe, \"tissueBoundary\")) #> Simple feature collection with 1 feature and 2 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 5094 ymin: 13000 xmax: 7000 ymax: 14969 #> CRS:           NA #>   ID                       geometry sample_id #> 7  7 POLYGON ((5094 13000, 5095 ...     Vis5A plot(st_geometry(tb)) # Setter, by name or index annotGeometry(sfe, \"tissueBoundary\") <- tb # Get all annoation geometries as named list ags <- annotGeometries(sfe) # Set all annotation geometries with a named list annotGeometries(sfe) <- ags # Get names of annotation geometries (ag_names <- annotGeometryNames(sfe)) #> [1] \"tissueBoundary\"      \"myofiber_full\"       \"myofiber_simplified\" #> [4] \"nuclei\"              \"nuclei_centroid\" # Set names annotGeometryNames(sfe) <- ag_names # Getter (tb <- tissueBoundary(sfe)) #> Simple feature collection with 1 feature and 2 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 5094 ymin: 13000 xmax: 7000 ymax: 14969 #> CRS:           NA #>   ID                       geometry sample_id #> 7  7 POLYGON ((5094 13000, 5095 ...     Vis5A # Setter tissueBoundary(sfe) <- tb"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/articles/SFE.html","id":"spatial-graphs","dir":"Articles","previous_headings":"Class structure","what":"Spatial graphs","title":"Introduction to the SpatialFeatureExperiment class","text":"Column, row, annotation spatial graphs can get set spatialGraphs spatialGraph functions. Similar dimGeometr* functions, spatialGraph* functions MARGIN argument. However, since internally, row column geometries implemented differently annotation geometries, row, column, annotation graphs implemented way, spatialGraph* functions, MARGIN = 1 means rows, MARGIN = 2 means columns, MARGIN = 3 means annotation. Similar dimGeometry* functions, rowGraph*, colGraph*, annotGraph* getter setter functions margin. package wraps functions spdep package find spatial neighborhood graphs. example, triangulation used find spatial graph; many methods also supported, k nearest neighbors, distance based neighbors, polygon contiguity.  Visium, spatial neighborhood graph hexagonal grid can found known locations barcodes.  graphs SFE object, specified, margin interest, can get set spatialGraphs margin specific wrappers. Similar dimGeometries, graphs spatialGraphNames getter setter margin specific wrappers.","code":"(g <- findSpatialNeighbors(sfe, MARGIN = 2, method = \"tri2nb\")) #> Characteristics of weights list object: #> Neighbour list object: #> Number of regions: 77  #> Number of nonzero links: 428  #> Percentage nonzero weights: 7.218755  #> Average number of links: 5.558442  #>  #> Weights style: W  #> Weights constants summary: #>    n   nn S0      S1       S2 #> W 77 5929 77 28.0096 309.4083 plot(g, coords = spatialCoords(sfe)) # Set graph by name spatialGraph(sfe, \"graph1\", MARGIN = 2) <- g # Or equivalently colGraph(sfe, \"graph1\") <- g # Get graph by name g <- spatialGraph(sfe, \"graph1\", MARGIN = 2L) # Or equivalently g <- colGraph(sfe, \"graph1\") g #> Characteristics of weights list object: #> Neighbour list object: #> Number of regions: 77  #> Number of nonzero links: 428  #> Percentage nonzero weights: 7.218755  #> Average number of links: 5.558442  #>  #> Weights style: W  #> Weights constants summary: #>    n   nn S0      S1       S2 #> W 77 5929 77 28.0096 309.4083 colGraph(sfe, \"visium\") <- findVisiumGraph(sfe) plot(colGraph(sfe, \"visium\"), coords = spatialCoords(sfe)) colGraphs(sfe) #> $col #> Characteristics of weights list object: #> Neighbour list object: #> Number of regions: 77  #> Number of nonzero links: 428  #> Percentage nonzero weights: 7.218755  #> Average number of links: 5.558442  #>  #> Weights style: W  #> Weights constants summary: #>    n   nn S0      S1       S2 #> W 77 5929 77 28.0096 309.4083 colGraphNames(sfe) #> [1] \"graph1\" \"visium\""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/articles/SFE.html","id":"multiple-samples","dir":"Articles","previous_headings":"Class structure","what":"Multiple samples","title":"Introduction to the SpatialFeatureExperiment class","text":"Thus far, example dataset used one sample. SpatialExperiment (SPE) object special column colData called sample_id, data multiple tissue sections can coexist SPE object joint dimension reduction clustering keeping spatial coordinates separate. ’s important keep spatial coordinates different tissue sections separate first, coordinates make sense within section, second, coordinates different sections can overlapping numeric values. SFE inherits SPE, geometries spatial graphs, sample_id even important. geometry graph getter setter functions sample_id argument, optional one sample present SFE object. argument mandatory multiple samples present, can character vector multiple samples “” samples. examples using getters setters multiple samples. Use sampleIDs function see names samples Sample IDs can also changed, changeSampleIDs function, named vector whose names old names values new names.","code":"# Construct toy dataset with 2 samples sfe1 <- McKellarMuscleData(dataset = \"small\") #> snapshotDate(): 2022-08-23 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache sfe2 <- McKellarMuscleData(dataset = \"small2\") #> snapshotDate(): 2022-08-23 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache spotPoly(sfe2)$sample_id <- \"sample02\" (sfe_combined <- cbind(sfe1, sfe2)) #> class: SpatialFeatureExperiment  #> dim: 15123 149  #> metadata(0): #> assays(1): counts #> rownames(15123): ENSMUSG00000025902 ENSMUSG00000096126 ... #>   ENSMUSG00000064368 ENSMUSG00000064370 #> rowData names(6): Ensembl symbol ... vars cv2 #> colnames(149): AAATTACCTATCGATG AACATATCAACTGGTG ... TTCCTCGGACTAACCA #>   TTCTGACCGGGCTCAA #> colData names(12): barcode col ... prop_mito in_tissue #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : imageX imageY #> imgData names(1): sample_id #>  #> Geometries: #> colGeometries: spotPoly (POLYGON)  #> annotGeometries: tissueBoundary (GEOMETRY), myofiber_full (GEOMETRY), myofiber_simplified (GEOMETRY), nuclei (POLYGON), nuclei_centroid (POINT)  #>  #> Graphs: #> Vis5A:  #> sample02: sampleIDs(sfe_combined) #> [1] \"Vis5A\"    \"sample02\" # Only get the geometries for the second sample (spots2 <- colGeometry(sfe_combined, \"spotPoly\", sample_id = \"sample02\")) #> Simple feature collection with 72 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 6000 ymin: 7025.865 xmax: 8000 ymax: 9000 #> CRS:           NA #> First 10 features: #>                  sample_id                       geometry #> AACACACGCTCGCCGC  sample02 POLYGON ((6597.869 7842.575... #> AACCGCTAAGGGATGC  sample02 POLYGON ((6724.811 9000, 67... #> AACGCTGTTGCTGAAA  sample02 POLYGON ((6457.635 7118.991... #> AACGGACGTACGTATA  sample02 POLYGON ((6737.064 8083.571... #> AATAGAATCTGTTTCA  sample02 POLYGON ((7570.153 8564.368... #> ACAAATCGCACCGAAT  sample02 POLYGON ((8000 7997.001, 79... #> ACAATTGTGTCTCTTT  sample02 POLYGON ((6043.169 7843.77,... #> ACAGGCTTGCCCGACT  sample02 POLYGON ((7428.88 7358.195,... #> ACCAGTGCGGGAGACG  sample02 POLYGON ((6460.753 8566.757... #> ACCCTCCCTTGCTATT  sample02 POLYGON ((7847.503 8563.771... # Only set the geometries for the second sample # Leaving geometries of the first sample intact colGeometry(sfe_combined, \"spotPoly\", sample_id = \"sample02\") <- spots2 # Set graph only for the second sample colGraph(sfe_combined, \"foo\", sample_id = \"sample02\") <-    findSpatialNeighbors(sfe_combined, sample_id = \"sample02\") # Get graph only for the second sample colGraph(sfe_combined, \"foo\", sample_id = \"sample02\") #> Characteristics of weights list object: #> Neighbour list object: #> Number of regions: 72  #> Number of nonzero links: 406  #> Percentage nonzero weights: 7.83179  #> Average number of links: 5.638889  #>  #> Weights style: W  #> Weights constants summary: #>    n   nn S0       S1       S2 #> W 72 5184 72 25.82104 289.8299 # Set graph of the same name for both samples # The graphs are computed separately for each sample colGraphs(sfe_combined, sample_id = \"all\", name = \"visium\") <-    findVisiumGraph(sfe_combined, sample_id = \"all\") # Get multiple graphs of the same name colGraphs(sfe_combined, sample_id = \"all\", name = \"visium\") #> $Vis5A #> Characteristics of weights list object: #> Neighbour list object: #> Number of regions: 77  #> Number of nonzero links: 394  #> Percentage nonzero weights: 6.645303  #> Average number of links: 5.116883  #>  #> Weights style: W  #> Weights constants summary: #>    n   nn S0       S1       S2 #> W 77 5929 77 31.68056 311.7544 #>  #> $sample02 #> Characteristics of weights list object: #> Neighbour list object: #> Number of regions: 72  #> Number of nonzero links: 366  #> Percentage nonzero weights: 7.060185  #> Average number of links: 5.083333  #>  #> Weights style: W  #> Weights constants summary: #>    n   nn S0       S1       S2 #> W 72 5184 72 29.83889 291.5833 # Or just all graphs of the margin colGraphs(sfe_combined, sample_id = \"all\") #> $Vis5A #> $Vis5A$visium #> Characteristics of weights list object: #> Neighbour list object: #> Number of regions: 77  #> Number of nonzero links: 394  #> Percentage nonzero weights: 6.645303  #> Average number of links: 5.116883  #>  #> Weights style: W  #> Weights constants summary: #>    n   nn S0       S1       S2 #> W 77 5929 77 31.68056 311.7544 #>  #>  #> $sample02 #> $sample02$foo #> Characteristics of weights list object: #> Neighbour list object: #> Number of regions: 72  #> Number of nonzero links: 406  #> Percentage nonzero weights: 7.83179  #> Average number of links: 5.638889  #>  #> Weights style: W  #> Weights constants summary: #>    n   nn S0       S1       S2 #> W 72 5184 72 25.82104 289.8299 #>  #> $sample02$visium #> Characteristics of weights list object: #> Neighbour list object: #> Number of regions: 72  #> Number of nonzero links: 366  #> Percentage nonzero weights: 7.060185  #> Average number of links: 5.083333  #>  #> Weights style: W  #> Weights constants summary: #>    n   nn S0       S1       S2 #> W 72 5184 72 29.83889 291.5833 sfe_combined <- changeSampleIDs(sfe, replacement = c(Vis5A = \"foo\", sample02 = \"bar\")) sfe_combined #> class: SpatialFeatureExperiment  #> dim: 15123 77  #> metadata(0): #> assays(1): counts #> rownames(15123): ENSMUSG00000025902 ENSMUSG00000096126 ... #>   ENSMUSG00000064368 ENSMUSG00000064370 #> rowData names(6): Ensembl symbol ... vars cv2 #> colnames(77): AAATTACCTATCGATG AACATATCAACTGGTG ... TTCTTTGGTCGCGACG #>   TTGATGTGTAGTCCCG #> colData names(12): barcode col ... prop_mito in_tissue #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : imageX imageY #> imgData names(1): sample_id #>  #> Geometries: #> colGeometries: spotPoly (POLYGON), foobar (POLYGON)  #> annotGeometries: tissueBoundary (POLYGON), myofiber_full (GEOMETRY), myofiber_simplified (GEOMETRY), nuclei (POLYGON), nuclei_centroid (POINT)  #>  #> Graphs: #> foo: col: graph1, visium"},{"path":[]},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/articles/SFE.html","id":"from-scratch","dir":"Articles","previous_headings":"Object construction","what":"From scratch","title":"Introduction to the SpatialFeatureExperiment class","text":"SFE object can constructed scratch assay matrices metadata. toy example, dgCMatrix used, since SFE inherits SingleCellExperiment (SCE), types arrays supported SCE delayed arrays also work. sufficient create SPE object, SFE object, even though sf data frame constructed geometries. constructor behaves similarly SPE constructor. centroid coordinates Visium spots toy example can converted spot polygons spotDiameter argument. Spot diameter pixels full resolution image can found scalefactors_json.json file Space Ranger output. geometries spatial graphs can added calling constructor. Geometries can also supplied constructor.","code":"# Visium barcode location from Space Ranger data(\"visium_row_col\") coords1 <- visium_row_col[visium_row_col$col < 6 & visium_row_col$row < 6,] coords1$row <- coords1$row * sqrt(3)  # Random toy sparse matrix set.seed(29) col_inds <- sample(1:13, 13) row_inds <- sample(1:5, 13, replace = TRUE) values <- sample(1:5, 13, replace = TRUE) mat <- sparseMatrix(i = row_inds, j = col_inds, x = values) colnames(mat) <- coords1$barcode rownames(mat) <- sample(LETTERS, 5) sfe3 <- SpatialFeatureExperiment(list(counts = mat), colData = coords1,                                 spatialCoordsNames = c(\"col\", \"row\"),                                 spotDiameter = 0.7) # Convert regular data frame with coordinates to sf data frame cg <- df2sf(coords1[,c(\"col\", \"row\")], c(\"col\", \"row\"), spotDiameter = 0.7) rownames(cg) <- colnames(mat) sfe3 <- SpatialFeatureExperiment(list(counts = mat), colGeometries = list(foo = cg))"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/articles/SFE.html","id":"space-ranger-output","dir":"Articles","previous_headings":"Object construction","what":"Space Ranger output","title":"Introduction to the SpatialFeatureExperiment class","text":"Space Ranger output can read similar manner SpatialExperiment; returned SFE object spotPoly column geometry spot polygons. filtered matrix read , column graph called visium also present, spatial neighborhood graph Visium spots tissue. graph computed spots read regardless whether tissue.","code":"# Example from SpatialExperiment dir <- system.file(   file.path(\"extdata\", \"10xVisium\"),    package = \"SpatialExperiment\")    sample_ids <- c(\"section1\", \"section2\") samples <- file.path(dir, sample_ids, \"outs\")    list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\" list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/home/runner/work/_temp/Library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" (sfe3 <- read10xVisiumSFE(samples, sample_ids, type = \"sparse\", data = \"raw\",                          load = FALSE)) #> class: SpatialFeatureExperiment  #> dim: 50 99  #> metadata(0): #> assays(1): counts #> rownames(50): ENSMUSG00000051951 ENSMUSG00000089699 ... #>   ENSMUSG00000005886 ENSMUSG00000101476 #> rowData names(1): symbol #> colnames(99): AAACAACGAATAGTTC-1 AAACAAGTATCTCCCA-1 ... #>   AAAGTCGACCCTCAGT-1-1 AAAGTGCCATCAATTA-1-1 #> colData names(4): in_tissue array_row array_col sample_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : pxl_row_in_fullres pxl_col_in_fullres #> imgData names(4): sample_id image_id data scaleFactor #>  #> Geometries: #> colGeometries: spotPoly (POLYGON)  #> annotGeometries:  ()  #>  #> Graphs: #> section1:  #> section2:"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/articles/SFE.html","id":"coercion-from-spatialexperiment","dir":"Articles","previous_headings":"Object construction","what":"Coercion from SpatialExperiment","title":"Introduction to the SpatialFeatureExperiment class","text":"SPE objects can coerced SFE objects. column geometries spot diameter specified, column geometry called “centroids” created. coercion, column names must duplicate.","code":"spe <- read10xVisium(samples, sample_ids, type = \"sparse\", data = \"raw\",    images = \"lowres\", load = FALSE) colnames(spe) <- make.unique(colnames(spe), sep = \"-\") rownames(spatialCoords(spe)) <- colnames(spe) (sfe3 <- toSpatialFeatureExperiment(spe)) #> class: SpatialFeatureExperiment  #> dim: 50 99  #> metadata(0): #> assays(1): counts #> rownames(50): ENSMUSG00000051951 ENSMUSG00000089699 ... #>   ENSMUSG00000005886 ENSMUSG00000101476 #> rowData names(1): symbol #> colnames(99): AAACAACGAATAGTTC-1 AAACAAGTATCTCCCA-1 ... #>   AAAGTCGACCCTCAGT-1-1 AAAGTGCCATCAATTA-1-1 #> colData names(4): in_tissue array_row array_col sample_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : pxl_col_in_fullres pxl_row_in_fullres #> imgData names(4): sample_id image_id data scaleFactor #>  #> Geometries: #> colGeometries: centroids (POINT)  #> annotGeometries:  ()  #>  #> Graphs: #> section1:  #> section2:"},{"path":[]},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/articles/SFE.html","id":"non-geometric","dir":"Articles","previous_headings":"Operations","what":"Non-geometric","title":"Introduction to the SpatialFeatureExperiment class","text":"SFE objects can concatenated cbind, done just now create toy example 2 samples. SFE object can also subsetted like matrix, like SCE object. complexity arises comes spatial graphs. drop argument SFE method [ determines spatial graphs. drop = TRUE, spatial graphs removed, since graphs nodes edges removed longer valid. drop = FALSE, default, spatial graphs reconstructed remaining nodes subsetting. Reconstruction work original graphs constructed findSpatialNeighbors findVisiumGraph package, records method parameters used construct graphs. reconstruction fails, waning issued graphs removed.","code":"sfe_combined <- cbind(sfe1, sfe2) (sfe_subset <- sfe[1:10, 1:10, drop = TRUE]) #> Node indices in the graphs are no longer valid after subsetting. Dropping all row and col graphs. #> class: SpatialFeatureExperiment  #> dim: 10 10  #> metadata(0): #> assays(1): counts #> rownames(10): ENSMUSG00000025902 ENSMUSG00000096126 ... #>   ENSMUSG00000090031 ENSMUSG00000033740 #> rowData names(6): Ensembl symbol ... vars cv2 #> colnames(10): AAATTACCTATCGATG AACATATCAACTGGTG ... ACGAGTACGGATGCCC #>   ACGCTAGTGATACACT #> colData names(12): barcode col ... prop_mito in_tissue #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : imageX imageY #> imgData names(1): sample_id #>  #> Geometries: #> colGeometries: spotPoly (POLYGON), foobar (POLYGON)  #> annotGeometries: tissueBoundary (POLYGON), myofiber_full (GEOMETRY), myofiber_simplified (GEOMETRY), nuclei (POLYGON), nuclei_centroid (POINT)  #>  #> Graphs: #> Vis5A: # Will give warning because graph reconstruction fails sfe_subset <- sfe[1:10, 1:10]"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/articles/SFE.html","id":"geometric","dir":"Articles","previous_headings":"Operations","what":"Geometric","title":"Introduction to the SpatialFeatureExperiment class","text":"Just like sf data frames, SFE objects can subsetted geometry predicate relating geometries. example, Visium spots read SFE object regardless whether tissue, tissueBoundary annotation geometry provided, tissue boundary geometry can used subset SFE object obtain new SFE object spots tissue. Loupe give tissue boundary polygon; polygon can obtained thresholding H&E image converting mask polygons OpenCV terra R package, manual annotation QuPath LabKit (latter needs converted polygon). Use crop function directly get subsetted SFE object. Note version package, crop crop image.  Note large datasets many geometries, cropping can take run.  crop can also used conventional sense cropping, .e. specifying bounding box. colGeometryName used determine columns gene count matrix keep. geometries SFE object subsetted portions intersecting y bounding box kept. Since intersection operation can produce mixture geometry types, intersection two polygons producing polygons, points, lines, geometry types sf data frames subsetting may different originals. cropping done independently sample_id, sample_ids specified. , sample_id optional one sample SFE object. Geometry predicates operations can also performed return results without subsetting SFE object. example, one may want logical vector indicating whether Visium spot intersects tissue, numeric vector many nuclei Visium spot. get intersections Visium spot nuclei. , geometry predicates operations performed independently sample, sample_id argument optional one sample. Sometimes spatial coordinates different samples can take different values. values can made comparable moving tissues bottom left corner bounding box origin, facilitate plotting comparison across samples geom_sf facet_*. find bounding box geometries sample SFE object: move coordinates: original bounding box moving stored within SFE object, can read dimGeometry setters newly added geometries can coordinates moved well; behavior can turned optional argument translate = FALSE dimGeometry setters.","code":"# Before plot(st_geometry(tissueBoundary(sfe))) plot(spotPoly(sfe), col = \"gray\", add = TRUE) sfe_in_tissue <- crop(sfe, y = tissueBoundary(sfe), colGeometryName = \"spotPoly\") # After plot(st_geometry(tissueBoundary(sfe))) plot(spotPoly(sfe_in_tissue), col = \"gray\", add = TRUE) sfe_cropped <- crop(sfe, colGeometryName = \"spotPoly\", sample_id = \"Vis5A\",                     xmin = 5500, xmax = 6500, ymin = 13500, ymax = 14500) # Get logical vector colData(sfe)$in_tissue <- annotPred(sfe, colGeometryName = \"spotPoly\",                                      annotGeometryName = \"tissueBoundary\",                                     sample_id = \"Vis5A\") # Get the number of nuclei per Visium spot colData(sfe)$n_nuclei <- annotNPred(sfe, \"spotPoly\", annotGeometryName = \"nuclei\") # Get geometries of intersections of Visium spots and myofibers spot_intersections <- annotOp(sfe, colGeometryName = \"spotPoly\",                                annotGeometryName = \"myofiber_simplified\") bbox(sfe, sample_id = \"Vis5A\") #>  xmin  ymin  xmax  ymax  #>  5000 13000  7000 15000 sfe_moved <- removeEmptySpace(sfe, sample_id = \"Vis5A\")"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/articles/SFE.html","id":"limitations-and-future-directions","dir":"Articles","previous_headings":"","what":"Limitations and future directions","title":"Introduction to the SpatialFeatureExperiment class","text":"limitations current version SFE: 1. integrating sf, designed vector spatial data (specifying coordinates points, lines, polygons vertices), SFE supports vector data geometries, raster (like image, value pixel) supported. Vector chosen, memory efficient way represent cell nuclei segmentation raster map. 2. spatial graphs listw objects conversion necessary use well-established spatial statistical methods spdep, spatialreg, adespatial packages. However, igraph implements many graph analysis methods, conversion required use . Whether future versions SFE stick listw depends importance methods use spatial graphs igraph class. 3. Simple Features support 3D spatiotemporal coordinates, geospatial resources SFE leverages sf 2D data. 4. Spatial point process analysis spatstat package may relevant, analyzing spatial distribution nuclei transcript spots. spatstat predates sf decade, spatstat play nicely sf. However, since analyses nuclei transcript spot localization don’t center gene count matrix, whether spatstat analyses integrated SFE (centered gene count matrix) questionable. 5. Geometries large datasets can get large. disk operations geometries considered. geospatial field already disk tools vector raster data. far, SFE tested data fit memory. 6. Setting units length SFE object converting units. can make geometries different samples datasets comparable, helpful plotting scale bars plotting geometries.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/articles/SFE.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Introduction to the SpatialFeatureExperiment class","text":"","code":"sessionInfo() #> R version 4.2.1 (2022-06-23) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 20.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] Matrix_1.4-1                    sf_1.0-8                        #>  [3] SFEData_0.99.2                  SpatialExperiment_1.7.2         #>  [5] SingleCellExperiment_1.19.0     SummarizedExperiment_1.27.2     #>  [7] Biobase_2.57.1                  GenomicRanges_1.49.1            #>  [9] GenomeInfoDb_1.33.5             IRanges_2.31.2                  #> [11] S4Vectors_0.35.1                BiocGenerics_0.43.1             #> [13] MatrixGenerics_1.9.1            matrixStats_0.62.0              #> [15] SpatialFeatureExperiment_0.99.0 BiocStyle_2.25.0                #>  #> loaded via a namespace (and not attached): #>   [1] rjson_0.2.21                  deldir_1.0-6                  #>   [3] ellipsis_0.3.2                class_7.3-20                  #>   [5] rprojroot_2.0.3               scuttle_1.7.4                 #>   [7] XVector_0.37.0                fs_1.5.2                      #>   [9] proxy_0.4-27                  bit64_4.0.5                   #>  [11] AnnotationDbi_1.59.1          interactiveDisplayBase_1.35.0 #>  [13] fansi_1.0.3                   codetools_0.2-18              #>  [15] R.methodsS3_1.8.2             sparseMatrixStats_1.9.0       #>  [17] cachem_1.0.6                  knitr_1.40                    #>  [19] jsonlite_1.8.0                dbplyr_2.2.1                  #>  [21] png_0.1-7                     R.oo_1.25.0                   #>  [23] shiny_1.7.2                   HDF5Array_1.25.2              #>  [25] httr_1.4.4                    BiocManager_1.30.18           #>  [27] compiler_4.2.1                dqrng_0.3.0                   #>  [29] assertthat_0.2.1              fastmap_1.1.0                 #>  [31] limma_3.53.6                  cli_3.3.0                     #>  [33] later_1.3.0                   s2_1.1.0                      #>  [35] htmltools_0.5.3               tools_4.2.1                   #>  [37] glue_1.6.2                    GenomeInfoDbData_1.2.8        #>  [39] dplyr_1.0.9                   rappdirs_0.3.3                #>  [41] wk_0.6.0                      Rcpp_1.0.9                    #>  [43] jquerylib_0.1.4               pkgdown_2.0.6                 #>  [45] raster_3.5-29                 Biostrings_2.65.2             #>  [47] vctrs_0.4.1                   rhdf5filters_1.9.0            #>  [49] spdep_1.2-5                   ExperimentHub_2.5.0           #>  [51] DelayedMatrixStats_1.19.0     xfun_0.32                     #>  [53] stringr_1.4.1                 beachmat_2.13.4               #>  [55] mime_0.12                     lifecycle_1.0.1               #>  [57] terra_1.6-7                   AnnotationHub_3.5.0           #>  [59] edgeR_3.39.6                  zlibbioc_1.43.0               #>  [61] promises_1.2.0.1              ragg_1.2.2                    #>  [63] parallel_4.2.1                rhdf5_2.41.1                  #>  [65] curl_4.3.2                    yaml_2.3.5                    #>  [67] memoise_2.0.1                 sass_0.4.2                    #>  [69] stringi_1.7.8                 RSQLite_2.2.16                #>  [71] BiocVersion_3.16.0            highr_0.9                     #>  [73] desc_1.4.1                    e1071_1.7-11                  #>  [75] filelock_1.0.2                boot_1.3-28                   #>  [77] BiocParallel_1.31.12          spData_2.0.1                  #>  [79] rlang_1.0.4                   pkgconfig_2.0.3               #>  [81] systemfonts_1.0.4             bitops_1.0-7                  #>  [83] evaluate_0.16                 lattice_0.20-45               #>  [85] purrr_0.3.4                   Rhdf5lib_1.19.2               #>  [87] bit_4.0.4                     tidyselect_1.1.2              #>  [89] magrittr_2.0.3                bookdown_0.28                 #>  [91] R6_2.5.1                      magick_2.7.3                  #>  [93] generics_0.1.3                DelayedArray_0.23.1           #>  [95] DBI_1.1.3                     pillar_1.8.1                  #>  [97] units_0.8-0                   KEGGREST_1.37.3               #>  [99] RCurl_1.98-1.8                sp_1.5-0                      #> [101] tibble_3.1.8                  crayon_1.5.1                  #> [103] DropletUtils_1.17.1           KernSmooth_2.23-20            #> [105] utf8_1.2.2                    BiocFileCache_2.5.0           #> [107] rmarkdown_2.16                locfit_1.5-9.6                #> [109] grid_4.2.1                    blob_1.2.3                    #> [111] digest_0.6.29                 classInt_0.4-7                #> [113] xtable_1.8-4                  httpuv_1.6.5                  #> [115] R.utils_2.12.0                textshaping_0.3.6             #> [117] bslib_0.4.0"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lambda Moses. Author, maintainer. Lior Pachter. Author, thesis advisor.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Moses L, Pachter L (2022). SpatialFeatureExperiment: Integrating SpatielExperiment Simple Features sf. R package version 0.99.0, https://pachterlab.github.io/SpatialFeatureExperiment/dev/.","code":"@Manual{,   title = {SpatialFeatureExperiment: Integrating SpatielExperiment with Simple Features in sf},   author = {Lambda Moses and Lior Pachter},   year = {2022},   note = {R package version 0.99.0},   url = {https://pachterlab.github.io/SpatialFeatureExperiment/dev/}, }"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/index.html","id":"spatialfeatureexperiment","dir":"","previous_headings":"","what":"Integrating SpatielExperiment with Simple Features in sf","title":"Integrating SpatielExperiment with Simple Features in sf","text":"SpatialFeatureExperiment (SFE) new S4 class built top SpatialExperiment (SPE). SpatialFeatureExperiment incorporates geometries geometry operations sf package. Examples supported geometries Visium spots represented polygons corresponding size, cell nuclei segmentation polygons, tissue boundary polygons, pathologist annotation histological regions, transcript spots genes. Using sf, SpatialFeatureExperiment leverages well-established optimized C++ libraries underlying sf geometry operations, including algorithms determining whether geometries intersect, finding intersection geometries, buffering geometries margins, etc. schematic SFE object shown :  list SFE features extend SPE object: colGeometries sf data frames associated entities correspond columns gene count matrix, Visium spots cells. geometries sf data frames can Visium spot centroids, Visium spot polygons, datasets single cell resolution, cell nuclei segmentations. Multiple colGeometries can stored SFE object, one cell segmentation another nuclei segmentation. can non-spatial, attribute columns colGeometry rather colData, sf class allows users specify attributes relate geometries, “constant”, “aggregate”, “identity”. See agr argument st_sf documentation. colGraphs spatial neighborhood graphs cells spots. graphs class listw (spdep package), colPairs SingleCellExperiment used conversion necessary use numerous spatial dependency functions spdep, Moran’s , Geary’s C, Getis-Ord Gi*, LOSH, etc. Conversion also needed classical spatial statistics packages spatialreg adespatial. rowGeometries similar colGeometries, support entities correspond rows gene count matrix, genes. potential use case store transcript spots gene smFISH situ sequencing based datasets. rowGraphs similar colGraphs. potential use case may spatial colocalization transcripts different genes. annotGeometries sf data frames associated dataset directly gene count matrix, tissue boundaries, histological regions, cell nuclei segmentation Visium datasets, etc. geometries stored object facilitate plotting using sf operations find number nuclei Visium spot histological regions Visium spot intersects. Unlike colGeometries rowGeometries, number rows sf data frames annotGeometries constrained dimension gene count matrix can arbitrary. annotGraphs similar colGraphs rowGraphs, entities directly associated gene count matrix, spatial neighborhood graphs nuclei Visium datasets, objects like myofibers. graphs relevant spdep analyses attributes geometries spatial autocorrelation morphological metrics myofibers nuclei. geometry operations sf, attributes results analyses attributes (e.g. spatial regions defined attributes) may related back gene expression.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Integrating SpatielExperiment with Simple Features in sf","text":"development version SpatialFeatureExperiment can installed GitHub : package submitted Bioconductor. Documentation development version can accessed website.","code":"# install.packages(\"devtools\") devtools::install_github(\"pachterlab/SpatialFeatureExperiment\")"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/SpatialFeatureExperiment-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The SpatialFeatureExperiment class — SpatialFeatureExperiment-class","title":"The SpatialFeatureExperiment class — SpatialFeatureExperiment-class","text":"class inherits SpatialExperiment (SPE) class, turn inherits SingleCellExperiment (SCE). SpatialFeatureExperiment stores geometries spots cells sf objects form columns DataFrame turn column int_colData DataFrame underlying SCE object, just like reducedDim SCE. Geometries tissue outline, pathologist annotations, objects (e.g. nuclei segmentation Visium dataset) stored sf objects named list called annotGeometries int_metadata.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/SpatialFeatureExperiment-coercion.html","id":null,"dir":"Reference","previous_headings":"","what":"SpatialFeatureExperiment coercion methods — SpatialFeatureExperiment-coercion","title":"SpatialFeatureExperiment coercion methods — SpatialFeatureExperiment-coercion","text":"SpatialFeatureExperiment class inherits SpatialExperiment, turn inherits SingleCellExperiment. SpatialExperiment object geometries colGeometries int_colData, rowGeometries int_elementMetadata, annotGeometries int_metadata can directly converted SpatialFeatureExperiment (spe, \"SpatialFeatureExperiment\"). SpatialExperiment object without geometries can also converted; coordinates spatialCoords field used make POINT geometries named \"centroids\" add colGeometries. geometries can also supplied separately using toSpatialFeatureExperiment. now coercion works SpatialExperiment. deal Seurat SingleCellExperiment later.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/SpatialFeatureExperiment-coercion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SpatialFeatureExperiment coercion methods — SpatialFeatureExperiment-coercion","text":"","code":"# S4 method for SpatialExperiment toSpatialFeatureExperiment(   x,   colGeometries = NULL,   rowGeometries = NULL,   annotGeometries = NULL,   spatialCoordsNames = c(\"x\", \"y\"),   annotGeometryType = \"POLYGON\",   spatialGraphs = NULL,   spotDiameter = NA,   unit = NULL )"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/SpatialFeatureExperiment-coercion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SpatialFeatureExperiment coercion methods — SpatialFeatureExperiment-coercion","text":"x SpatialExperiment object coerced SpatialFeatureExperiment object. colGeometries Geometry entities correspond columns gene count matrix, cells Visium spots. must named list one following: sf data frame geometry column specifies geometry entities. ordinary data frame specifying centroids Column names coordinates specified spatialCoordsNames argument. Visium ST, addition centroid coordinate data frame, spot diameter unit coordinates can specified spotDiamter argument. ordinary data frame specifying polygons Also use spatialCoordsNames. additional column \"ID\" specify vertices belong polygon. coordinates list columns. Rather, data frame look like passed ggplot2::geom_polygon. holes, must also column \"subID\" differentiates outer polygon holes. cases, data frame specify number geometries number columns gene count matrix. column \"barcode\" present, matched column names gene count matrix. Otherwise, geometries assumed order columns gene count matrix. geometries specified ordinary data frame, converted sf internally. Named list data frames entity can multiple geometries, whole cell nuclei segmentations. geometries assumed POINTs centroids POLYGONs segmentations. polygons specified ordinary data frame, anything fewer 3 vertices removed. anything POINTs, attributes geometry ignored. rowGeometries Geometry associated genes features, correspond rows gene count matrix. annotGeometries Geometry entities correspond columns rows gene count matrix, tissue boundary pathologist annotations histological regions, nuclei segmentation Visium dataset. Also named list colGeometries. ordinary data frame may specify POINTs, POLYGONs, LINESTRINGs, MULTI versions. data frame can specify one type geometry. MULTI versions, must column \"group\" identify MULTI geometry. spatialCoordsNames character vector column names *Geometries arguments ordinary data frames, identify columns ordinary data frames specify spatial coordinates. colGeometries specified, argument behave SpatialExperiment, colGeometries given precedence provided. annotGeometryType Character vector specifying geometry type element list annotGeometry specified. element vector must one POINT, LINESTRING, POLYGON, MULTIPOINT, MULTILINESTRING, MULTIPOLYGON. Must either length 1 (elements list) length list. Ignored corresponding element sf object. spatialGraphs named list listw objects (see spdep) spatial neighborhood graphs. spotDiameter Spot diameter technologies arrays spots fixed diameter per slide, Visium, ST, DBiT-seq, slide-seq. diameter must unit coordinates *Geometry arguments. Ignored geometries POINT MULTIPOINT. unit Unit coordinates . thinking using custom engineering CRS's can convert units invert y axis Cartesian vs. image orientations. Units also helpful plotting scale bars. Ignored now, find better way deal .","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/SpatialFeatureExperiment-coercion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SpatialFeatureExperiment coercion methods — SpatialFeatureExperiment-coercion","text":"SFE object","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/SpatialFeatureExperiment-coercion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SpatialFeatureExperiment coercion methods — SpatialFeatureExperiment-coercion","text":"","code":"library(SpatialExperiment) #> Loading required package: SingleCellExperiment #> Loading required package: SummarizedExperiment #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: ‘MatrixGenerics’ #> The following objects are masked from ‘package:matrixStats’: #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table, #>     tapply, union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: ‘S4Vectors’ #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: ‘Biobase’ #> The following object is masked from ‘package:MatrixGenerics’: #>  #>     rowMedians #> The following objects are masked from ‘package:matrixStats’: #>  #>     anyMissing, rowMedians example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/home/runner/work/_temp/Library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> class: SpatialExperiment  #> dim: 50 99  #> metadata(0): #> assays(1): counts #> rownames(50): ENSMUSG00000051951 ENSMUSG00000089699 ... #>   ENSMUSG00000005886 ENSMUSG00000101476 #> rowData names(1): symbol #> colnames(99): AAACAACGAATAGTTC-1 AAACAAGTATCTCCCA-1 ... #>   AAAGTCGACCCTCAGT-1 AAAGTGCCATCAATTA-1 #> colData names(4): in_tissue array_row array_col sample_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : pxl_col_in_fullres pxl_row_in_fullres #> imgData names(4): sample_id image_id data scaleFactor #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> class: SpatialExperiment  #> dim: 50 99  #> metadata(0): #> assays(1): counts #> rownames(50): ENSMUSG00000051951 ENSMUSG00000089699 ... #>   ENSMUSG00000005886 ENSMUSG00000101476 #> rowData names(1): symbol #> colnames(99): AAACAACGAATAGTTC-1 AAACAAGTATCTCCCA-1 ... #>   AAAGTCGACCCTCAGT-1 AAAGTGCCATCAATTA-1 #> colData names(4): in_tissue array_row array_col sample_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : pxl_col_in_fullres pxl_row_in_fullres #> imgData names(4): sample_id image_id data scaleFactor #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 # There can't be suplicate barcodes colnames(spe) <- make.unique(colnames(spe), sep = \"-\") rownames(spatialCoords(spe)) <- colnames(spe) sfe <- toSpatialFeatureExperiment(spe)"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/SpatialFeatureExperiment-subset.html","id":null,"dir":"Reference","previous_headings":"","what":"Subsetting SpatialFeatureExperiment objects — SpatialFeatureExperiment-subset","title":"Subsetting SpatialFeatureExperiment objects — SpatialFeatureExperiment-subset","text":"method SFE reconstructs spatial graphs SFE object subsetted listw objects encodes nodes indices longer valid subsetting nodes longer present.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/SpatialFeatureExperiment-subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subsetting SpatialFeatureExperiment objects — SpatialFeatureExperiment-subset","text":"","code":"# S4 method for SpatialFeatureExperiment,ANY,ANY,ANY [(x, i, j, ..., drop = FALSE)"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/SpatialFeatureExperiment-subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subsetting SpatialFeatureExperiment objects — SpatialFeatureExperiment-subset","text":"x SpatialFeatureExperiment object. Row indices subsetting. j column indices subsetting. ... Passed SingleCellExperiment method [. drop Logical. FALSE, warning issued node indices graphs longer valid row col graphs affected subsetting dropped. present, works wrapper functions package take SFE objects records info required reconstruct graphs. argument ignored SummarizedExperiment","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/SpatialFeatureExperiment-subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subsetting SpatialFeatureExperiment objects — SpatialFeatureExperiment-subset","text":"subsetted SpatialFeatureExperiment object.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/SpatialFeatureExperiment-subset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subsetting SpatialFeatureExperiment objects — SpatialFeatureExperiment-subset","text":"","code":"# Just like subsetting matrices and SingleCellExperiment library(SFEData) sfe <- McKellarMuscleData(dataset = \"small\") #> snapshotDate(): 2022-08-23 #> see ?SFEData and browseVignettes('SFEData') for documentation #> downloading 1 resources #> retrieving 1 resource #> loading from cache sfe_subset <- sfe[1:10, 1:10, drop = TRUE] #> Node indices in the graphs are no longer valid after subsetting. Dropping all row and col graphs. # Gives warning as graph reconstruction fails if (FALSE) { sfe_subset <- sfe[1:10, 1:10] }"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/SpatialFeatureExperiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor of SpatialFeatureExperiment object — SpatialFeatureExperiment","title":"Constructor of SpatialFeatureExperiment object — SpatialFeatureExperiment","text":"Create SpatialFeatureExperiment object.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/SpatialFeatureExperiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor of SpatialFeatureExperiment object — SpatialFeatureExperiment","text":"","code":"SpatialFeatureExperiment(   assays,   colData = DataFrame(),   rowData = NULL,   sample_id = \"sample01\",   spatialCoordsNames = c(\"x\", \"y\"),   spatialCoords = NULL,   colGeometries = NULL,   rowGeometries = NULL,   annotGeometries = NULL,   spotDiameter = NA_real_,   annotGeometryType = \"POLYGON\",   spatialGraphs = NULL,   unit = \"full_res_image_pixels\",   ... )"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/SpatialFeatureExperiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor of SpatialFeatureExperiment object — SpatialFeatureExperiment","text":"assays list SimpleList matrix-like elements,     matrix-like object (e.g. ordinary matrix, data frame,     DataFrame object S4Vectors package,     sparseMatrix derivative Matrix package,     DelayedMatrix object DelayedArray     package, etc...).     elements list must dimensions, dimension     names (present) must consistent across elements row     names rowRanges colData. colData optional DataFrame describing     samples. Row names, present, become column names     RangedSummarizedExperiment. rowData DataFrame object describing      rows. Row names, present, become row names     SummarizedExperiment object. number rows     DataFrame must equal number rows     matrices assays. sample_id character sample identifier, matches sample_id imgData. sample_id also stored new column colData, already present. Default = sample01. spatialCoordsNames character vector column names *Geometries arguments ordinary data frames, identify columns ordinary data frames specify spatial coordinates. colGeometries specified, argument behave SpatialExperiment, colGeometries given precedence provided. spatialCoords numeric matrix containing columns spatial coordinates, SpatialExperiment. coordinates centroids entities represented columns gene count matrix. colGeometries also specified, given priority warning issued. Otherwise, sf representation centroids stored colGeometry called centroids. colGeometries Geometry entities correspond columns gene count matrix, cells Visium spots. must named list one following: sf data frame geometry column specifies geometry entities. ordinary data frame specifying centroids Column names coordinates specified spatialCoordsNames argument. Visium ST, addition centroid coordinate data frame, spot diameter unit coordinates can specified spotDiamter argument. ordinary data frame specifying polygons Also use spatialCoordsNames. additional column \"ID\" specify vertices belong polygon. coordinates list columns. Rather, data frame look like passed ggplot2::geom_polygon. holes, must also column \"subID\" differentiates outer polygon holes. cases, data frame specify number geometries number columns gene count matrix. column \"barcode\" present, matched column names gene count matrix. Otherwise, geometries assumed order columns gene count matrix. geometries specified ordinary data frame, converted sf internally. Named list data frames entity can multiple geometries, whole cell nuclei segmentations. geometries assumed POINTs centroids POLYGONs segmentations. polygons specified ordinary data frame, anything fewer 3 vertices removed. anything POINTs, attributes geometry ignored. rowGeometries Geometry associated genes features, correspond rows gene count matrix. annotGeometries Geometry entities correspond columns rows gene count matrix, tissue boundary pathologist annotations histological regions, nuclei segmentation Visium dataset. Also named list colGeometries. ordinary data frame may specify POINTs, POLYGONs, LINESTRINGs, MULTI versions. data frame can specify one type geometry. MULTI versions, must column \"group\" identify MULTI geometry. spotDiameter Spot diameter technologies arrays spots fixed diameter per slide, Visium, ST, DBiT-seq, slide-seq. diameter must unit coordinates *Geometry arguments. Ignored geometries POINT MULTIPOINT. annotGeometryType Character vector specifying geometry type element list annotGeometry specified. element vector must one POINT, LINESTRING, POLYGON, MULTIPOINT, MULTILINESTRING, MULTIPOLYGON. Must either length 1 (elements list) length list. Ignored corresponding element sf object. spatialGraphs named list listw objects (see spdep) spatial neighborhood graphs. unit Unit coordinates . thinking using custom engineering CRS's can convert units invert y axis Cartesian vs. image orientations. Units also helpful plotting scale bars. Ignored now, find better way deal . ... Additional arguments passed SpatialExperiment SingleCellExperiment constructors.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/SpatialFeatureExperiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor of SpatialFeatureExperiment object — SpatialFeatureExperiment","text":"SFE object. neither colGeometries spotDiameter specified, colGeometry called \"centroids\" made,   essentially spatial coordinates sf POINTs.  spotDiameter specified, colGeometries,   spatial coordinates buffered half diameter get spots   desired diameter, resulting colGeometry called   \"spotPoly\", convenience getter setter,  spotPoly.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/SpatialFeatureExperiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor of SpatialFeatureExperiment object — SpatialFeatureExperiment","text":"","code":"library(Matrix) #>  #> Attaching package: ‘Matrix’ #> The following object is masked from ‘package:S4Vectors’: #>  #>     expand data(\"visium_row_col\") coords1 <- visium_row_col[visium_row_col$col < 6 & visium_row_col$row < 6,] coords1$row <- coords1$row * sqrt(3) cg <- df2sf(coords1[,c(\"col\", \"row\")], c(\"col\", \"row\"), spotDiameter = 0.7)  set.seed(29) col_inds <- sample(1:13, 13) row_inds <- sample(1:5, 13, replace = TRUE) values <- sample(1:5, 13, replace = TRUE) mat <- sparseMatrix(i = row_inds, j = col_inds, x = values) colnames(mat) <- coords1$barcode rownames(mat) <- sample(LETTERS, 5) rownames(cg) <- colnames(mat)  sfe <- SpatialFeatureExperiment(list(counts = mat), colData = coords1,                                 spatialCoordsNames = c(\"col\", \"row\"),                                 spotDiameter = 0.7) sfe2 <- SpatialFeatureExperiment(list(counts = mat), colGeometries = list(foo = cg))"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/addVisiumSpotPoly.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Visium spot polygons to colGeometry — addVisiumSpotPoly","title":"Add Visium spot polygons to colGeometry — addVisiumSpotPoly","text":"adding spot polygons SFE objects converted SPE.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/addVisiumSpotPoly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Visium spot polygons to colGeometry — addVisiumSpotPoly","text":"","code":"addVisiumSpotPoly(x, spotDiameter)"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/addVisiumSpotPoly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Visium spot polygons to colGeometry — addVisiumSpotPoly","text":"x SpatialFeatureExperiment object. spotDiameter Spot diameter technologies arrays spots fixed diameter per slide, Visium, ST, DBiT-seq, slide-seq. diameter must unit coordinates *Geometry arguments. Ignored geometries POINT MULTIPOINT.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/addVisiumSpotPoly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Visium spot polygons to colGeometry — addVisiumSpotPoly","text":"SFE object new colGeometry called spotPoly, polygons spots.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/addVisiumSpotPoly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Visium spot polygons to colGeometry — addVisiumSpotPoly","text":"","code":"library(SpatialExperiment) example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/home/runner/work/_temp/Library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> class: SpatialExperiment  #> dim: 50 99  #> metadata(0): #> assays(1): counts #> rownames(50): ENSMUSG00000051951 ENSMUSG00000089699 ... #>   ENSMUSG00000005886 ENSMUSG00000101476 #> rowData names(1): symbol #> colnames(99): AAACAACGAATAGTTC-1 AAACAAGTATCTCCCA-1 ... #>   AAAGTCGACCCTCAGT-1 AAAGTGCCATCAATTA-1 #> colData names(4): in_tissue array_row array_col sample_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : pxl_col_in_fullres pxl_row_in_fullres #> imgData names(4): sample_id image_id data scaleFactor #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> class: SpatialExperiment  #> dim: 50 99  #> metadata(0): #> assays(1): counts #> rownames(50): ENSMUSG00000051951 ENSMUSG00000089699 ... #>   ENSMUSG00000005886 ENSMUSG00000101476 #> rowData names(1): symbol #> colnames(99): AAACAACGAATAGTTC-1 AAACAAGTATCTCCCA-1 ... #>   AAAGTCGACCCTCAGT-1 AAAGTGCCATCAATTA-1 #> colData names(4): in_tissue array_row array_col sample_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : pxl_col_in_fullres pxl_row_in_fullres #> imgData names(4): sample_id image_id data scaleFactor #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 # There can't be suplicate barcodes colnames(spe) <- make.unique(colnames(spe), sep = \"-\") rownames(spatialCoords(spe)) <- colnames(spe) sfe <- toSpatialFeatureExperiment(spe) # A hypothetical spot diameter; check the scalefactors_json.json file for # actual diameter in pixels in full resolution image. sfe <- addVisiumSpotPoly(sfe, spotDiameter = 80)"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/annotGeometries.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotation geometry methods — annotGeometries","title":"Annotation geometry methods — annotGeometries","text":"\"Annotation geometry\" refers Simple Feature (sf) geometries associated rows (features, genes) columns (cells spots) gene count matrix SpatialFeatureExperiment object. can number rows sf data frame specifying geometry. Examples geometries tissue boundaries, pathologist annotation histological regions, objects characterized columns gene count matrix (e.g. nuclei segmentation Visium dataset columns Visium spots). page documents getters setters annotation geometries. Internally, annotation geometries stored int_metadata.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/annotGeometries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotation geometry methods — annotGeometries","text":"","code":"# S4 method for SpatialFeatureExperiment annotGeometries(x)  # S4 method for SpatialFeatureExperiment annotGeometries(x, translate = TRUE, ...) <- value  # S4 method for SpatialFeatureExperiment annotGeometryNames(x)  # S4 method for SpatialFeatureExperiment,character annotGeometryNames(x) <- value  # S4 method for SpatialFeatureExperiment,missing annotGeometry(x, type, sample_id = NULL)  # S4 method for SpatialFeatureExperiment,numeric annotGeometry(x, type, sample_id = NULL)  # S4 method for SpatialFeatureExperiment,character annotGeometry(x, type, sample_id = NULL)  # S4 method for SpatialFeatureExperiment,missing annotGeometry(x, type, sample_id = NULL) <- value  # S4 method for SpatialFeatureExperiment,numeric annotGeometry(x, type, sample_id = NULL, translate = TRUE, ...) <- value  # S4 method for SpatialFeatureExperiment,character annotGeometry(x, type, sample_id = NULL, translate = TRUE, ...) <- value  tissueBoundary(x, sample_id = NULL)  tissueBoundary(x, sample_id = NULL, translate = TRUE, ...) <- value"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/annotGeometries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotation geometry methods — annotGeometries","text":"x SpatialFeatureExperiment object. translate Logical. used removeEmptySpace run SFE object. case, argument indicates whether new value assigned geometry coordinates prior removal empty space translated match new coordinates removing empty space. Default TRUE. ... spatialCoordsNames, spotDiameter, geometryType passed df2sf. Defaults df2sf. dimGeometries<- : geometryType can character vector geometry type data frame list length list data frames specify different types geometries. value Value set. annotGeometry, must sf data frame, ordinary data frame can converted sf data frame (see df2sf). annotGeometries, must list sf ordinary data frames. must column sample_id indicate sample geometries , sample_id must also appear colData. type integer specifying index string specifying name *Geometry query replace. missing, first item *Geometries returned replaced. sample_id Sample ID get set geometries.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/annotGeometries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotation geometry methods — annotGeometries","text":"Getters multiple geometries return named list. Getters   names return character vector names. Getters single geometries   return sf data frame. Setters return SFE object.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/annotGeometries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Annotation geometry methods — annotGeometries","text":"Wrapper getter setter special geometry: tisseuBoundary Boundary tissue interest, including holes. usually geometry type MULTIPOLYGON, though geometries annotGeometries can type supported sf.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/annotGeometries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotation geometry methods — annotGeometries","text":"","code":"# Example dataset library(SFEData) sfe_small <- McKellarMuscleData(dataset = \"small\") #> snapshotDate(): 2022-08-23 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache  # Get all annotation geometries, returning a named list annotGeometries(sfe_small) #> $tissueBoundary #> Simple feature collection with 1 feature and 2 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 5094 ymin: 13000 xmax: 7000 ymax: 14969 #> CRS:           NA #>   ID                       geometry sample_id #> 7  7 POLYGON ((5094 13000, 5095 ...     Vis5A #>  #> $myofiber_full #> Simple feature collection with 195 features and 2 fields #> Geometry type: GEOMETRY #> Dimension:     XY #> Bounding box:  xmin: 5072 ymin: 13000 xmax: 7000 ymax: 14956 #> CRS:           NA #> First 10 features: #>      lyr.1                       geometry sample_id #> 1018  1018 POLYGON ((6620 14908, 6628 ...     Vis5A #> 1021  1021 POLYGON ((6476 13416, 6492 ...     Vis5A #> 1024  1024 GEOMETRYCOLLECTION (LINESTR...     Vis5A #> 1041  1041 POLYGON ((6024 14592, 6044 ...     Vis5A #> 1052  1052 POLYGON ((5948 14664, 5976 ...     Vis5A #> 1058  1058 POLYGON ((6184 13916, 6192 ...     Vis5A #> 1131  1131 POLYGON ((6560 14040, 6572 ...     Vis5A #> 1149  1149 POLYGON ((6948 14792, 6956 ...     Vis5A #> 1164  1164 GEOMETRYCOLLECTION (LINESTR...     Vis5A #> 1198  1198 POLYGON ((7000 14088, 6988 ...     Vis5A #>  #> $myofiber_simplified #> Simple feature collection with 195 features and 34 fields #> Geometry type: GEOMETRY #> Dimension:     XY #> Bounding box:  xmin: 5075.2 ymin: 13000 xmax: 7000 ymax: 14956 #> CRS:           NA #> First 10 features: #>      lyr.1   area perimeter eccentricity       theta  sine_theta convexity #> 1018  1018 1254.5  144.3111    0.7556634 -1.43691705 -0.99105155 0.9439428 #> 1021  1021 1294.0  154.6381    0.8373427  1.22884082  0.94210073 0.8970537 #> 1024  1024 1071.0  137.5860    0.7616274 -0.56418348 -0.53472602 0.8876917 #> 1041  1041 1117.5  143.9801    0.4602999  0.42465952  0.41201057 0.8830502 #> 1052  1052  702.5  108.8714    0.5921893  0.05022803  0.05020692 0.9117456 #> 1058  1058  748.0  130.9098    0.7333168  1.48690171  0.99648291 0.7877830 #> 1131  1131  921.0  123.1718    0.4938581  0.08929549  0.08917687 0.9109792 #> 1149  1149 1350.0  155.2466    0.8064659  1.45088782  0.99281958 0.9127789 #> 1164  1164 1361.0  160.5250    0.5199006 -1.43088381 -0.99022820 0.8668790 #> 1198  1198 1359.5  147.4640    0.7536808 -1.55943349 -0.99993544 0.9493715 #>        h.asm.s1 h.con.s1  h.cor.s1  h.var.s1  h.idm.s1 h.sav.s1 h.sva.s1 #> 1018 0.04569305 8.823872 0.6175303 12.535387 0.4677583 55.93346 3043.557 #> 1021 0.06676416 2.971181 0.3866366  3.422040 0.5244005 56.36618 3086.581 #> 1024 0.04072365 5.629854 0.5509958  7.269267 0.4544623 53.67451 2789.833 #> 1041 0.03789957 7.404033 0.6839055 12.711739 0.4583396 54.40403 2876.513 #> 1052 0.05586671 5.919123 0.5754451  7.970974 0.5074887 55.10506 2951.151 #> 1058 0.06039099 4.356942 0.6920377  8.073825 0.5117327 56.48317 3107.141 #> 1131 0.05073276 4.830403 0.6019241  7.067188 0.4921981 56.95746 3152.026 #> 1149 0.05089796 5.356243 0.7815510 13.259709 0.4837150 55.53230 3015.888 #> 1164 0.05300985 4.562002 0.6782312  8.088945 0.4944515 55.49526 2993.993 #> 1198 0.04410018 5.977108 0.5276979  7.327632 0.4641892 55.45479 2981.551 #>       h.sen.s1 h.ent.s1 h.dva.s1  h.den.s1   h.f12.s1  h.f13.s1   h.asm.s2 #> 1018 1.1042774 1.702237 8.823872 0.7768725 0.08287254 0.3699324 0.04843700 #> 1021 0.8696623 1.375543 2.971181 0.6110582 0.03857801 0.2295028 0.07371797 #> 1024 1.0400578 1.655837 5.629854 0.7268132 0.05447687 0.2975921 0.04179965 #> 1041 1.1398830 1.746922 7.404033 0.7499876 0.10322951 0.4161292 0.04108058 #> 1052 0.9831099 1.515003 5.919123 0.6924231 0.06404495 0.3088334 0.05065103 #> 1058 0.9565778 1.475250 4.356942 0.6600786 0.09843866 0.3763597 0.06705178 #> 1131 0.9879345 1.523556 4.830403 0.6717902 0.06896841 0.3211188 0.04611804 #> 1149 1.0143578 1.572877 5.356243 0.6964793 0.09582218 0.3826318 0.05029586 #> 1164 0.9957274 1.548318 4.562002 0.6773656 0.08123645 0.3505345 0.05579443 #> 1198 1.0285324 1.638017 5.977108 0.7321981 0.06439037 0.3213296 0.04349491 #>       h.con.s2  h.cor.s2  h.var.s2  h.idm.s2 h.sav.s2 h.sva.s2  h.sen.s2 #> 1018 13.956859 0.3591553 11.889424 0.4635219 56.08628 3053.482 1.0964515 #> 1021  4.374046 0.1620524  3.609976 0.5356106 56.44869 3096.160 0.8600733 #> 1024  7.633299 0.2524210  6.105346 0.4313602 53.81512 2802.705 0.9954560 #> 1041  9.969246 0.4542513 10.133550 0.4460751 54.74504 2904.280 1.1007054 #> 1052  8.709208 0.3130783  7.339302 0.4888779 55.15509 2949.709 0.9973425 #> 1058  5.844347 0.4605127  6.416574 0.5263770 56.37004 3088.457 0.9386880 #> 1131  6.231405 0.3613120  5.878286 0.4723205 57.09327 3162.454 0.9757856 #> 1149  9.113317 0.6047476 12.528476 0.4714423 55.47891 3003.012 1.0178087 #> 1164  5.682109 0.4433550  6.103889 0.4904749 55.70128 3011.191 0.9613706 #> 1198  8.985191 0.2719318  7.170570 0.4435528 55.39049 2970.667 1.0308582 #>      h.ent.s2  h.dva.s2  h.den.s2   h.f12.s2  h.f13.s2 #> 1018 1.648689 13.956859 0.8096457 0.07724304 0.3522316 #> 1021 1.347868  4.374046 0.6222874 0.02909852 0.1975308 #> 1024 1.592808  7.633299 0.7431862 0.03346647 0.2297161 #> 1041 1.688399  9.969246 0.7857339 0.09662418 0.3969055 #> 1052 1.501903  8.709208 0.6950301 0.05405809 0.2829466 #> 1058 1.423354  5.844347 0.6871059 0.07950027 0.3334109 #> 1131 1.503655  6.231405 0.7083074 0.05990168 0.2977786 #> 1149 1.553251  9.113317 0.7371693 0.08636114 0.3616774 #> 1164 1.496062  5.682109 0.6900179 0.06215469 0.3025037 #> 1198 1.645228  8.985191 0.7904764 0.05511628 0.2983840 #>                            geometry sample_id #> 1018 POLYGON ((6620 14908, 6628 ...     Vis5A #> 1021 POLYGON ((6476 13416, 6492 ...     Vis5A #> 1024 POLYGON ((6980 13492, 6992 ...     Vis5A #> 1041 POLYGON ((6024 14592, 6044 ...     Vis5A #> 1052 POLYGON ((6004 14652, 6016 ...     Vis5A #> 1058 POLYGON ((6184 13916, 6192 ...     Vis5A #> 1131 POLYGON ((6560 14040, 6592 ...     Vis5A #> 1149 POLYGON ((6948 14792, 6956 ...     Vis5A #> 1164 POLYGON ((7000 13152, 6984 ...     Vis5A #> 1198 POLYGON ((7000 14088, 6988 ...     Vis5A #>  #> $nuclei #> Simple feature collection with 442 features and 9 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 5097.075 ymin: 13000 xmax: 7000 ymax: 14948.44 #> CRS:           NA #> First 10 features: #>          ID index     area roundness eccentricity aspect_ratio     angle #> 10084 10084 10084 238.4863  1.085386    0.7328259     1.469689 139.27116 #> 10175 10175 10175 493.0881  1.067844    0.6938556     1.388669 148.65620 #> 10181 10181 10181 177.5525  1.061164    0.6553132     1.323877 122.36570 #> 10189 10189 10189 323.6471  1.153316    0.8276987     1.781982  45.38620 #> 10246 10246 10246 416.4098  1.072617    0.7292323     1.461420  97.54036 #> 10316 10316 10316 269.0076  1.067543    0.7193451     1.439568  11.75157 #> 10426 10426 10426 375.6754  1.028084    0.1588077     1.012854  16.43842 #> 10432 10432 10432 225.9670  1.038551    0.4909133     1.147831 162.73535 #> 10440 10440 10440 310.9183  1.052642    0.6360212     1.295888  72.76263 #> 10486 10486 10486 329.1423  1.084983    0.7364244     1.478153 159.36537 #>       convexity                       geometry sample_id #> 10084 0.9920712 POLYGON ((5776.277 14250, 5...     Vis5A #> 10175 0.9944043 POLYGON ((6920.169 14910, 6...     Vis5A #> 10181 0.9914434 POLYGON ((6414.457 14760, 6...     Vis5A #> 10189 0.9869685 POLYGON ((6396.188 13995, 6...     Vis5A #> 10246 0.9953556 POLYGON ((5838.198 14742, 5...     Vis5A #> 10316 0.9958743 POLYGON ((5407.794 13000, 5...     Vis5A #> 10426 0.9945204 POLYGON ((6014.04 14542, 60...     Vis5A #> 10432 0.9912810 POLYGON ((6308.317 14453, 6...     Vis5A #> 10440 0.9936670 POLYGON ((6145.372 13068, 6...     Vis5A #> 10486 0.9916191 POLYGON ((6091.856 13626, 6...     Vis5A #>  #> $nuclei_centroid #> Simple feature collection with 434 features and 8 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 5103 ymin: 13004 xmax: 7000 ymax: 14942 #> CRS:           NA #> First 10 features: #>       index     area roundness eccentricity aspect_ratio     angle convexity #> 10085 10084 238.4863  1.085386    0.7328259     1.469689 139.27116 0.9920712 #> 10176 10175 493.0881  1.067844    0.6938556     1.388669 148.65620 0.9944043 #> 10182 10181 177.5525  1.061164    0.6553132     1.323877 122.36570 0.9914434 #> 10190 10189 323.6471  1.153316    0.8276987     1.781982  45.38620 0.9869685 #> 10247 10246 416.4098  1.072617    0.7292323     1.461420  97.54036 0.9953556 #> 10317 10316 269.0076  1.067543    0.7193451     1.439568  11.75157 0.9958743 #> 10427 10426 375.6754  1.028084    0.1588077     1.012854  16.43842 0.9945204 #> 10433 10432 225.9670  1.038551    0.4909133     1.147831 162.73535 0.9912810 #> 10441 10440 310.9183  1.052642    0.6360212     1.295888  72.76263 0.9936670 #> 10487 10486 329.1423  1.084983    0.7364244     1.478153 159.36537 0.9916191 #>                 geometry sample_id #> 10085 POINT (5768 14250)     Vis5A #> 10176 POINT (6909 14910)     Vis5A #> 10182 POINT (6408 14760)     Vis5A #> 10190 POINT (6387 13995)     Vis5A #> 10247 POINT (5830 14742)     Vis5A #> 10317 POINT (5408 13008)     Vis5A #> 10427 POINT (6004 14542)     Vis5A #> 10433 POINT (6299 14453)     Vis5A #> 10441 POINT (6137 13068)     Vis5A #> 10487 POINT (6081 13626)     Vis5A #>   # Set all annotation geometries, in a named list toy <- readRDS(system.file(\"testdata/sfe_toy.rds\",                package = \"SpatialFeatureExperiment\")) ag <- readRDS(system.file(\"testdata/ag.rds\",                           package = \"SpatialFeatureExperiment\")) annotGeometries(toy) <- list(hull = ag)  # Get names of annotation geometries annotGeometryNames(sfe_small) #> [1] \"tissueBoundary\"      \"myofiber_full\"       \"myofiber_simplified\" #> [4] \"nuclei\"              \"nuclei_centroid\"      # Set names of annotation geometries annotGeometryNames(toy) <- \"foo\"  # Get a specific annotation geometry by name # sample_id is optional when there is only one sample present nuclei <- annotGeometry(sfe_small, type = \"nuclei\", sample_id = \"Vis5A\")  # Get a specific annotation geometry by index tb <- annotGeometry(sfe_small, type = 1L)  # Set a specific annotation geometry annotGeometry(sfe_small, type = \"nuclei2\") <- nuclei  # Special convenience function for tissue boundaries # Getter tb <- tissueBoundary(sfe_small, sample_id = \"Vis5A\") # Setter tissueBoundary(sfe_small, sample_id = \"Vis5A\") <- tb"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/annotOp.html","id":null,"dir":"Reference","previous_headings":"","what":"Binary operations for geometry of each cell/spot and annotation — annotOp","title":"Binary operations for geometry of each cell/spot and annotation — annotOp","text":"Just like annotPred, performs operation rather predicate. example, function return geometry intersections Visium spot tissue boundary sample, rather whether Visium spot intersects tissue boundary. case one cell/spot gets broken multiple geometries, union geometries taken, cell/spot get one geometry.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/annotOp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binary operations for geometry of each cell/spot and annotation — annotOp","text":"","code":"annotOp(   sfe,   colGeometryName = 1L,   annotGeometryName = 1L,   sample_id = NULL,   op = st_intersection )"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/annotOp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binary operations for geometry of each cell/spot and annotation — annotOp","text":"sfe SFE object. colGeometryName Name column geometry predicate. annotGeometryName Name annotation geometry predicate. sample_id sample(s) operate . Can \"\" indicate samples. op binary operation function geometries. Defaults st_intersection.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/annotOp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Binary operations for geometry of each cell/spot and annotation — annotOp","text":"sf data frame geometry column containing geometries corresponding column names sfe row names. guarantee returned geometries valid preserve geometry class (e.g. intersection polygons result line point).","code":""},{"path":[]},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/annotOp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Binary operations for geometry of each cell/spot and annotation — annotOp","text":"","code":"library(SFEData) sfe <- McKellarMuscleData(\"small\") #> snapshotDate(): 2022-08-23 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache # Get the intersection of myofibers with each Visium spot myofibers_on_spots <- annotOp(sfe, \"spotPoly\", annotGeometryName = \"myofiber_simplified\")"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/annotPred.html","id":null,"dir":"Reference","previous_headings":"","what":"Binary predicates for geometry of each cell/spot and annotation — annotPred","title":"Binary predicates for geometry of each cell/spot and annotation — annotPred","text":"function finds binary predicates geometry cell/spot (.e. colGeometry) annotation geometry sample. example, whether Visium spot intersects tissue boundary sample.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/annotPred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binary predicates for geometry of each cell/spot and annotation — annotPred","text":"","code":"annotPred(   sfe,   colGeometryName = 1L,   annotGeometryName = 1L,   sample_id = NULL,   pred = st_intersects )  annotNPred(   sfe,   colGeometryName = 1L,   annotGeometryName = 1L,   sample_id = NULL,   pred = st_intersects )"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/annotPred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binary predicates for geometry of each cell/spot and annotation — annotPred","text":"sfe SFE object. colGeometryName Name column geometry predicate. annotGeometryName Name annotation geometry predicate. sample_id sample(s) operate . Can \"\" indicate samples. pred Predicate function use, defaults st_intersects.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/annotPred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Binary predicates for geometry of each cell/spot and annotation — annotPred","text":"annotPred, logical vector length   number columns sample(s) interest, barcodes (  corresponding column names sfe) names. annotNPred,   numeric vector length number columns sample(s)   interest barcodes names, indicating number geometries   annotGeometry interest returns TRUE predicate   geometry colGeometry interest.","code":""},{"path":[]},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/annotPred.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Binary predicates for geometry of each cell/spot and annotation — annotPred","text":"","code":"library(SFEData) sfe <- McKellarMuscleData(\"small\") #> snapshotDate(): 2022-08-23 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache # Whether each spot is in tissue in_tissue <- annotPred(sfe, \"spotPoly\", annotGeometryName = \"tissueBoundary\") # How many nuclei are there in each Visium spot n_nuclei <- annotNPred(sfe, \"spotPoly\", annotGeometryName = \"nuclei\")"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/annotSummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize attributes of an annotGeometry for each cell/spot — annotSummary","title":"Summarize attributes of an annotGeometry for each cell/spot — annotSummary","text":"SFE objects, annotation geometries correspond dimensions gene count matrix, generally one one mapping annotation geometries cells/spots. However, may interesting relate attributes annotation geometries cell/spots attributes can related gene expression. function summarizes attributes annotGeometry cell/spot geometric predicate colGeometry.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/annotSummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize attributes of an annotGeometry for each cell/spot — annotSummary","text":"","code":"annotSummary(   sfe,   colGeometryName = 1L,   annotGeometryName = 1L,   annotColNames = 1L,   sample_id = NULL,   pred = st_intersects,   summary_fun = mean )"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/annotSummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize attributes of an annotGeometry for each cell/spot — annotSummary","text":"sfe SFE object. colGeometryName Name column geometry predicate. annotGeometryName Name annotation geometry predicate. annotColNames Character, column names annotGeometry interest, indicate columns summarize. Columns absent annotGeometry removed. column \"geometry\" \"barcode\". sample_id sample(s) operate . Can \"\" indicate samples. pred Predicate function use, defaults st_intersects. summary_fun Function summary, defaults mean.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/annotSummary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize attributes of an annotGeometry for each cell/spot — annotSummary","text":"data frame whose row names relevant column names  sfe, column summary column   specified annotColName.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/annotSummary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize attributes of an annotGeometry for each cell/spot — annotSummary","text":"","code":"library(SFEData) sfe <- McKellarMuscleData(\"small\") #> snapshotDate(): 2022-08-23 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache s <- annotSummary(sfe, \"spotPoly\", \"myofiber_simplified\",                   annotColNames = c(\"area\", \"convexity\"))"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/bbox-SpatialFeatureExperiment-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Find bounding box of SFE objects — bbox,SpatialFeatureExperiment-method","title":"Find bounding box of SFE objects — bbox,SpatialFeatureExperiment-method","text":"Find bounding box union colGeometries annotGeometries sample SFE object. can used remove empty space tissue geometries one corner origin samples comparable coordinates.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/bbox-SpatialFeatureExperiment-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find bounding box of SFE objects — bbox,SpatialFeatureExperiment-method","text":"","code":"# S4 method for SpatialFeatureExperiment bbox(sfe, sample_id = NULL)"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/bbox-SpatialFeatureExperiment-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find bounding box of SFE objects — bbox,SpatialFeatureExperiment-method","text":"sfe SpatialFeatureExperiment object. sample_id Sample(s) whose bounding box(es) find. bounding box union colGeometries annotGeometries associated sample.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/bbox-SpatialFeatureExperiment-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find bounding box of SFE objects — bbox,SpatialFeatureExperiment-method","text":"one sample, named vector names xmin,  ymin, xmax, ymax specifying bounding box.   multiple samples, matrix whose columns samples whose rows   delineate bounding box.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/bbox-SpatialFeatureExperiment-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find bounding box of SFE objects — bbox,SpatialFeatureExperiment-method","text":"","code":"library(SFEData) sfe <- McKellarMuscleData(\"small\") #> snapshotDate(): 2022-08-23 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache bbox(sfe, sample_id = \"Vis5A\") #>  xmin  ymin  xmax  ymax  #>  5000 13000  7000 15000"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/cbind-SpatialFeatureExperiment-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate SpatialFeatureExperiment objects — cbind,SpatialFeatureExperiment-method","title":"Concatenate SpatialFeatureExperiment objects — cbind,SpatialFeatureExperiment-method","text":"top cbind method SpatialExperiment, method needed properly merge spatialGraphs field different SFE objects.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/cbind-SpatialFeatureExperiment-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate SpatialFeatureExperiment objects — cbind,SpatialFeatureExperiment-method","text":"","code":"# S4 method for SpatialFeatureExperiment cbind(..., deparse.level = 1)"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/cbind-SpatialFeatureExperiment-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate SpatialFeatureExperiment objects — cbind,SpatialFeatureExperiment-method","text":"... SFE objects cbind. deparse.level See ?rbind.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/cbind-SpatialFeatureExperiment-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate SpatialFeatureExperiment objects — cbind,SpatialFeatureExperiment-method","text":"combined SFE object.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/cbind-SpatialFeatureExperiment-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate SpatialFeatureExperiment objects — cbind,SpatialFeatureExperiment-method","text":"","code":"library(SFEData) sfe_small <- McKellarMuscleData(dataset = \"small\") #> snapshotDate(): 2022-08-23 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache sfe_small2 <- McKellarMuscleData(dataset = \"small2\") #> snapshotDate(): 2022-08-23 #> see ?SFEData and browseVignettes('SFEData') for documentation #> downloading 1 resources #> retrieving 1 resource #> loading from cache sfe2 <- cbind(sfe_small, sfe_small2)"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/changeSampleIDs.html","id":null,"dir":"Reference","previous_headings":"","what":"Change sample IDs — changeSampleIDs","title":"Change sample IDs — changeSampleIDs","text":"Change sample IDs fields SFE object sample IDs present, just colData.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/changeSampleIDs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change sample IDs — changeSampleIDs","text":"","code":"changeSampleIDs(sfe, replacement)"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/changeSampleIDs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change sample IDs — changeSampleIDs","text":"sfe SpatialFeatureExperiment object. replacement named character vector whose names existing sample IDs changed whose values corresponding replacements.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/changeSampleIDs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change sample IDs — changeSampleIDs","text":"SFE object.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/changeSampleIDs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change sample IDs — changeSampleIDs","text":"","code":"library(SFEData) sfe <- McKellarMuscleData(dataset = \"small\") #> snapshotDate(): 2022-08-23 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache sfe <- changeSampleIDs(sfe, c(Vis5A = \"sample01\")) sampleIDs(sfe) #> [1] \"sample01\""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/crop.html","id":null,"dir":"Reference","previous_headings":"","what":"Crop an SFE object with a geometry — crop","title":"Crop an SFE object with a geometry — crop","text":"Returns SFE object whose specified colGeometry returns TRUE geometric predicate function (usually intersects) another geometry interest. can used subset SFE object tissue boundary histological region polygon, crop away empty spaces. cropping, cells/spots subsetted, also geometries cropped.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/crop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crop an SFE object with a geometry — crop","text":"","code":"crop(   x,   y = NULL,   colGeometryName = 1L,   sample_id = NULL,   pred = st_intersects,   op = st_intersection,   xmin = NULL,   xmax = NULL,   ymin = NULL,   ymax = NULL )"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/crop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crop an SFE object with a geometry — crop","text":"x SFE object. y object class sf, sfg, sfc crop SFE object. Optional xmin, xmax, ymin, ymax specified bounding box. colGeometryName Column geometry used indicate cells/spots keep. sample_id Samples crop. Optional one sample present. Can multiple samples, \"\", means samples. multiple samples, y may column sample_id indicating geometry subsets sample. samples included sample_id column subsetted. sample_id column y specified, geometry bounding box used subset samples specified sample_id argument. pred geometric binary predicate function indicate cells/spots keep, defaults st_intersects. op geometric operation function crop geometries SFE object. Defaults st_intersection. xmin Minimum x coordinate bounding box. Ignored y specified. xmax Maximum x coordinate bounding box. ymin Minimum y coordinate bounding box. ymax Maximum y coordinate bounding box.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/crop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crop an SFE object with a geometry — crop","text":"SFE object. guarantee geometries   cropping still valid preserve original geometry class.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/crop.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Crop an SFE object with a geometry — crop","text":"version, function crop image.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/crop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crop an SFE object with a geometry — crop","text":"","code":"library(SFEData) sfe <- McKellarMuscleData(\"small\") #> snapshotDate(): 2022-08-23 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache # Subset sfe to only keep spots on tissue sfe_on_tissue <- crop(sfe, tissueBoundary(sfe), colGeometryName = \"spotPoly\",                       sample_id = \"Vis5A\") # Subset sfe to only keep what's within a bounding box # All geometries will be cropped # sample_id is optional when only one sample is present sfe_cropped <- crop(sfe, colGeometryName = \"spotPoly\",                     xmin = 5500, xmax = 6500, ymin = 13500, ymax = 14500)"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/df2sf.html","id":null,"dir":"Reference","previous_headings":"","what":"From ordinary data frame to sf to construct SFE object — df2sf","title":"From ordinary data frame to sf to construct SFE object — df2sf","text":"SpatialFeatureExperiment constructor *Geometry replacement methods can convert properly formatted ordinary data frames sf objects used store geometries internally, user might want conversion, check geometry valid, inspect fix invalid geometries.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/df2sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"From ordinary data frame to sf to construct SFE object — df2sf","text":"","code":"df2sf(   df,   spatialCoordsNames = c(\"x\", \"y\"),   spotDiameter = NA,   geometryType = c(\"POINT\", \"LINESTRING\", \"POLYGON\", \"MULTIPOINT\", \"MULTILINESTRING\",     \"MULTIPOLYGON\") )"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/df2sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"From ordinary data frame to sf to construct SFE object — df2sf","text":"df ordinary data frame, .e. sf. matrix can converted data frame. spatialCoordsNames Column names df specify spatial coordinates. spotDiameter Spot diameter technologies arrays spots fixed diameter per slide, Visium, ST, DBiT-seq, slide-seq. diameter must unit coordinates *Geometry arguments. Ignored geometries POINT MULTIPOINT. geometryType Type geometry convert ordinary data frame . geometry df de facto points, argument ignored returned sf geometry type POINT. geometry type one geometry specified multiple coordinates, data frame df must column \"ID\" specifying coordinate belongs geometry. MULTI* geometries, must \"group\" column specifying coordinates MULTI geometry.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/df2sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"From ordinary data frame to sf to construct SFE object — df2sf","text":"sf object.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/df2sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"From ordinary data frame to sf to construct SFE object — df2sf","text":"","code":"# Points, use spotDiameter to convert to circle polygons # This is done to Visium spots pts_df <- readRDS(system.file(\"testdata/pts_df.rds\",                   package = \"SpatialFeatureExperiment\")) sf_use <- df2sf(pts_df, geometryType = \"POINT\", spotDiameter = 0.1) # Linestring ls_df <- readRDS(system.file(\"testdata/ls_df.rds\",                  package = \"SpatialFeatureExperiment\")) sf_use <- df2sf(ls_df, geometryType = \"LINESTRING\") # Polygon pol_df <- readRDS(system.file(\"testdata/pol_df.rds\",                   package = \"SpatialFeatureExperiment\")) sf_use <- df2sf(pol_df, geometryType = \"POLYGON\",                 spatialCoordsNames = c(\"V1\", \"V2\")) # Multipolygon mpol_df <- readRDS(system.file(\"testdata/mpol_df.rds\",                    package = \"SpatialFeatureExperiment\")) sf_use <- df2sf(mpol_df, geometryType = \"MULTIPOLYGON\",                 spatialCoordsNames = c(\"V1\", \"V2\")) # Multiple sample_ids present multipts_df <- readRDS(system.file(\"testdata/multipts_df.rds\",                        package = \"SpatialFeatureExperiment\")) sf_use <- df2sf(multipts_df, geometryType = \"MULTIPOINT\")"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/dimGeometries.html","id":null,"dir":"Reference","previous_headings":"","what":"Dimension geometry methods — dimGeometries","title":"Dimension geometry methods — dimGeometries","text":"\"Dimension geometry\" refers Simple Feature (sf) geometries associated rows (features, genes) columns (cells spots) gene count matrix SpatialFeatureExperiment object. dimension, number rows sf data frame specifying geometries must match size dimension interest. example, must number rows sf data frame describing cells cells gene count matrix. page documents getters setters dimension geometries. getters setters implemented way similar reducedDims SingleCellExperiment.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/dimGeometries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dimension geometry methods — dimGeometries","text":"","code":"# S4 method for SpatialFeatureExperiment dimGeometries(x, MARGIN = 2, withDimnames = TRUE)  # S4 method for SpatialFeatureExperiment dimGeometries(x, MARGIN, withDimnames = TRUE, translate = TRUE, ...) <- value  # S4 method for SpatialFeatureExperiment dimGeometryNames(x, MARGIN)  # S4 method for SpatialFeatureExperiment,numeric,character dimGeometryNames(x, MARGIN) <- value  # S4 method for SpatialFeatureExperiment,missing dimGeometry(x, type, MARGIN, sample_id = NULL, withDimnames = TRUE)  # S4 method for SpatialFeatureExperiment,numeric dimGeometry(x, type, MARGIN, sample_id = NULL, withDimnames = TRUE)  # S4 method for SpatialFeatureExperiment,character dimGeometry(x, type, MARGIN, sample_id = NULL, withDimnames = TRUE)  # S4 method for SpatialFeatureExperiment,missing dimGeometry(   x,   type,   MARGIN,   sample_id = NULL,   withDimnames = TRUE,   translate = TRUE,   ... ) <- value  # S4 method for SpatialFeatureExperiment,numeric dimGeometry(   x,   type,   MARGIN,   sample_id = NULL,   withDimnames = TRUE,   translate = TRUE,   ... ) <- value  # S4 method for SpatialFeatureExperiment,character dimGeometry(   x,   type,   MARGIN,   sample_id = NULL,   withDimnames = TRUE,   translate = TRUE,   ... ) <- value  colGeometry(x, type = 1L, sample_id = NULL, withDimnames = TRUE)  colGeometry(   x,   type = 1L,   sample_id = NULL,   withDimnames = TRUE,   translate = TRUE ) <- value  colGeometries(x, withDimnames = TRUE)  colGeometries(x, withDimnames = TRUE, translate = TRUE) <- value  colGeometryNames(x)  colGeometryNames(x) <- value  rowGeometry(x, type = 1L, sample_id = NULL, withDimnames = TRUE)  rowGeometry(   x,   type = 1L,   sample_id = NULL,   withDimnames = TRUE,   translate = TRUE ) <- value  rowGeometries(x, withDimnames = TRUE)  rowGeometries(x, withDimnames = TRUE, translate = TRUE) <- value  rowGeometryNames(x)  rowGeometryNames(x) <- value  spotPoly(x, sample_id = NULL, withDimnames = TRUE)  spotPoly(x, sample_id = NULL, withDimnames = TRUE, translate = TRUE) <- value  ROIPoly(x, sample_id = NULL, withDimnames = TRUE)  ROIPoly(x, sample_id = NULL, withDimnames = TRUE, translate = TRUE) <- value  cellSeg(x, sample_id = NULL, withDimnames = TRUE)  cellSeg(x, sample_id = NULL, withDimnames = TRUE, translate = TRUE) <- value  nucSeg(x, sample_id = NULL, withDimnames = TRUE)  nucSeg(x, sample_id = NULL, withDimnames = TRUE, translate = TRUE) <- value  txSpots(x, withDimnames = TRUE)  txSpots(x, withDimnames = TRUE, translate = TRUE) <- value"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/dimGeometries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dimension geometry methods — dimGeometries","text":"x SpatialFeatureExperiment object. MARGIN apply. 1 stands rows 2 stands columns. withDimnames Logical. TRUE, dimnames (colnames rownames) gene count matrix correspond row names sf data frames interest. translate Logical. used removeEmptySpace run SFE object. case, argument indicates whether new value assigned geometry coordinates prior removal empty space translated match new coordinates removing empty space. Default TRUE. ... spatialCoordsNames, spotDiameter, geometryType passed df2sf. Defaults df2sf. dimGeometries<- : geometryType can character vector geometry type data frame list length list data frames specify different types geometries. value Value set. dimGeometry, must sf data frame number rows size dimension interest, ordinary data frame can converted sf data frame (see df2sf). dimGeometries, must list sf ordinary data frames. type integer specifying index string specifying name *Geometry query replace. missing, first item *Geometries returned replaced. sample_id Sample ID get set geometries.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/dimGeometries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dimension geometry methods — dimGeometries","text":"Getters multiple geometries return named list. Getters names   return character vector names. Getters single geometries   return sf data frame. Setters return SFE object.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/dimGeometries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dimension geometry methods — dimGeometries","text":"convenience wrappers getters setters special geometries: colGeometry/ies dimGeometry/ies MARGIN = 2, geometries associated columns gene count matrix (cells/Visium spots/samples). rowGeometry/ies dimGeometry/ies MARGIN = 1, geometries associated rows gene count matrix (genes/features). spotPoly Polygons spots technologies Visium, ST, slide-seq, correspond cells. Centroids polygons stored spatialCoords underlying SpatialExperiment object. ROIPoly Polygons regions interest (ROIs) technologies laser capture microdissection (LCM) GeoMX DSP. correspond columns gene count matrix. cellSeg Cell segmentation polygons. columns gene count matrix single cells, stored colGeometries. Otherwise, stored annotGeometries. nucSeg Similar cellSeg, nuclei rather whole cell. txSpots POINT MULTIPOINT geometries transcript spots single molecular resolution technologies, stored rowGeometries.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/dimGeometries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dimension geometry methods — dimGeometries","text":"","code":"library(SFEData) sfe <- McKellarMuscleData(dataset = \"small\") #> snapshotDate(): 2022-08-23 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache  # Get all column geometries as a named list # Use MARGIN = 1 or rowGeometry/ies for rowGeometries cgs <- dimGeometries(sfe, MARGIN = 2) # Or equivalently cgs <- colGeometries(sfe)  # Set all column geometries with a named list dimGeometries(sfe, MARGIN = 2) <- cgs # Or equivalently colGeometries(sfe) <- cgs  # Get names of column geometries cgns <- dimGeometryNames(sfe, MARGIN = 2) cgns <- colGeometryNames(sfe)  # Set column geometry names dimGeometryNames(sfe, MARGIN = 2) <- cgns colGeometryNames(sfe) <- cgns  # Get a specific column geometry by name spots <- dimGeometry(sfe, \"spotPoly\", MARGIN = 2) spots <- colGeometry(sfe, \"spotPoly\") # Or equivalently, the wrapper specifically for Visium spot polygons, # for the name \"spotPoly\" spots <- spotPoly(sfe) # Other colGeometry wrappers for specific names: # ROIPoly (for LCM and GeoMX DSP), cellSeg and nucSeg (for MERFISH; would # query annotGeometries for Visium) # rowGeometry wrappers for specific names: txSpots (MERFISH transcript spots) # By index spots <- colGeometry(sfe, 1L)  # Multiple samples, only get geometries for one sample sfe2 <- McKellarMuscleData(\"small2\") #> snapshotDate(): 2022-08-23 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache sfe_combined <- cbind(sfe, sfe2) spots1 <- colGeometry(sfe, \"spotPoly\", sample_id = \"Vis5A\") spots2 <- spotPoly(sfe_combined, sample_id = \"sample02\") # Get geometries for multiple samples spots3 <- spotPoly(sfe_combined, sample_id = c(\"Vis5A\", \"sample02\")) # All samples spots3 <- spotPoly(sfe_combined, sample_id = \"all\")  # Set specific column geometry by name colGeometry(sfe, \"foobar\") <- spots # Or use wrapper spotPoly(sfe) <- spots # Specify sample_id colGeometry(sfe_combined, \"foobar\", sample_id = \"Vis5A\") <- spots1 # Only entries for the specified sample are set. foobar <- colGeometry(sfe_combined, \"foobar\", sample_id = \"sample02\")"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/findSpatialNeighbors-SpatialFeatureExperiment-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Find spatial neighborhood graph — findSpatialNeighbors,SpatialFeatureExperiment-method","title":"Find spatial neighborhood graph — findSpatialNeighbors,SpatialFeatureExperiment-method","text":"function wraps spatial neighborhood graphs implemented package spdep SpatialFeatureExperiment (SFE) class, find spatial neighborhood graphs entities represented columns rows gene count matrix SFE object spatial entities annotGeometries field SFE object. Results stored listw objects spatialGraphs field SFE object, listw used many methods facilitate spatial neighborhood graph spdep, spatialreg, adespatial. edge weights graph listw object default style W (see nb2listw) unweighted neighbor list neighbours field listw object.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/findSpatialNeighbors-SpatialFeatureExperiment-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find spatial neighborhood graph — findSpatialNeighbors,SpatialFeatureExperiment-method","text":"","code":"# S4 method for SpatialFeatureExperiment findSpatialNeighbors(   x,   sample_id = NULL,   type = \"spatialCoords\",   MARGIN = 2,   method = c(\"tri2nb\", \"knearneigh\", \"dnearneigh\", \"gabrielneigh\", \"relativeneigh\",     \"soi.graph\", \"poly2nb\"),   glist = NULL,   style = \"W\",   zero.policy = NULL,   ... )"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/findSpatialNeighbors-SpatialFeatureExperiment-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find spatial neighborhood graph — findSpatialNeighbors,SpatialFeatureExperiment-method","text":"x SpatialFeatureExperiment object. sample_id sample(s) SFE object use graph. Can also \"\", means function compute graph samples independently. type Name geometry associated MARGIN interest compute graph. MARGIN Just like apply, 1 stands row, 2 stands column. , addition, 3 stands annotation, query annotGeometries, nuclei segmentation Visium data method Name function package spdep use find spatial neighborhood graph. glist list general weights corresponding neighbours style style can take values “W”, “B”, “C”, “U”, “minmax” “S” zero.policy default NULL, use global option value; FALSE stop error empty neighbour sets, TRUE permit weights list formed zero-length weights vectors ... Extra arguments passed spdep function stated method argument, k, use_kd_tree, d1, d2, nnmult, sym, quadsegs. Note arguments using longitude latitude, irrelevant, ignored. longlat argument hard coded FALSE.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/findSpatialNeighbors-SpatialFeatureExperiment-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find spatial neighborhood graph — findSpatialNeighbors,SpatialFeatureExperiment-method","text":"one sample, listw object representing graph,   attribute \"method\" recording function used build graph,   arguments, information geometry graph   built. attribute used reconstruct graphs SFE object   subsetted since nodes graph longer present.   sample_id = \"\" length > 1, named list listw objects, whose names sample_ids. add list multiple   samples SFE object, specify name argument  spatialGraphs replacement method, graph name   added SFE object sample.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/findSpatialNeighbors-SpatialFeatureExperiment-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find spatial neighborhood graph — findSpatialNeighbors,SpatialFeatureExperiment-method","text":"","code":"library(SFEData) sfe <- McKellarMuscleData(dataset = \"small\") #> snapshotDate(): 2022-08-23 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache # sample_id is optional when only one sample is present g <- findSpatialNeighbors(sfe, sample_id = \"Vis5A\") attr(g, \"method\") #> $FUN #> [1] \"findSpatialNeighbors\" #>  #> $package #> [1] \"SpatialFeatureExperiment\" #>  #> $args #> $args$method #> [1] \"tri2nb\" #>  #> $args$row.namesargs$style #> [1] \"W\" #>  #> $args$sample_id #> [1] \"Vis5A\" #>  #> $args$type #> [1] \"spatialCoords\" #>  #> $args$MARGIN #> [1] 2 #>  #>  # Returns named list for multiple samples sfe2 <- McKellarMuscleData(dataset = \"small2\") #> snapshotDate(): 2022-08-23 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache sfe_combined <- cbind(sfe, sfe2) gs <- findSpatialNeighbors(sfe, sample_id = \"all\")"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/findVisiumGraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Find spatial neighborhood graphs for Visium spots — findVisiumGraph","title":"Find spatial neighborhood graphs for Visium spots — findVisiumGraph","text":"Visium spots arranged hexagonal grid. function uses known locations Visium barcodes construct neighborhood graph, adjacent spots connected edges. Since known rows columns spots used, unit spot centroid coordinates matter.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/findVisiumGraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find spatial neighborhood graphs for Visium spots — findVisiumGraph","text":"","code":"findVisiumGraph(x, sample_id = NULL, style = \"W\", zero.policy = NULL)"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/findVisiumGraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find spatial neighborhood graphs for Visium spots — findVisiumGraph","text":"x SpatialFeatureExperiment object Visium data. Column names gene count matrix must Visium barcodes, may numeric suffix distinguish samples (e.g. \"AAACAACGAATAGTTC-1\"). sample_id sample(s) SFE object use graph. Can also \"\", means function compute graph samples independently. style style can take values “W”, “B”, “C”, “U”, “minmax” “S” zero.policy default NULL, use global option value; FALSE stop error empty neighbour sets, TRUE permit weights list formed zero-length weights vectors","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/findVisiumGraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find spatial neighborhood graphs for Visium spots — findVisiumGraph","text":"one sample, listw object representing graph,   attribute \"method\" recording function used build graph,   arguments, information geometry graph   built. attribute used reconstruct graphs SFE object   subsetted since nodes graph longer present.   sample_id = \"\" length > 1, named list listw objects, whose names sample_ids. add list multiple   samples SFE object, specify name argument  spatialGraphs replacement method, graph name   added SFE object sample.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/findVisiumGraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find spatial neighborhood graphs for Visium spots — findVisiumGraph","text":"","code":"library(SFEData) sfe <- McKellarMuscleData(dataset = \"small\") #> snapshotDate(): 2022-08-23 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache g <- findVisiumGraph(sfe) # For multiple samples, returns named list sfe2 <- McKellarMuscleData(dataset = \"small2\") #> snapshotDate(): 2022-08-23 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache sfe_combined <- cbind(sfe, sfe2) gs <- findVisiumGraph(sfe, sample_id = \"all\")"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/localResults.html","id":null,"dir":"Reference","previous_headings":"","what":"Organize results from local spatial statistics — localResults","title":"Organize results from local spatial statistics — localResults","text":"Local spatial statics like local Moran's , local Geary's C, Getis-Ord Gi*, geographically weighted PCA loadings return values spatial location. Just like dimension reductions, results clearly associated braoder SFE object, place within object. localResults field SFE object stores results value spatial location.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/localResults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Organize results from local spatial statistics — localResults","text":"","code":"# S4 method for SpatialFeatureExperiment localResults(x, withDimnames = TRUE, ...)  # S4 method for SpatialFeatureExperiment localResults(x, withDimnames = TRUE, ...) <- value  # S4 method for SpatialFeatureExperiment localResultNames(x)  # S4 method for SpatialFeatureExperiment,character localResultNames(x) <- value  # S4 method for SpatialFeatureExperiment,missing localResult(x, type, sample_id = NULL, withDimnames = TRUE)  # S4 method for SpatialFeatureExperiment,numeric localResult(x, type, sample_id = NULL, withDimnames = TRUE)  # S4 method for SpatialFeatureExperiment,character localResult(x, type, sample_id = NULL, withDimnames = TRUE)  # S4 method for SpatialFeatureExperiment,missing localResult(x, type, sample_id = NULL, withDimnames = TRUE) <- value  # S4 method for SpatialFeatureExperiment,numeric localResult(x, type, sample_id = NULL, withDimnames = TRUE) <- value  # S4 method for SpatialFeatureExperiment,character localResult(x, type, sample_id = NULL, withDimnames = TRUE) <- value"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/localResults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Organize results from local spatial statistics — localResults","text":"x SpatialFeatureExperiment object. withDimnames Logical. TRUE, dimnames (colnames rownames) gene count matrix correspond row names sf data frames interest. ... Ignored value Values set, either matrix data frame. type integer specifying index string specifying name *Geometry query replace. missing, first item *Geometries returned replaced. sample_id Sample ID get set geometries.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/localResults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Organize results from local spatial statistics — localResults","text":"localResults returns named list element   set local results interest. localResult returns matrix   data frame, whichever original set.  localResultNames returns character vector. Setters return SFE   object desired field set.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/localResults.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Organize results from local spatial statistics — localResults","text":"","code":"# Toy example sfe <- readRDS(system.file(\"testdata/sfe_toy.rds\", package = \"SpatialFeatureExperiment\")) set.seed(29) toy_res1 <- matrix(rnorm(10), nrow = 5, ncol = 2,                    dimnames = list(colnames(sfe), c(\"meow\", \"purr\"))) toy_res2 <- matrix(rpois(10, lambda = 2), nrow = 5, ncol = 2,                    dimnames = list(colnames(sfe), c(\"sassy\", \"tortitude\"))) # Set multiple items localResults(sfe) <- list(foo = toy_res1, bar = toy_res2) # Get multiple items localResults(sfe) #> List of length 2 #> names(2): foo bar # Set one item by name (can also be by index) localResult(sfe, \"foo\") <- toy_res1 # Get one item localResult(sfe, \"foo\") #>         meow       purr #> Y -1.2833712  2.1104419 #> H -1.2634498 -0.5214171 #> S  0.2146729 -0.9300566 #> G  0.9469490  0.4193712 #> X -1.1750246  1.1111370 # Get names localResultNames(sfe) #> [1] \"foo\" \"bar\" # sample_id argument is mandatory when there're multiple samples sfe3 <- readRDS(system.file(\"testdata/sfe_multi_sample.rds\",                 package = \"SpatialFeatureExperiment\")) localResult(sfe3, type = \"foo\", sample_id = \"sample01\",             withDimnames = FALSE) <- toy_res1[1:3,] localResult(sfe3, \"foo\", sample_id = \"sample01\") #>         meow       purr #> Y -1.2833712  2.1104419 #> H -1.2634498 -0.5214171 #> S  0.2146729 -0.9300566"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/read10xVisiumSFE.html","id":null,"dir":"Reference","previous_headings":"","what":"Read 10X Visium data as SpatialFeatureExperiment — read10xVisiumSFE","title":"Read 10X Visium data as SpatialFeatureExperiment — read10xVisiumSFE","text":"Read Space Ranger output SpatialFeatureExperiment object, spots represented polygons colGeometry called \"spotPoly\". geometries can added later dataset read. data = \"filtered\", spatial neighborhood graphs spots also computed stored colGraph called \"visium\" samples downstream spatial analyses.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/read10xVisiumSFE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read 10X Visium data as SpatialFeatureExperiment — read10xVisiumSFE","text":"","code":"read10xVisiumSFE(   samples = \"\",   sample_id = paste0(\"sample\", sprintf(\"%02d\", seq_along(samples))),   type = c(\"HDF5\", \"sparse\"),   data = c(\"filtered\", \"raw\"),   images = \"lowres\",   load = TRUE,   style = \"W\",   zero.policy = NULL )"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/read10xVisiumSFE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read 10X Visium data as SpatialFeatureExperiment — read10xVisiumSFE","text":"samples character vector specifying one directories,  corresponding 10x Genomics Visium sample (see Details); provided, names used sample identifiers sample_id character string specifying unique sample identifiers, one directory specified via samples;  ignored !.null(names(samples)) type Either \"HDF5\", matrix represented TENxMatrix, \"sparse\", matrix read dgCMatrix. data character string specifying whether read filtered (spots mapped tissue) raw data (spots). images character vector specifying images include.  Valid values \"lowres\", \"hires\", \"fullres\", \"detected\", \"aligned\" load logical; image(s) loaded memory grob? FALSE, store path/URL instead. style style can take values “W”, “B”, “C”, “U”, “minmax” “S” zero.policy default NULL, use global option value; FALSE stop error empty neighbour sets, TRUE permit weights list formed zero-length weights vectors","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/read10xVisiumSFE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read 10X Visium data as SpatialFeatureExperiment — read10xVisiumSFE","text":"SpatialFeatureExperiment object","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/read10xVisiumSFE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read 10X Visium data as SpatialFeatureExperiment — read10xVisiumSFE","text":"","code":"library(SpatialExperiment) # Just for the example directory dir <- system.file(   file.path(\"extdata\", \"10xVisium\"),   package = \"SpatialExperiment\")  sample_ids <- c(\"section1\", \"section2\") samples <- file.path(dir, sample_ids, \"outs\")  list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/home/runner/work/_temp/Library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" (sfe <- read10xVisiumSFE(samples, sample_ids, type = \"sparse\", data = \"raw\",                          load = FALSE)) #> class: SpatialFeatureExperiment  #> dim: 50 99  #> metadata(0): #> assays(1): counts #> rownames(50): ENSMUSG00000051951 ENSMUSG00000089699 ... #>   ENSMUSG00000005886 ENSMUSG00000101476 #> rowData names(1): symbol #> colnames(99): AAACAACGAATAGTTC-1 AAACAAGTATCTCCCA-1 ... #>   AAAGTCGACCCTCAGT-1-1 AAAGTGCCATCAATTA-1-1 #> colData names(4): in_tissue array_row array_col sample_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : pxl_row_in_fullres pxl_col_in_fullres #> imgData names(4): sample_id image_id data scaleFactor #>  #> Geometries: #> colGeometries: spotPoly (POLYGON)  #> annotGeometries:  ()  #>  #> Graphs: #> section1:  #> section2:"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/removeEmptySpace.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove empty space — removeEmptySpace","title":"Remove empty space — removeEmptySpace","text":"sample independently, geometries spatialCoords translated origin minimum coordinates bounding box geometries sample. way coordinates different samples comparable.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/removeEmptySpace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove empty space — removeEmptySpace","text":"","code":"removeEmptySpace(sfe, sample_id = \"all\")"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/removeEmptySpace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove empty space — removeEmptySpace","text":"sfe SFE object. sample_id Sample remove empty space.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/removeEmptySpace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove empty space — removeEmptySpace","text":"SFE object empty space removed.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/removeEmptySpace.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Remove empty space — removeEmptySpace","text":"Unlike functions package, function operates samples default.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/removeEmptySpace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove empty space — removeEmptySpace","text":"","code":"library(SFEData) library(SingleCellExperiment) sfe <- McKellarMuscleData(\"full\") #> snapshotDate(): 2022-08-23 #> see ?SFEData and browseVignettes('SFEData') for documentation #> downloading 1 resources #> retrieving 1 resource #> loading from cache # Only keep spots on tissue sfe <- sfe[,colData(sfe)$in_tissue] # Move the coordinates of the tissue sfe <- removeEmptySpace(sfe)"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/sampleIDs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all unique sample IDs — sampleIDs","title":"Get all unique sample IDs — sampleIDs","text":"title self-explanatory.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/sampleIDs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all unique sample IDs — sampleIDs","text":"","code":"sampleIDs(sfe)"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/sampleIDs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all unique sample IDs — sampleIDs","text":"sfe SpatialFeatureExperiment object.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/sampleIDs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all unique sample IDs — sampleIDs","text":"character vector unique entries sample_id column colData(x).","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/sampleIDs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all unique sample IDs — sampleIDs","text":"","code":"library(SFEData) sfe <- McKellarMuscleData(dataset = \"small\") #> snapshotDate(): 2022-08-23 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache sampleIDs(sfe) #> [1] \"Vis5A\""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/show-SpatialFeatureExperiment-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for SpatialFeatureExperiment — show,SpatialFeatureExperiment-method","title":"Print method for SpatialFeatureExperiment — show,SpatialFeatureExperiment-method","text":"Printing summaries colGeometries, rowGeometries, annotGeometries addition shown SpatialExperiment. Geometry names types printed.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/show-SpatialFeatureExperiment-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for SpatialFeatureExperiment — show,SpatialFeatureExperiment-method","text":"","code":"# S4 method for SpatialFeatureExperiment show(object)"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/show-SpatialFeatureExperiment-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for SpatialFeatureExperiment — show,SpatialFeatureExperiment-method","text":"object SpatialFeatureExperiment object.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/show-SpatialFeatureExperiment-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for SpatialFeatureExperiment — show,SpatialFeatureExperiment-method","text":"None (invisible NULL).","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/show-SpatialFeatureExperiment-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for SpatialFeatureExperiment — show,SpatialFeatureExperiment-method","text":"","code":"library(SFEData) sfe <- McKellarMuscleData(dataset = \"small\") #> snapshotDate(): 2022-08-23 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache sfe # The show method is implicitly called #> class: SpatialFeatureExperiment  #> dim: 15123 77  #> metadata(0): #> assays(1): counts #> rownames(15123): ENSMUSG00000025902 ENSMUSG00000096126 ... #>   ENSMUSG00000064368 ENSMUSG00000064370 #> rowData names(6): Ensembl symbol ... vars cv2 #> colnames(77): AAATTACCTATCGATG AACATATCAACTGGTG ... TTCTTTGGTCGCGACG #>   TTGATGTGTAGTCCCG #> colData names(12): barcode col ... prop_mito in_tissue #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : imageX imageY #> imgData names(1): sample_id #>  #> Geometries: #> colGeometries: spotPoly (POLYGON)  #> annotGeometries: tissueBoundary (POLYGON), myofiber_full (GEOMETRY), myofiber_simplified (GEOMETRY), nuclei (POLYGON), nuclei_centroid (POINT)  #>  #> Graphs: #> Vis5A:"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/spatialGraphs.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial graph methods — spatialGraphs","title":"Spatial graph methods — spatialGraphs","text":"Spatial neighborhood graphs spdep's listw objects stored int_metadata SFE object. listw class used spdep many useful methods rely neighborhood graph listw.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/spatialGraphs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatial graph methods — spatialGraphs","text":"","code":"# S4 method for SpatialFeatureExperiment,missing,missing,missing spatialGraphs(x, MARGIN, sample_id = NULL, name)  # S4 method for SpatialFeatureExperiment,numeric,missing,missing spatialGraphs(x, MARGIN, sample_id = NULL, name)  # S4 method for SpatialFeatureExperiment,missing,character,missing spatialGraphs(x, MARGIN, sample_id = NULL, name)  # S4 method for SpatialFeatureExperiment,missing,missing colGraphs(x, sample_id = NULL, name)  # S4 method for SpatialFeatureExperiment,missing,missing rowGraphs(x, sample_id = NULL, name)  # S4 method for SpatialFeatureExperiment,missing,missing annotGraphs(x, sample_id = NULL, name)  # S4 method for SpatialFeatureExperiment,numeric,character,missing spatialGraphs(x, MARGIN, sample_id = NULL, name)  # S4 method for SpatialFeatureExperiment,numeric,character,character spatialGraphs(x, MARGIN, sample_id = NULL, name)  # S4 method for SpatialFeatureExperiment,character,missing colGraphs(x, sample_id = NULL, name)  # S4 method for SpatialFeatureExperiment,character,character colGraphs(x, sample_id = NULL, name)  # S4 method for SpatialFeatureExperiment,character,missing rowGraphs(x, sample_id = NULL, name)  # S4 method for SpatialFeatureExperiment,character,character rowGraphs(x, sample_id = NULL, name)  # S4 method for SpatialFeatureExperiment,character,missing annotGraphs(x, sample_id = NULL, name)  # S4 method for SpatialFeatureExperiment,character,character annotGraphs(x, sample_id = NULL, name)  # S4 method for SpatialFeatureExperiment,missing,missing,missing spatialGraphs(x, MARGIN, sample_id = NULL, name) <- value  # S4 method for SpatialFeatureExperiment,numeric,missing,missing spatialGraphs(x, MARGIN, sample_id = NULL, name) <- value  # S4 method for SpatialFeatureExperiment,numeric,`NULL`,missing spatialGraphs(x, MARGIN, sample_id = NULL, name) <- value  # S4 method for SpatialFeatureExperiment,missing,character,missing spatialGraphs(x, MARGIN, sample_id = NULL, name) <- value  # S4 method for SpatialFeatureExperiment,missing,missing colGraphs(x, sample_id = NULL, name) <- value  # S4 method for SpatialFeatureExperiment,missing,missing rowGraphs(x, sample_id = NULL, name) <- value  # S4 method for SpatialFeatureExperiment,missing,missing annotGraphs(x, sample_id = NULL, name) <- value  # S4 method for SpatialFeatureExperiment,numeric,character,missing spatialGraphs(x, MARGIN, sample_id = NULL, name) <- value  # S4 method for SpatialFeatureExperiment,character,missing colGraphs(x, sample_id = NULL, name) <- value  # S4 method for SpatialFeatureExperiment,character,missing rowGraphs(x, sample_id = NULL, name) <- value  # S4 method for SpatialFeatureExperiment,character,missing annotGraphs(x, sample_id = NULL, name) <- value  # S4 method for SpatialFeatureExperiment,numeric,character,character spatialGraphs(x, MARGIN, sample_id = NULL, name) <- value  # S4 method for SpatialFeatureExperiment,character,character colGraphs(x, sample_id = NULL, name) <- value  # S4 method for SpatialFeatureExperiment,character,character rowGraphs(x, sample_id = NULL, name) <- value  # S4 method for SpatialFeatureExperiment,character,character annotGraphs(x, sample_id = NULL, name) <- value  # S4 method for SpatialFeatureExperiment,numeric spatialGraphNames(x, MARGIN, sample_id = NULL)  # S4 method for SpatialFeatureExperiment,numeric,ANY,character spatialGraphNames(x, MARGIN, sample_id = NULL) <- value  colGraphNames(x, sample_id = NULL)  rowGraphNames(x, sample_id = NULL)  annotGraphNames(x, sample_id = NULL)  colGraphNames(x, sample_id = NULL) <- value  rowGraphNames(x, sample_id = NULL) <- value  annotGraphNames(x, sample_id = NULL) <- value  # S4 method for SpatialFeatureExperiment,missing,numeric spatialGraph(x, type, MARGIN, sample_id = NULL)  # S4 method for SpatialFeatureExperiment,numeric,numeric spatialGraph(x, type, MARGIN, sample_id = NULL)  # S4 method for SpatialFeatureExperiment,character,numeric spatialGraph(x, type, MARGIN, sample_id = NULL)  colGraph(x, type = 1L, sample_id = NULL)  rowGraph(x, type = 1L, sample_id = NULL)  annotGraph(x, type = 1L, sample_id = NULL)  # S4 method for SpatialFeatureExperiment,missing,numeric spatialGraph(x, type, MARGIN, sample_id = NULL) <- value  # S4 method for SpatialFeatureExperiment,numeric,numeric spatialGraph(x, type, MARGIN, sample_id = NULL) <- value  # S4 method for SpatialFeatureExperiment,character,numeric spatialGraph(x, type, MARGIN, sample_id = NULL) <- value  colGraph(x, type = 1L, sample_id = NULL) <- value  rowGraph(x, type = 1L, sample_id = NULL) <- value  annotGraph(x, type = 1L, sample_id = NULL) <- value"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/spatialGraphs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatial graph methods — spatialGraphs","text":"x SpatialFeatureExperiment object. MARGIN apply. 1 stands rows 2 stands columns. addition, 3 stands spatial neighborhood graphs correspond annotGeometries. sample_id Name sample graph associated . useful multiple pieces tissues SFE object (say joint dimension reduction clustering) spatial neighborhood meaningful within piece tissue. See sample_id argument SpatialExperiment. name Name graphs add sample_id; used spatialGraphs replacement method must character type can either integer index name. value listw object (*Graph), named list list listw objects (*Graphs) names top level list sample_ids adding graphs samples margin interest, list listw objects adding graphs one sample one margin. type integer specifying index string specifying name *Graph query replace. missing, first item *Graph returned replaced.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/spatialGraphs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatial graph methods — spatialGraphs","text":"Getters multiple graphs return named list. Getters   names return character vector names. Getters single graphs   return listw object. Setters return SFE object.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/spatialGraphs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatial graph methods — spatialGraphs","text":"","code":"library(SFEData) sfe <- McKellarMuscleData(dataset = \"small\") #> snapshotDate(): 2022-08-23 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache g1 <- findVisiumGraph(sfe) g2 <- findSpatialNeighbors(sfe)  # Set all graphs of a margin by a named list spatialGraphs(sfe, MARGIN = 2L, sample_id = \"Vis5A\") <-   list(tri2nb = g2, visium = g1) # Or equivalently colGraphs(sfe, sample_id = \"Vis5A\") <- list(tri2nb = g2, visium = g1)  # Get all graphs of a margin, returning a named list gs <- spatialGraphs(sfe, MARGIN = 2L) # Or equivalently gs <- colGraphs(sfe)  # Set graph of the same name and same margin for multiple samples # Each sample has a separate graph sfe2 <- McKellarMuscleData(\"small2\") #> snapshotDate(): 2022-08-23 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache sfe_combined <- cbind(sfe, sfe2) colGraphs(sfe_combined, name = \"visium\", sample_id = \"all\") <-   findVisiumGraph(sfe_combined, sample_id = \"all\")  # Get graph names spatialGraphNames(sfe, MARGIN = 2L, sample_id = \"Vis5A\") #> [1] \"tri2nb\" \"visium\" # Or equivalently (sample_id optional as only one sample is present) colGraphNames(sfe) #> [1] \"tri2nb\" \"visium\"  # Set graph names spatialGraphNames(sfe, MARGIN = 2L) <- c(\"foo\", \"bar\") colGraphNames(sfe) <- c(\"tri2nb\", \"visium\")  # MARGIN = 1 means rowGraphs; MARGIN = 3 means annotation graphs (annotGraphs) # for both getters and setters  # Set single graph by # Spatial graph for myofibers g_myofiber <- findSpatialNeighbors(sfe, type = \"myofiber_simplified\",                                    MARGIN = 3L) spatialGraph(sfe, type = \"myofiber\", MARGIN = 3L) <- g_myofiber # Or equivalently annotGraph(sfe, \"myofiber\") <- g_myofiber  # Get a specific graph by name g <- spatialGraph(sfe, \"myofiber\", MARGIN = 3L) g2 <- spatialGraph(sfe, \"visium\", MARGIN = 2L) # Or equivalently g <- annotGraph(sfe, \"myofiber\") g2 <- colGraph(sfe, \"visium\")"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/st_any_pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple geometry predicates — st_any_pred","title":"Simple geometry predicates — st_any_pred","text":"Unlike functions sf like st_intersects, function simply returns logical vector indicating whether geometry x intersects (returns TRUE predicates) anything y, preferably y contains small number geometries one single MULTI geometry. useful cropping subsetting SFE object geometry, tissue boundary histological region polygons bounding box.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/st_any_pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple geometry predicates — st_any_pred","text":"","code":"st_any_pred(x, y, pred)  st_any_intersects(x, y)  st_n_pred(x, y, pred)  st_n_intersects(x, y)"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/st_any_pred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple geometry predicates — st_any_pred","text":"x object class sf, sfc, sfg. y Another object class sf, sfc, sfg. pred geometric binary predicate function, st_intersects. return object class sgbp, sparse predicates.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/st_any_pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple geometry predicates — st_any_pred","text":"st_any_*, logical vector indicating whether geometry x intersects (predicates covered ) anything y. Simplified sgbp results indicate item y item x intersects, might always relevant. st_n_*, integer vector indicating number geometries y returns TRUE geometry x.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/st_any_pred.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple geometry predicates — st_any_pred","text":"","code":"library(sf) #> Linking to GEOS 3.8.0, GDAL 3.0.4, PROJ 6.3.1; sf_use_s2() is TRUE pts <- st_sfc(st_point(c(.5,.5)), st_point(c(1.5, 1.5)), st_point(c(2.5, 2.5))) pol <- st_polygon(list(rbind(c(0,0), c(2,0), c(2,2), c(0,2), c(0,0)))) st_any_pred(pts, pol, pred = st_disjoint) #> [1] FALSE FALSE  TRUE st_any_intersects(pts, pol) #> [1]  TRUE  TRUE FALSE st_n_pred(pts, pol, pred = st_disjoint) #> [1] 0 0 1 st_n_intersects(pts, pol) #> [1] 1 1 0"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/visium_row_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Row and columns of Visium barcodes on the slide — visium_row_col","title":"Row and columns of Visium barcodes on the slide — visium_row_col","text":"Space Ranger 1.3.1.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/visium_row_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row and columns of Visium barcodes on the slide — visium_row_col","text":"","code":"visium_row_col"},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/visium_row_col.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Row and columns of Visium barcodes on the slide — visium_row_col","text":"data frame 4992 rows columns barcode, col, row.","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/reference/visium_row_col.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Row and columns of Visium barcodes on the slide — visium_row_col","text":"Space Ranger 1.3.1","code":""},{"path":"https://pachterlab.github.io/SpatialFeatureExperiment/dev/news/index.html","id":"spatialfeatureexperiment-0990","dir":"Changelog","previous_headings":"","what":"SpatialFeatureExperiment 0.99.0","title":"SpatialFeatureExperiment 0.99.0","text":"Added NEWS.md file track changes package.","code":""}]
